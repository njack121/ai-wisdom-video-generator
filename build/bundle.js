/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 8972:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4991);
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*! tailwindcss v4.1.1 | MIT License | https://tailwindcss.com */\n@layer theme, base, components, utilities;\n@supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {\n  @layer base {\n    *, ::before, ::after, ::backdrop {\n      --tw-rotate-x: rotateX(0);\n      --tw-rotate-y: rotateY(0);\n      --tw-rotate-z: rotateZ(0);\n      --tw-skew-x: skewX(0);\n      --tw-skew-y: skewY(0);\n      --tw-shadow: 0 0 #0000;\n      --tw-shadow-color: initial;\n      --tw-shadow-alpha: 100%;\n      --tw-inset-shadow: 0 0 #0000;\n      --tw-inset-shadow-color: initial;\n      --tw-inset-shadow-alpha: 100%;\n      --tw-ring-color: initial;\n      --tw-ring-shadow: 0 0 #0000;\n      --tw-inset-ring-color: initial;\n      --tw-inset-ring-shadow: 0 0 #0000;\n      --tw-ring-inset: initial;\n      --tw-ring-offset-width: 0px;\n      --tw-ring-offset-color: #fff;\n      --tw-ring-offset-shadow: 0 0 #0000;\n      --tw-blur: initial;\n      --tw-brightness: initial;\n      --tw-contrast: initial;\n      --tw-grayscale: initial;\n      --tw-hue-rotate: initial;\n      --tw-invert: initial;\n      --tw-opacity: initial;\n      --tw-saturate: initial;\n      --tw-sepia: initial;\n      --tw-drop-shadow: initial;\n      --tw-drop-shadow-color: initial;\n      --tw-drop-shadow-alpha: 100%;\n      --tw-drop-shadow-size: initial;\n      --tw-ease: initial;\n    }\n  }\n}\n@layer theme {\n  :root, :host {\n    --font-sans: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\",\n      \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n      \"Liberation Mono\", \"Courier New\", monospace;\n    --spacing: 0.25rem;\n    --ease-out: cubic-bezier(0, 0, 0.2, 1);\n    --default-transition-duration: 150ms;\n    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    --default-font-family: var(--font-sans);\n    --default-font-feature-settings: var(--font-sans--font-feature-settings);\n    --default-font-variation-settings: var(\n      --font-sans--font-variation-settings\n    );\n    --default-mono-font-family: var(--font-mono);\n    --default-mono-font-feature-settings: var(\n      --font-mono--font-feature-settings\n    );\n    --default-mono-font-variation-settings: var(\n      --font-mono--font-variation-settings\n    );\n  }\n}\n@layer base {\n  *, ::after, ::before, ::backdrop, ::file-selector-button {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    border: 0 solid;\n  }\n  html, :host {\n    line-height: 1.5;\n    -webkit-text-size-adjust: 100%;\n    tab-size: 4;\n    font-family: var( --default-font-family, ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" );\n    font-feature-settings: var(--default-font-feature-settings, normal);\n    font-variation-settings: var( --default-font-variation-settings, normal );\n    -webkit-tap-highlight-color: transparent;\n  }\n  body {\n    line-height: inherit;\n  }\n  hr {\n    height: 0;\n    color: inherit;\n    border-top-width: 1px;\n  }\n  abbr:where([title]) {\n    -webkit-text-decoration: underline dotted;\n    text-decoration: underline dotted;\n  }\n  h1, h2, h3, h4, h5, h6 {\n    font-size: inherit;\n    font-weight: inherit;\n  }\n  a {\n    color: inherit;\n    -webkit-text-decoration: inherit;\n    text-decoration: inherit;\n  }\n  b, strong {\n    font-weight: bolder;\n  }\n  code, kbd, samp, pre {\n    font-family: var( --default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace );\n    font-feature-settings: var( --default-mono-font-feature-settings, normal );\n    font-variation-settings: var( --default-mono-font-variation-settings, normal );\n    font-size: 1em;\n  }\n  small {\n    font-size: 80%;\n  }\n  sub, sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  sub {\n    bottom: -0.25em;\n  }\n  sup {\n    top: -0.5em;\n  }\n  table {\n    text-indent: 0;\n    border-color: inherit;\n    border-collapse: collapse;\n  }\n  :-moz-focusring {\n    outline: auto;\n  }\n  progress {\n    vertical-align: baseline;\n  }\n  summary {\n    display: list-item;\n  }\n  ol, ul, menu {\n    list-style: none;\n  }\n  img, svg, video, canvas, audio, iframe, embed, object {\n    display: block;\n    vertical-align: middle;\n  }\n  img, video {\n    max-width: 100%;\n    height: auto;\n  }\n  button, input, select, optgroup, textarea, ::file-selector-button {\n    font: inherit;\n    font-feature-settings: inherit;\n    font-variation-settings: inherit;\n    letter-spacing: inherit;\n    color: inherit;\n    border-radius: 0;\n    background-color: transparent;\n    opacity: 1;\n  }\n  :where(select:is([multiple], [size])) optgroup {\n    font-weight: bolder;\n  }\n  :where(select:is([multiple], [size])) optgroup option {\n    padding-inline-start: 20px;\n  }\n  ::file-selector-button {\n    margin-inline-end: 4px;\n  }\n  ::placeholder {\n    opacity: 1;\n    color: color-mix(in oklab, currentColor 50%, transparent);\n  }\n  textarea {\n    resize: vertical;\n  }\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  ::-webkit-date-and-time-value {\n    min-height: 1lh;\n    text-align: inherit;\n  }\n  ::-webkit-datetime-edit {\n    display: inline-flex;\n  }\n  ::-webkit-datetime-edit-fields-wrapper {\n    padding: 0;\n  }\n  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {\n    padding-block: 0;\n  }\n  :-moz-ui-invalid {\n    box-shadow: none;\n  }\n  button, input:where([type=\"button\"], [type=\"reset\"], [type=\"submit\"]), ::file-selector-button {\n    appearance: button;\n  }\n  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {\n    height: auto;\n  }\n  [hidden]:where(:not([hidden=\"until-found\"])) {\n    display: none !important;\n  }\n}\n@layer utilities {\n  .visible {\n    visibility: visible;\n  }\n  .absolute {\n    position: absolute;\n  }\n  .relative {\n    position: relative;\n  }\n  .static {\n    position: static;\n  }\n  .m-1 {\n    margin: calc(var(--spacing) * 1);\n  }\n  .m-2 {\n    margin: calc(var(--spacing) * 2);\n  }\n  .m-3 {\n    margin: calc(var(--spacing) * 3);\n  }\n  .m-4 {\n    margin: calc(var(--spacing) * 4);\n  }\n  .m-7 {\n    margin: calc(var(--spacing) * 7);\n  }\n  .m-8 {\n    margin: calc(var(--spacing) * 8);\n  }\n  .m-9 {\n    margin: calc(var(--spacing) * 9);\n  }\n  .m-10 {\n    margin: calc(var(--spacing) * 10);\n  }\n  .m-11 {\n    margin: calc(var(--spacing) * 11);\n  }\n  .m-12 {\n    margin: calc(var(--spacing) * 12);\n  }\n  .m-13 {\n    margin: calc(var(--spacing) * 13);\n  }\n  .m-15 {\n    margin: calc(var(--spacing) * 15);\n  }\n  .m-16 {\n    margin: calc(var(--spacing) * 16);\n  }\n  .m-17 {\n    margin: calc(var(--spacing) * 17);\n  }\n  .m-18 {\n    margin: calc(var(--spacing) * 18);\n  }\n  .m-20 {\n    margin: calc(var(--spacing) * 20);\n  }\n  .m-21 {\n    margin: calc(var(--spacing) * 21);\n  }\n  .m-22 {\n    margin: calc(var(--spacing) * 22);\n  }\n  .m-23 {\n    margin: calc(var(--spacing) * 23);\n  }\n  .m-24 {\n    margin: calc(var(--spacing) * 24);\n  }\n  .m-25 {\n    margin: calc(var(--spacing) * 25);\n  }\n  .m-26 {\n    margin: calc(var(--spacing) * 26);\n  }\n  .m-27 {\n    margin: calc(var(--spacing) * 27);\n  }\n  .m-28 {\n    margin: calc(var(--spacing) * 28);\n  }\n  .m-29 {\n    margin: calc(var(--spacing) * 29);\n  }\n  .m-30 {\n    margin: calc(var(--spacing) * 30);\n  }\n  .m-31 {\n    margin: calc(var(--spacing) * 31);\n  }\n  .m-32 {\n    margin: calc(var(--spacing) * 32);\n  }\n  .m-33 {\n    margin: calc(var(--spacing) * 33);\n  }\n  .m-34 {\n    margin: calc(var(--spacing) * 34);\n  }\n  .m-35 {\n    margin: calc(var(--spacing) * 35);\n  }\n  .m-36 {\n    margin: calc(var(--spacing) * 36);\n  }\n  .m-37 {\n    margin: calc(var(--spacing) * 37);\n  }\n  .m-39 {\n    margin: calc(var(--spacing) * 39);\n  }\n  .m-40 {\n    margin: calc(var(--spacing) * 40);\n  }\n  .m-41 {\n    margin: calc(var(--spacing) * 41);\n  }\n  .m-42 {\n    margin: calc(var(--spacing) * 42);\n  }\n  .m-44 {\n    margin: calc(var(--spacing) * 44);\n  }\n  .m-45 {\n    margin: calc(var(--spacing) * 45);\n  }\n  .m-46 {\n    margin: calc(var(--spacing) * 46);\n  }\n  .m-47 {\n    margin: calc(var(--spacing) * 47);\n  }\n  .m-48 {\n    margin: calc(var(--spacing) * 48);\n  }\n  .m-49 {\n    margin: calc(var(--spacing) * 49);\n  }\n  .m-50 {\n    margin: calc(var(--spacing) * 50);\n  }\n  .m-51 {\n    margin: calc(var(--spacing) * 51);\n  }\n  .m-52 {\n    margin: calc(var(--spacing) * 52);\n  }\n  .m-53 {\n    margin: calc(var(--spacing) * 53);\n  }\n  .m-54 {\n    margin: calc(var(--spacing) * 54);\n  }\n  .m-55 {\n    margin: calc(var(--spacing) * 55);\n  }\n  .m-56 {\n    margin: calc(var(--spacing) * 56);\n  }\n  .m-57 {\n    margin: calc(var(--spacing) * 57);\n  }\n  .m-58 {\n    margin: calc(var(--spacing) * 58);\n  }\n  .m-59 {\n    margin: calc(var(--spacing) * 59);\n  }\n  .m-60 {\n    margin: calc(var(--spacing) * 60);\n  }\n  .m-61 {\n    margin: calc(var(--spacing) * 61);\n  }\n  .m-62 {\n    margin: calc(var(--spacing) * 62);\n  }\n  .m-63 {\n    margin: calc(var(--spacing) * 63);\n  }\n  .m-64 {\n    margin: calc(var(--spacing) * 64);\n  }\n  .m-65 {\n    margin: calc(var(--spacing) * 65);\n  }\n  .m-66 {\n    margin: calc(var(--spacing) * 66);\n  }\n  .m-67 {\n    margin: calc(var(--spacing) * 67);\n  }\n  .m-68 {\n    margin: calc(var(--spacing) * 68);\n  }\n  .m-69 {\n    margin: calc(var(--spacing) * 69);\n  }\n  .m-70 {\n    margin: calc(var(--spacing) * 70);\n  }\n  .m-72 {\n    margin: calc(var(--spacing) * 72);\n  }\n  .m-73 {\n    margin: calc(var(--spacing) * 73);\n  }\n  .m-74 {\n    margin: calc(var(--spacing) * 74);\n  }\n  .m-76 {\n    margin: calc(var(--spacing) * 76);\n  }\n  .m-77 {\n    margin: calc(var(--spacing) * 77);\n  }\n  .m-78 {\n    margin: calc(var(--spacing) * 78);\n  }\n  .m-79 {\n    margin: calc(var(--spacing) * 79);\n  }\n  .m-80 {\n    margin: calc(var(--spacing) * 80);\n  }\n  .m-81 {\n    margin: calc(var(--spacing) * 81);\n  }\n  .m-82 {\n    margin: calc(var(--spacing) * 82);\n  }\n  .m-83 {\n    margin: calc(var(--spacing) * 83);\n  }\n  .m-84 {\n    margin: calc(var(--spacing) * 84);\n  }\n  .m-86 {\n    margin: calc(var(--spacing) * 86);\n  }\n  .m-88 {\n    margin: calc(var(--spacing) * 88);\n  }\n  .m-89 {\n    margin: calc(var(--spacing) * 89);\n  }\n  .m-90 {\n    margin: calc(var(--spacing) * 90);\n  }\n  .m-91 {\n    margin: calc(var(--spacing) * 91);\n  }\n  .m-93 {\n    margin: calc(var(--spacing) * 93);\n  }\n  .m-94 {\n    margin: calc(var(--spacing) * 94);\n  }\n  .m-96 {\n    margin: calc(var(--spacing) * 96);\n  }\n  .m-97 {\n    margin: calc(var(--spacing) * 97);\n  }\n  .m-98 {\n    margin: calc(var(--spacing) * 98);\n  }\n  .m-99 {\n    margin: calc(var(--spacing) * 99);\n  }\n  .m-100 {\n    margin: calc(var(--spacing) * 100);\n  }\n  .m-102 {\n    margin: calc(var(--spacing) * 102);\n  }\n  .m-103 {\n    margin: calc(var(--spacing) * 103);\n  }\n  .m-104 {\n    margin: calc(var(--spacing) * 104);\n  }\n  .m-105 {\n    margin: calc(var(--spacing) * 105);\n  }\n  .m-106 {\n    margin: calc(var(--spacing) * 106);\n  }\n  .m-107 {\n    margin: calc(var(--spacing) * 107);\n  }\n  .m-108 {\n    margin: calc(var(--spacing) * 108);\n  }\n  .m-109 {\n    margin: calc(var(--spacing) * 109);\n  }\n  .m-110 {\n    margin: calc(var(--spacing) * 110);\n  }\n  .m-112 {\n    margin: calc(var(--spacing) * 112);\n  }\n  .m-113 {\n    margin: calc(var(--spacing) * 113);\n  }\n  .m-114 {\n    margin: calc(var(--spacing) * 114);\n  }\n  .m-115 {\n    margin: calc(var(--spacing) * 115);\n  }\n  .m-116 {\n    margin: calc(var(--spacing) * 116);\n  }\n  .m-117 {\n    margin: calc(var(--spacing) * 117);\n  }\n  .m-118 {\n    margin: calc(var(--spacing) * 118);\n  }\n  .m-119 {\n    margin: calc(var(--spacing) * 119);\n  }\n  .m-120 {\n    margin: calc(var(--spacing) * 120);\n  }\n  .m-121 {\n    margin: calc(var(--spacing) * 121);\n  }\n  .m-122 {\n    margin: calc(var(--spacing) * 122);\n  }\n  .m-123 {\n    margin: calc(var(--spacing) * 123);\n  }\n  .m-124 {\n    margin: calc(var(--spacing) * 124);\n  }\n  .m-125 {\n    margin: calc(var(--spacing) * 125);\n  }\n  .m-127 {\n    margin: calc(var(--spacing) * 127);\n  }\n  .m-129 {\n    margin: calc(var(--spacing) * 129);\n  }\n  .m-130 {\n    margin: calc(var(--spacing) * 130);\n  }\n  .m-132 {\n    margin: calc(var(--spacing) * 132);\n  }\n  .m-133 {\n    margin: calc(var(--spacing) * 133);\n  }\n  .m-134 {\n    margin: calc(var(--spacing) * 134);\n  }\n  .m-135 {\n    margin: calc(var(--spacing) * 135);\n  }\n  .m-137 {\n    margin: calc(var(--spacing) * 137);\n  }\n  .m-139 {\n    margin: calc(var(--spacing) * 139);\n  }\n  .m-140 {\n    margin: calc(var(--spacing) * 140);\n  }\n  .m-141 {\n    margin: calc(var(--spacing) * 141);\n  }\n  .m-142 {\n    margin: calc(var(--spacing) * 142);\n  }\n  .m-143 {\n    margin: calc(var(--spacing) * 143);\n  }\n  .m-145 {\n    margin: calc(var(--spacing) * 145);\n  }\n  .m-146 {\n    margin: calc(var(--spacing) * 146);\n  }\n  .m-147 {\n    margin: calc(var(--spacing) * 147);\n  }\n  .m-150 {\n    margin: calc(var(--spacing) * 150);\n  }\n  .m-151 {\n    margin: calc(var(--spacing) * 151);\n  }\n  .m-152 {\n    margin: calc(var(--spacing) * 152);\n  }\n  .m-153 {\n    margin: calc(var(--spacing) * 153);\n  }\n  .m-154 {\n    margin: calc(var(--spacing) * 154);\n  }\n  .m-155 {\n    margin: calc(var(--spacing) * 155);\n  }\n  .m-156 {\n    margin: calc(var(--spacing) * 156);\n  }\n  .m-157 {\n    margin: calc(var(--spacing) * 157);\n  }\n  .m-158 {\n    margin: calc(var(--spacing) * 158);\n  }\n  .m-160 {\n    margin: calc(var(--spacing) * 160);\n  }\n  .m-161 {\n    margin: calc(var(--spacing) * 161);\n  }\n  .m-162 {\n    margin: calc(var(--spacing) * 162);\n  }\n  .m-163 {\n    margin: calc(var(--spacing) * 163);\n  }\n  .m-165 {\n    margin: calc(var(--spacing) * 165);\n  }\n  .m-166 {\n    margin: calc(var(--spacing) * 166);\n  }\n  .m-167 {\n    margin: calc(var(--spacing) * 167);\n  }\n  .m-168 {\n    margin: calc(var(--spacing) * 168);\n  }\n  .m-169 {\n    margin: calc(var(--spacing) * 169);\n  }\n  .m-170 {\n    margin: calc(var(--spacing) * 170);\n  }\n  .m-173 {\n    margin: calc(var(--spacing) * 173);\n  }\n  .m-174 {\n    margin: calc(var(--spacing) * 174);\n  }\n  .m-175 {\n    margin: calc(var(--spacing) * 175);\n  }\n  .m-177 {\n    margin: calc(var(--spacing) * 177);\n  }\n  .m-178 {\n    margin: calc(var(--spacing) * 178);\n  }\n  .m-179 {\n    margin: calc(var(--spacing) * 179);\n  }\n  .m-180 {\n    margin: calc(var(--spacing) * 180);\n  }\n  .m-181 {\n    margin: calc(var(--spacing) * 181);\n  }\n  .m-182 {\n    margin: calc(var(--spacing) * 182);\n  }\n  .m-183 {\n    margin: calc(var(--spacing) * 183);\n  }\n  .m-185 {\n    margin: calc(var(--spacing) * 185);\n  }\n  .m-186 {\n    margin: calc(var(--spacing) * 186);\n  }\n  .m-187 {\n    margin: calc(var(--spacing) * 187);\n  }\n  .m-189 {\n    margin: calc(var(--spacing) * 189);\n  }\n  .m-190 {\n    margin: calc(var(--spacing) * 190);\n  }\n  .m-192 {\n    margin: calc(var(--spacing) * 192);\n  }\n  .m-196 {\n    margin: calc(var(--spacing) * 196);\n  }\n  .m-197 {\n    margin: calc(var(--spacing) * 197);\n  }\n  .m-198 {\n    margin: calc(var(--spacing) * 198);\n  }\n  .m-200 {\n    margin: calc(var(--spacing) * 200);\n  }\n  .m-202 {\n    margin: calc(var(--spacing) * 202);\n  }\n  .m-204 {\n    margin: calc(var(--spacing) * 204);\n  }\n  .m-205 {\n    margin: calc(var(--spacing) * 205);\n  }\n  .m-207 {\n    margin: calc(var(--spacing) * 207);\n  }\n  .m-208 {\n    margin: calc(var(--spacing) * 208);\n  }\n  .m-209 {\n    margin: calc(var(--spacing) * 209);\n  }\n  .m-210 {\n    margin: calc(var(--spacing) * 210);\n  }\n  .m-212 {\n    margin: calc(var(--spacing) * 212);\n  }\n  .m-213 {\n    margin: calc(var(--spacing) * 213);\n  }\n  .m-214 {\n    margin: calc(var(--spacing) * 214);\n  }\n  .m-215 {\n    margin: calc(var(--spacing) * 215);\n  }\n  .m-216 {\n    margin: calc(var(--spacing) * 216);\n  }\n  .m-217 {\n    margin: calc(var(--spacing) * 217);\n  }\n  .m-218 {\n    margin: calc(var(--spacing) * 218);\n  }\n  .m-219 {\n    margin: calc(var(--spacing) * 219);\n  }\n  .m-220 {\n    margin: calc(var(--spacing) * 220);\n  }\n  .m-222 {\n    margin: calc(var(--spacing) * 222);\n  }\n  .m-223 {\n    margin: calc(var(--spacing) * 223);\n  }\n  .m-224 {\n    margin: calc(var(--spacing) * 224);\n  }\n  .m-225 {\n    margin: calc(var(--spacing) * 225);\n  }\n  .m-227 {\n    margin: calc(var(--spacing) * 227);\n  }\n  .m-228 {\n    margin: calc(var(--spacing) * 228);\n  }\n  .m-229 {\n    margin: calc(var(--spacing) * 229);\n  }\n  .m-231 {\n    margin: calc(var(--spacing) * 231);\n  }\n  .m-232 {\n    margin: calc(var(--spacing) * 232);\n  }\n  .m-234 {\n    margin: calc(var(--spacing) * 234);\n  }\n  .m-235 {\n    margin: calc(var(--spacing) * 235);\n  }\n  .m-237 {\n    margin: calc(var(--spacing) * 237);\n  }\n  .m-238 {\n    margin: calc(var(--spacing) * 238);\n  }\n  .m-239 {\n    margin: calc(var(--spacing) * 239);\n  }\n  .m-240 {\n    margin: calc(var(--spacing) * 240);\n  }\n  .m-242 {\n    margin: calc(var(--spacing) * 242);\n  }\n  .m-243 {\n    margin: calc(var(--spacing) * 243);\n  }\n  .m-244 {\n    margin: calc(var(--spacing) * 244);\n  }\n  .m-245 {\n    margin: calc(var(--spacing) * 245);\n  }\n  .m-246 {\n    margin: calc(var(--spacing) * 246);\n  }\n  .m-247 {\n    margin: calc(var(--spacing) * 247);\n  }\n  .m-248 {\n    margin: calc(var(--spacing) * 248);\n  }\n  .m-249 {\n    margin: calc(var(--spacing) * 249);\n  }\n  .m-250 {\n    margin: calc(var(--spacing) * 250);\n  }\n  .m-252 {\n    margin: calc(var(--spacing) * 252);\n  }\n  .m-254 {\n    margin: calc(var(--spacing) * 254);\n  }\n  .m-255 {\n    margin: calc(var(--spacing) * 255);\n  }\n  .m-257 {\n    margin: calc(var(--spacing) * 257);\n  }\n  .m-258 {\n    margin: calc(var(--spacing) * 258);\n  }\n  .m-259 {\n    margin: calc(var(--spacing) * 259);\n  }\n  .m-260 {\n    margin: calc(var(--spacing) * 260);\n  }\n  .m-262 {\n    margin: calc(var(--spacing) * 262);\n  }\n  .m-264 {\n    margin: calc(var(--spacing) * 264);\n  }\n  .m-265 {\n    margin: calc(var(--spacing) * 265);\n  }\n  .m-266 {\n    margin: calc(var(--spacing) * 266);\n  }\n  .m-267 {\n    margin: calc(var(--spacing) * 267);\n  }\n  .m-268 {\n    margin: calc(var(--spacing) * 268);\n  }\n  .m-270 {\n    margin: calc(var(--spacing) * 270);\n  }\n  .m-272 {\n    margin: calc(var(--spacing) * 272);\n  }\n  .m-273 {\n    margin: calc(var(--spacing) * 273);\n  }\n  .m-274 {\n    margin: calc(var(--spacing) * 274);\n  }\n  .m-275 {\n    margin: calc(var(--spacing) * 275);\n  }\n  .m-276 {\n    margin: calc(var(--spacing) * 276);\n  }\n  .m-277 {\n    margin: calc(var(--spacing) * 277);\n  }\n  .m-278 {\n    margin: calc(var(--spacing) * 278);\n  }\n  .m-279 {\n    margin: calc(var(--spacing) * 279);\n  }\n  .m-281 {\n    margin: calc(var(--spacing) * 281);\n  }\n  .m-282 {\n    margin: calc(var(--spacing) * 282);\n  }\n  .m-283 {\n    margin: calc(var(--spacing) * 283);\n  }\n  .m-284 {\n    margin: calc(var(--spacing) * 284);\n  }\n  .m-285 {\n    margin: calc(var(--spacing) * 285);\n  }\n  .m-286 {\n    margin: calc(var(--spacing) * 286);\n  }\n  .m-287 {\n    margin: calc(var(--spacing) * 287);\n  }\n  .m-289 {\n    margin: calc(var(--spacing) * 289);\n  }\n  .m-290 {\n    margin: calc(var(--spacing) * 290);\n  }\n  .m-291 {\n    margin: calc(var(--spacing) * 291);\n  }\n  .m-294 {\n    margin: calc(var(--spacing) * 294);\n  }\n  .m-297 {\n    margin: calc(var(--spacing) * 297);\n  }\n  .m-298 {\n    margin: calc(var(--spacing) * 298);\n  }\n  .m-299 {\n    margin: calc(var(--spacing) * 299);\n  }\n  .m-300 {\n    margin: calc(var(--spacing) * 300);\n  }\n  .m-301 {\n    margin: calc(var(--spacing) * 301);\n  }\n  .m-304 {\n    margin: calc(var(--spacing) * 304);\n  }\n  .m-305 {\n    margin: calc(var(--spacing) * 305);\n  }\n  .m-306 {\n    margin: calc(var(--spacing) * 306);\n  }\n  .m-307 {\n    margin: calc(var(--spacing) * 307);\n  }\n  .m-308 {\n    margin: calc(var(--spacing) * 308);\n  }\n  .m-309 {\n    margin: calc(var(--spacing) * 309);\n  }\n  .m-310 {\n    margin: calc(var(--spacing) * 310);\n  }\n  .m-311 {\n    margin: calc(var(--spacing) * 311);\n  }\n  .m-312 {\n    margin: calc(var(--spacing) * 312);\n  }\n  .m-313 {\n    margin: calc(var(--spacing) * 313);\n  }\n  .m-315 {\n    margin: calc(var(--spacing) * 315);\n  }\n  .m-316 {\n    margin: calc(var(--spacing) * 316);\n  }\n  .m-317 {\n    margin: calc(var(--spacing) * 317);\n  }\n  .m-318 {\n    margin: calc(var(--spacing) * 318);\n  }\n  .m-319 {\n    margin: calc(var(--spacing) * 319);\n  }\n  .m-320 {\n    margin: calc(var(--spacing) * 320);\n  }\n  .m-321 {\n    margin: calc(var(--spacing) * 321);\n  }\n  .m-323 {\n    margin: calc(var(--spacing) * 323);\n  }\n  .m-324 {\n    margin: calc(var(--spacing) * 324);\n  }\n  .m-326 {\n    margin: calc(var(--spacing) * 326);\n  }\n  .m-327 {\n    margin: calc(var(--spacing) * 327);\n  }\n  .m-328 {\n    margin: calc(var(--spacing) * 328);\n  }\n  .m-329 {\n    margin: calc(var(--spacing) * 329);\n  }\n  .m-330 {\n    margin: calc(var(--spacing) * 330);\n  }\n  .m-332 {\n    margin: calc(var(--spacing) * 332);\n  }\n  .m-333 {\n    margin: calc(var(--spacing) * 333);\n  }\n  .m-336 {\n    margin: calc(var(--spacing) * 336);\n  }\n  .m-337 {\n    margin: calc(var(--spacing) * 337);\n  }\n  .m-338 {\n    margin: calc(var(--spacing) * 338);\n  }\n  .m-340 {\n    margin: calc(var(--spacing) * 340);\n  }\n  .m-341 {\n    margin: calc(var(--spacing) * 341);\n  }\n  .m-344 {\n    margin: calc(var(--spacing) * 344);\n  }\n  .m-346 {\n    margin: calc(var(--spacing) * 346);\n  }\n  .m-348 {\n    margin: calc(var(--spacing) * 348);\n  }\n  .m-349 {\n    margin: calc(var(--spacing) * 349);\n  }\n  .m-350 {\n    margin: calc(var(--spacing) * 350);\n  }\n  .m-352 {\n    margin: calc(var(--spacing) * 352);\n  }\n  .m-353 {\n    margin: calc(var(--spacing) * 353);\n  }\n  .m-354 {\n    margin: calc(var(--spacing) * 354);\n  }\n  .m-355 {\n    margin: calc(var(--spacing) * 355);\n  }\n  .m-357 {\n    margin: calc(var(--spacing) * 357);\n  }\n  .m-358 {\n    margin: calc(var(--spacing) * 358);\n  }\n  .m-360 {\n    margin: calc(var(--spacing) * 360);\n  }\n  .m-362 {\n    margin: calc(var(--spacing) * 362);\n  }\n  .m-363 {\n    margin: calc(var(--spacing) * 363);\n  }\n  .m-364 {\n    margin: calc(var(--spacing) * 364);\n  }\n  .m-366 {\n    margin: calc(var(--spacing) * 366);\n  }\n  .m-368 {\n    margin: calc(var(--spacing) * 368);\n  }\n  .m-370 {\n    margin: calc(var(--spacing) * 370);\n  }\n  .m-372 {\n    margin: calc(var(--spacing) * 372);\n  }\n  .m-374 {\n    margin: calc(var(--spacing) * 374);\n  }\n  .m-375 {\n    margin: calc(var(--spacing) * 375);\n  }\n  .m-378 {\n    margin: calc(var(--spacing) * 378);\n  }\n  .m-379 {\n    margin: calc(var(--spacing) * 379);\n  }\n  .m-380 {\n    margin: calc(var(--spacing) * 380);\n  }\n  .m-382 {\n    margin: calc(var(--spacing) * 382);\n  }\n  .m-384 {\n    margin: calc(var(--spacing) * 384);\n  }\n  .m-385 {\n    margin: calc(var(--spacing) * 385);\n  }\n  .m-386 {\n    margin: calc(var(--spacing) * 386);\n  }\n  .m-387 {\n    margin: calc(var(--spacing) * 387);\n  }\n  .m-388 {\n    margin: calc(var(--spacing) * 388);\n  }\n  .m-389 {\n    margin: calc(var(--spacing) * 389);\n  }\n  .m-391 {\n    margin: calc(var(--spacing) * 391);\n  }\n  .m-395 {\n    margin: calc(var(--spacing) * 395);\n  }\n  .m-396 {\n    margin: calc(var(--spacing) * 396);\n  }\n  .m-397 {\n    margin: calc(var(--spacing) * 397);\n  }\n  .m-399 {\n    margin: calc(var(--spacing) * 399);\n  }\n  .m-400 {\n    margin: calc(var(--spacing) * 400);\n  }\n  .m-401 {\n    margin: calc(var(--spacing) * 401);\n  }\n  .m-403 {\n    margin: calc(var(--spacing) * 403);\n  }\n  .m-404 {\n    margin: calc(var(--spacing) * 404);\n  }\n  .m-405 {\n    margin: calc(var(--spacing) * 405);\n  }\n  .m-406 {\n    margin: calc(var(--spacing) * 406);\n  }\n  .m-409 {\n    margin: calc(var(--spacing) * 409);\n  }\n  .m-410 {\n    margin: calc(var(--spacing) * 410);\n  }\n  .m-412 {\n    margin: calc(var(--spacing) * 412);\n  }\n  .m-413 {\n    margin: calc(var(--spacing) * 413);\n  }\n  .m-414 {\n    margin: calc(var(--spacing) * 414);\n  }\n  .m-415 {\n    margin: calc(var(--spacing) * 415);\n  }\n  .m-416 {\n    margin: calc(var(--spacing) * 416);\n  }\n  .m-418 {\n    margin: calc(var(--spacing) * 418);\n  }\n  .m-419 {\n    margin: calc(var(--spacing) * 419);\n  }\n  .m-420 {\n    margin: calc(var(--spacing) * 420);\n  }\n  .m-421 {\n    margin: calc(var(--spacing) * 421);\n  }\n  .m-424 {\n    margin: calc(var(--spacing) * 424);\n  }\n  .m-425 {\n    margin: calc(var(--spacing) * 425);\n  }\n  .m-426 {\n    margin: calc(var(--spacing) * 426);\n  }\n  .m-427 {\n    margin: calc(var(--spacing) * 427);\n  }\n  .m-428 {\n    margin: calc(var(--spacing) * 428);\n  }\n  .m-429 {\n    margin: calc(var(--spacing) * 429);\n  }\n  .m-430 {\n    margin: calc(var(--spacing) * 430);\n  }\n  .m-434 {\n    margin: calc(var(--spacing) * 434);\n  }\n  .m-435 {\n    margin: calc(var(--spacing) * 435);\n  }\n  .m-436 {\n    margin: calc(var(--spacing) * 436);\n  }\n  .m-437 {\n    margin: calc(var(--spacing) * 437);\n  }\n  .m-438 {\n    margin: calc(var(--spacing) * 438);\n  }\n  .m-440 {\n    margin: calc(var(--spacing) * 440);\n  }\n  .m-441 {\n    margin: calc(var(--spacing) * 441);\n  }\n  .m-443 {\n    margin: calc(var(--spacing) * 443);\n  }\n  .m-444 {\n    margin: calc(var(--spacing) * 444);\n  }\n  .m-445 {\n    margin: calc(var(--spacing) * 445);\n  }\n  .m-446 {\n    margin: calc(var(--spacing) * 446);\n  }\n  .m-447 {\n    margin: calc(var(--spacing) * 447);\n  }\n  .m-448 {\n    margin: calc(var(--spacing) * 448);\n  }\n  .m-451 {\n    margin: calc(var(--spacing) * 451);\n  }\n  .m-453 {\n    margin: calc(var(--spacing) * 453);\n  }\n  .m-454 {\n    margin: calc(var(--spacing) * 454);\n  }\n  .m-455 {\n    margin: calc(var(--spacing) * 455);\n  }\n  .m-456 {\n    margin: calc(var(--spacing) * 456);\n  }\n  .m-459 {\n    margin: calc(var(--spacing) * 459);\n  }\n  .m-460 {\n    margin: calc(var(--spacing) * 460);\n  }\n  .m-461 {\n    margin: calc(var(--spacing) * 461);\n  }\n  .m-463 {\n    margin: calc(var(--spacing) * 463);\n  }\n  .m-464 {\n    margin: calc(var(--spacing) * 464);\n  }\n  .m-465 {\n    margin: calc(var(--spacing) * 465);\n  }\n  .m-466 {\n    margin: calc(var(--spacing) * 466);\n  }\n  .m-467 {\n    margin: calc(var(--spacing) * 467);\n  }\n  .m-468 {\n    margin: calc(var(--spacing) * 468);\n  }\n  .m-471 {\n    margin: calc(var(--spacing) * 471);\n  }\n  .m-472 {\n    margin: calc(var(--spacing) * 472);\n  }\n  .m-473 {\n    margin: calc(var(--spacing) * 473);\n  }\n  .m-474 {\n    margin: calc(var(--spacing) * 474);\n  }\n  .m-475 {\n    margin: calc(var(--spacing) * 475);\n  }\n  .m-477 {\n    margin: calc(var(--spacing) * 477);\n  }\n  .m-478 {\n    margin: calc(var(--spacing) * 478);\n  }\n  .m-479 {\n    margin: calc(var(--spacing) * 479);\n  }\n  .m-480 {\n    margin: calc(var(--spacing) * 480);\n  }\n  .m-481 {\n    margin: calc(var(--spacing) * 481);\n  }\n  .m-482 {\n    margin: calc(var(--spacing) * 482);\n  }\n  .m-483 {\n    margin: calc(var(--spacing) * 483);\n  }\n  .m-484 {\n    margin: calc(var(--spacing) * 484);\n  }\n  .m-485 {\n    margin: calc(var(--spacing) * 485);\n  }\n  .m-486 {\n    margin: calc(var(--spacing) * 486);\n  }\n  .m-487 {\n    margin: calc(var(--spacing) * 487);\n  }\n  .m-488 {\n    margin: calc(var(--spacing) * 488);\n  }\n  .m-489 {\n    margin: calc(var(--spacing) * 489);\n  }\n  .m-490 {\n    margin: calc(var(--spacing) * 490);\n  }\n  .m-491 {\n    margin: calc(var(--spacing) * 491);\n  }\n  .m-492 {\n    margin: calc(var(--spacing) * 492);\n  }\n  .m-493 {\n    margin: calc(var(--spacing) * 493);\n  }\n  .m-494 {\n    margin: calc(var(--spacing) * 494);\n  }\n  .m-495 {\n    margin: calc(var(--spacing) * 495);\n  }\n  .m-496 {\n    margin: calc(var(--spacing) * 496);\n  }\n  .m-497 {\n    margin: calc(var(--spacing) * 497);\n  }\n  .m-498 {\n    margin: calc(var(--spacing) * 498);\n  }\n  .m-499 {\n    margin: calc(var(--spacing) * 499);\n  }\n  .m-500 {\n    margin: calc(var(--spacing) * 500);\n  }\n  .m-501 {\n    margin: calc(var(--spacing) * 501);\n  }\n  .m-503 {\n    margin: calc(var(--spacing) * 503);\n  }\n  .m-504 {\n    margin: calc(var(--spacing) * 504);\n  }\n  .m-505 {\n    margin: calc(var(--spacing) * 505);\n  }\n  .m-506 {\n    margin: calc(var(--spacing) * 506);\n  }\n  .m-507 {\n    margin: calc(var(--spacing) * 507);\n  }\n  .m-509 {\n    margin: calc(var(--spacing) * 509);\n  }\n  .m-510 {\n    margin: calc(var(--spacing) * 510);\n  }\n  .m-511 {\n    margin: calc(var(--spacing) * 511);\n  }\n  .m-512 {\n    margin: calc(var(--spacing) * 512);\n  }\n  .m-513 {\n    margin: calc(var(--spacing) * 513);\n  }\n  .m-515 {\n    margin: calc(var(--spacing) * 515);\n  }\n  .m-516 {\n    margin: calc(var(--spacing) * 516);\n  }\n  .m-517 {\n    margin: calc(var(--spacing) * 517);\n  }\n  .m-518 {\n    margin: calc(var(--spacing) * 518);\n  }\n  .m-519 {\n    margin: calc(var(--spacing) * 519);\n  }\n  .m-521 {\n    margin: calc(var(--spacing) * 521);\n  }\n  .m-523 {\n    margin: calc(var(--spacing) * 523);\n  }\n  .m-524 {\n    margin: calc(var(--spacing) * 524);\n  }\n  .m-525 {\n    margin: calc(var(--spacing) * 525);\n  }\n  .m-526 {\n    margin: calc(var(--spacing) * 526);\n  }\n  .m-527 {\n    margin: calc(var(--spacing) * 527);\n  }\n  .m-529 {\n    margin: calc(var(--spacing) * 529);\n  }\n  .m-530 {\n    margin: calc(var(--spacing) * 530);\n  }\n  .m-531 {\n    margin: calc(var(--spacing) * 531);\n  }\n  .m-532 {\n    margin: calc(var(--spacing) * 532);\n  }\n  .m-533 {\n    margin: calc(var(--spacing) * 533);\n  }\n  .m-534 {\n    margin: calc(var(--spacing) * 534);\n  }\n  .m-535 {\n    margin: calc(var(--spacing) * 535);\n  }\n  .m-539 {\n    margin: calc(var(--spacing) * 539);\n  }\n  .m-540 {\n    margin: calc(var(--spacing) * 540);\n  }\n  .m-541 {\n    margin: calc(var(--spacing) * 541);\n  }\n  .m-542 {\n    margin: calc(var(--spacing) * 542);\n  }\n  .m-544 {\n    margin: calc(var(--spacing) * 544);\n  }\n  .m-545 {\n    margin: calc(var(--spacing) * 545);\n  }\n  .m-548 {\n    margin: calc(var(--spacing) * 548);\n  }\n  .m-550 {\n    margin: calc(var(--spacing) * 550);\n  }\n  .m-552 {\n    margin: calc(var(--spacing) * 552);\n  }\n  .m-553 {\n    margin: calc(var(--spacing) * 553);\n  }\n  .m-554 {\n    margin: calc(var(--spacing) * 554);\n  }\n  .m-555 {\n    margin: calc(var(--spacing) * 555);\n  }\n  .m-556 {\n    margin: calc(var(--spacing) * 556);\n  }\n  .m-557 {\n    margin: calc(var(--spacing) * 557);\n  }\n  .m-558 {\n    margin: calc(var(--spacing) * 558);\n  }\n  .m-559 {\n    margin: calc(var(--spacing) * 559);\n  }\n  .m-560 {\n    margin: calc(var(--spacing) * 560);\n  }\n  .m-561 {\n    margin: calc(var(--spacing) * 561);\n  }\n  .m-563 {\n    margin: calc(var(--spacing) * 563);\n  }\n  .m-564 {\n    margin: calc(var(--spacing) * 564);\n  }\n  .m-565 {\n    margin: calc(var(--spacing) * 565);\n  }\n  .m-567 {\n    margin: calc(var(--spacing) * 567);\n  }\n  .m-568 {\n    margin: calc(var(--spacing) * 568);\n  }\n  .m-569 {\n    margin: calc(var(--spacing) * 569);\n  }\n  .m-570 {\n    margin: calc(var(--spacing) * 570);\n  }\n  .m-571 {\n    margin: calc(var(--spacing) * 571);\n  }\n  .m-574 {\n    margin: calc(var(--spacing) * 574);\n  }\n  .m-575 {\n    margin: calc(var(--spacing) * 575);\n  }\n  .m-576 {\n    margin: calc(var(--spacing) * 576);\n  }\n  .m-578 {\n    margin: calc(var(--spacing) * 578);\n  }\n  .m-580 {\n    margin: calc(var(--spacing) * 580);\n  }\n  .m-582 {\n    margin: calc(var(--spacing) * 582);\n  }\n  .m-584 {\n    margin: calc(var(--spacing) * 584);\n  }\n  .m-585 {\n    margin: calc(var(--spacing) * 585);\n  }\n  .m-586 {\n    margin: calc(var(--spacing) * 586);\n  }\n  .m-587 {\n    margin: calc(var(--spacing) * 587);\n  }\n  .m-588 {\n    margin: calc(var(--spacing) * 588);\n  }\n  .m-589 {\n    margin: calc(var(--spacing) * 589);\n  }\n  .m-590 {\n    margin: calc(var(--spacing) * 590);\n  }\n  .m-592 {\n    margin: calc(var(--spacing) * 592);\n  }\n  .m-593 {\n    margin: calc(var(--spacing) * 593);\n  }\n  .m-596 {\n    margin: calc(var(--spacing) * 596);\n  }\n  .m-597 {\n    margin: calc(var(--spacing) * 597);\n  }\n  .m-599 {\n    margin: calc(var(--spacing) * 599);\n  }\n  .m-600 {\n    margin: calc(var(--spacing) * 600);\n  }\n  .m-602 {\n    margin: calc(var(--spacing) * 602);\n  }\n  .m-603 {\n    margin: calc(var(--spacing) * 603);\n  }\n  .m-605 {\n    margin: calc(var(--spacing) * 605);\n  }\n  .m-606 {\n    margin: calc(var(--spacing) * 606);\n  }\n  .m-607 {\n    margin: calc(var(--spacing) * 607);\n  }\n  .m-608 {\n    margin: calc(var(--spacing) * 608);\n  }\n  .m-609 {\n    margin: calc(var(--spacing) * 609);\n  }\n  .m-610 {\n    margin: calc(var(--spacing) * 610);\n  }\n  .m-611 {\n    margin: calc(var(--spacing) * 611);\n  }\n  .m-612 {\n    margin: calc(var(--spacing) * 612);\n  }\n  .m-617 {\n    margin: calc(var(--spacing) * 617);\n  }\n  .m-618 {\n    margin: calc(var(--spacing) * 618);\n  }\n  .m-619 {\n    margin: calc(var(--spacing) * 619);\n  }\n  .m-620 {\n    margin: calc(var(--spacing) * 620);\n  }\n  .m-622 {\n    margin: calc(var(--spacing) * 622);\n  }\n  .m-623 {\n    margin: calc(var(--spacing) * 623);\n  }\n  .m-625 {\n    margin: calc(var(--spacing) * 625);\n  }\n  .m-627 {\n    margin: calc(var(--spacing) * 627);\n  }\n  .m-630 {\n    margin: calc(var(--spacing) * 630);\n  }\n  .m-631 {\n    margin: calc(var(--spacing) * 631);\n  }\n  .m-634 {\n    margin: calc(var(--spacing) * 634);\n  }\n  .m-635 {\n    margin: calc(var(--spacing) * 635);\n  }\n  .m-640 {\n    margin: calc(var(--spacing) * 640);\n  }\n  .m-642 {\n    margin: calc(var(--spacing) * 642);\n  }\n  .m-643 {\n    margin: calc(var(--spacing) * 643);\n  }\n  .m-644 {\n    margin: calc(var(--spacing) * 644);\n  }\n  .m-645 {\n    margin: calc(var(--spacing) * 645);\n  }\n  .m-646 {\n    margin: calc(var(--spacing) * 646);\n  }\n  .m-647 {\n    margin: calc(var(--spacing) * 647);\n  }\n  .m-648 {\n    margin: calc(var(--spacing) * 648);\n  }\n  .m-649 {\n    margin: calc(var(--spacing) * 649);\n  }\n  .m-653 {\n    margin: calc(var(--spacing) * 653);\n  }\n  .m-657 {\n    margin: calc(var(--spacing) * 657);\n  }\n  .m-658 {\n    margin: calc(var(--spacing) * 658);\n  }\n  .m-659 {\n    margin: calc(var(--spacing) * 659);\n  }\n  .m-660 {\n    margin: calc(var(--spacing) * 660);\n  }\n  .m-661 {\n    margin: calc(var(--spacing) * 661);\n  }\n  .m-664 {\n    margin: calc(var(--spacing) * 664);\n  }\n  .m-665 {\n    margin: calc(var(--spacing) * 665);\n  }\n  .m-666 {\n    margin: calc(var(--spacing) * 666);\n  }\n  .m-667 {\n    margin: calc(var(--spacing) * 667);\n  }\n  .m-668 {\n    margin: calc(var(--spacing) * 668);\n  }\n  .m-669 {\n    margin: calc(var(--spacing) * 669);\n  }\n  .m-671 {\n    margin: calc(var(--spacing) * 671);\n  }\n  .m-672 {\n    margin: calc(var(--spacing) * 672);\n  }\n  .m-674 {\n    margin: calc(var(--spacing) * 674);\n  }\n  .m-676 {\n    margin: calc(var(--spacing) * 676);\n  }\n  .m-678 {\n    margin: calc(var(--spacing) * 678);\n  }\n  .m-679 {\n    margin: calc(var(--spacing) * 679);\n  }\n  .m-680 {\n    margin: calc(var(--spacing) * 680);\n  }\n  .m-681 {\n    margin: calc(var(--spacing) * 681);\n  }\n  .m-682 {\n    margin: calc(var(--spacing) * 682);\n  }\n  .m-683 {\n    margin: calc(var(--spacing) * 683);\n  }\n  .m-685 {\n    margin: calc(var(--spacing) * 685);\n  }\n  .m-688 {\n    margin: calc(var(--spacing) * 688);\n  }\n  .m-689 {\n    margin: calc(var(--spacing) * 689);\n  }\n  .m-690 {\n    margin: calc(var(--spacing) * 690);\n  }\n  .m-691 {\n    margin: calc(var(--spacing) * 691);\n  }\n  .m-692 {\n    margin: calc(var(--spacing) * 692);\n  }\n  .m-693 {\n    margin: calc(var(--spacing) * 693);\n  }\n  .m-696 {\n    margin: calc(var(--spacing) * 696);\n  }\n  .m-698 {\n    margin: calc(var(--spacing) * 698);\n  }\n  .m-700 {\n    margin: calc(var(--spacing) * 700);\n  }\n  .m-701 {\n    margin: calc(var(--spacing) * 701);\n  }\n  .m-702 {\n    margin: calc(var(--spacing) * 702);\n  }\n  .m-704 {\n    margin: calc(var(--spacing) * 704);\n  }\n  .m-705 {\n    margin: calc(var(--spacing) * 705);\n  }\n  .m-710 {\n    margin: calc(var(--spacing) * 710);\n  }\n  .m-711 {\n    margin: calc(var(--spacing) * 711);\n  }\n  .m-712 {\n    margin: calc(var(--spacing) * 712);\n  }\n  .m-713 {\n    margin: calc(var(--spacing) * 713);\n  }\n  .m-715 {\n    margin: calc(var(--spacing) * 715);\n  }\n  .m-717 {\n    margin: calc(var(--spacing) * 717);\n  }\n  .m-718 {\n    margin: calc(var(--spacing) * 718);\n  }\n  .m-721 {\n    margin: calc(var(--spacing) * 721);\n  }\n  .m-722 {\n    margin: calc(var(--spacing) * 722);\n  }\n  .m-723 {\n    margin: calc(var(--spacing) * 723);\n  }\n  .m-725 {\n    margin: calc(var(--spacing) * 725);\n  }\n  .m-726 {\n    margin: calc(var(--spacing) * 726);\n  }\n  .m-728 {\n    margin: calc(var(--spacing) * 728);\n  }\n  .m-730 {\n    margin: calc(var(--spacing) * 730);\n  }\n  .m-732 {\n    margin: calc(var(--spacing) * 732);\n  }\n  .m-733 {\n    margin: calc(var(--spacing) * 733);\n  }\n  .m-734 {\n    margin: calc(var(--spacing) * 734);\n  }\n  .m-735 {\n    margin: calc(var(--spacing) * 735);\n  }\n  .m-736 {\n    margin: calc(var(--spacing) * 736);\n  }\n  .m-737 {\n    margin: calc(var(--spacing) * 737);\n  }\n  .m-739 {\n    margin: calc(var(--spacing) * 739);\n  }\n  .m-740 {\n    margin: calc(var(--spacing) * 740);\n  }\n  .m-742 {\n    margin: calc(var(--spacing) * 742);\n  }\n  .m-744 {\n    margin: calc(var(--spacing) * 744);\n  }\n  .m-745 {\n    margin: calc(var(--spacing) * 745);\n  }\n  .m-747 {\n    margin: calc(var(--spacing) * 747);\n  }\n  .m-749 {\n    margin: calc(var(--spacing) * 749);\n  }\n  .m-752 {\n    margin: calc(var(--spacing) * 752);\n  }\n  .m-753 {\n    margin: calc(var(--spacing) * 753);\n  }\n  .m-760 {\n    margin: calc(var(--spacing) * 760);\n  }\n  .m-761 {\n    margin: calc(var(--spacing) * 761);\n  }\n  .m-762 {\n    margin: calc(var(--spacing) * 762);\n  }\n  .m-763 {\n    margin: calc(var(--spacing) * 763);\n  }\n  .m-765 {\n    margin: calc(var(--spacing) * 765);\n  }\n  .m-766 {\n    margin: calc(var(--spacing) * 766);\n  }\n  .m-767 {\n    margin: calc(var(--spacing) * 767);\n  }\n  .m-770 {\n    margin: calc(var(--spacing) * 770);\n  }\n  .m-772 {\n    margin: calc(var(--spacing) * 772);\n  }\n  .m-773 {\n    margin: calc(var(--spacing) * 773);\n  }\n  .m-774 {\n    margin: calc(var(--spacing) * 774);\n  }\n  .m-776 {\n    margin: calc(var(--spacing) * 776);\n  }\n  .m-777 {\n    margin: calc(var(--spacing) * 777);\n  }\n  .m-782 {\n    margin: calc(var(--spacing) * 782);\n  }\n  .m-784 {\n    margin: calc(var(--spacing) * 784);\n  }\n  .m-785 {\n    margin: calc(var(--spacing) * 785);\n  }\n  .m-787 {\n    margin: calc(var(--spacing) * 787);\n  }\n  .m-789 {\n    margin: calc(var(--spacing) * 789);\n  }\n  .m-791 {\n    margin: calc(var(--spacing) * 791);\n  }\n  .m-792 {\n    margin: calc(var(--spacing) * 792);\n  }\n  .m-793 {\n    margin: calc(var(--spacing) * 793);\n  }\n  .m-794 {\n    margin: calc(var(--spacing) * 794);\n  }\n  .m-795 {\n    margin: calc(var(--spacing) * 795);\n  }\n  .m-797 {\n    margin: calc(var(--spacing) * 797);\n  }\n  .m-798 {\n    margin: calc(var(--spacing) * 798);\n  }\n  .m-800 {\n    margin: calc(var(--spacing) * 800);\n  }\n  .m-801 {\n    margin: calc(var(--spacing) * 801);\n  }\n  .m-802 {\n    margin: calc(var(--spacing) * 802);\n  }\n  .m-803 {\n    margin: calc(var(--spacing) * 803);\n  }\n  .m-805 {\n    margin: calc(var(--spacing) * 805);\n  }\n  .m-806 {\n    margin: calc(var(--spacing) * 806);\n  }\n  .m-807 {\n    margin: calc(var(--spacing) * 807);\n  }\n  .m-810 {\n    margin: calc(var(--spacing) * 810);\n  }\n  .m-811 {\n    margin: calc(var(--spacing) * 811);\n  }\n  .m-813 {\n    margin: calc(var(--spacing) * 813);\n  }\n  .m-814 {\n    margin: calc(var(--spacing) * 814);\n  }\n  .m-816 {\n    margin: calc(var(--spacing) * 816);\n  }\n  .m-820 {\n    margin: calc(var(--spacing) * 820);\n  }\n  .m-822 {\n    margin: calc(var(--spacing) * 822);\n  }\n  .m-824 {\n    margin: calc(var(--spacing) * 824);\n  }\n  .m-828 {\n    margin: calc(var(--spacing) * 828);\n  }\n  .m-830 {\n    margin: calc(var(--spacing) * 830);\n  }\n  .m-831 {\n    margin: calc(var(--spacing) * 831);\n  }\n  .m-836 {\n    margin: calc(var(--spacing) * 836);\n  }\n  .m-839 {\n    margin: calc(var(--spacing) * 839);\n  }\n  .m-841 {\n    margin: calc(var(--spacing) * 841);\n  }\n  .m-842 {\n    margin: calc(var(--spacing) * 842);\n  }\n  .m-843 {\n    margin: calc(var(--spacing) * 843);\n  }\n  .m-848 {\n    margin: calc(var(--spacing) * 848);\n  }\n  .m-849 {\n    margin: calc(var(--spacing) * 849);\n  }\n  .m-851 {\n    margin: calc(var(--spacing) * 851);\n  }\n  .m-856 {\n    margin: calc(var(--spacing) * 856);\n  }\n  .m-857 {\n    margin: calc(var(--spacing) * 857);\n  }\n  .m-858 {\n    margin: calc(var(--spacing) * 858);\n  }\n  .m-859 {\n    margin: calc(var(--spacing) * 859);\n  }\n  .m-860 {\n    margin: calc(var(--spacing) * 860);\n  }\n  .m-862 {\n    margin: calc(var(--spacing) * 862);\n  }\n  .m-865 {\n    margin: calc(var(--spacing) * 865);\n  }\n  .m-866 {\n    margin: calc(var(--spacing) * 866);\n  }\n  .m-867 {\n    margin: calc(var(--spacing) * 867);\n  }\n  .m-869 {\n    margin: calc(var(--spacing) * 869);\n  }\n  .m-870 {\n    margin: calc(var(--spacing) * 870);\n  }\n  .m-873 {\n    margin: calc(var(--spacing) * 873);\n  }\n  .m-877 {\n    margin: calc(var(--spacing) * 877);\n  }\n  .m-879 {\n    margin: calc(var(--spacing) * 879);\n  }\n  .m-880 {\n    margin: calc(var(--spacing) * 880);\n  }\n  .m-882 {\n    margin: calc(var(--spacing) * 882);\n  }\n  .m-884 {\n    margin: calc(var(--spacing) * 884);\n  }\n  .m-885 {\n    margin: calc(var(--spacing) * 885);\n  }\n  .m-886 {\n    margin: calc(var(--spacing) * 886);\n  }\n  .m-889 {\n    margin: calc(var(--spacing) * 889);\n  }\n  .m-890 {\n    margin: calc(var(--spacing) * 890);\n  }\n  .m-892 {\n    margin: calc(var(--spacing) * 892);\n  }\n  .m-897 {\n    margin: calc(var(--spacing) * 897);\n  }\n  .m-900 {\n    margin: calc(var(--spacing) * 900);\n  }\n  .m-901 {\n    margin: calc(var(--spacing) * 901);\n  }\n  .m-902 {\n    margin: calc(var(--spacing) * 902);\n  }\n  .m-903 {\n    margin: calc(var(--spacing) * 903);\n  }\n  .m-905 {\n    margin: calc(var(--spacing) * 905);\n  }\n  .m-906 {\n    margin: calc(var(--spacing) * 906);\n  }\n  .m-908 {\n    margin: calc(var(--spacing) * 908);\n  }\n  .m-909 {\n    margin: calc(var(--spacing) * 909);\n  }\n  .m-910 {\n    margin: calc(var(--spacing) * 910);\n  }\n  .m-911 {\n    margin: calc(var(--spacing) * 911);\n  }\n  .m-912 {\n    margin: calc(var(--spacing) * 912);\n  }\n  .m-914 {\n    margin: calc(var(--spacing) * 914);\n  }\n  .m-916 {\n    margin: calc(var(--spacing) * 916);\n  }\n  .m-918 {\n    margin: calc(var(--spacing) * 918);\n  }\n  .m-919 {\n    margin: calc(var(--spacing) * 919);\n  }\n  .m-920 {\n    margin: calc(var(--spacing) * 920);\n  }\n  .m-923 {\n    margin: calc(var(--spacing) * 923);\n  }\n  .m-924 {\n    margin: calc(var(--spacing) * 924);\n  }\n  .m-925 {\n    margin: calc(var(--spacing) * 925);\n  }\n  .m-928 {\n    margin: calc(var(--spacing) * 928);\n  }\n  .m-929 {\n    margin: calc(var(--spacing) * 929);\n  }\n  .m-931 {\n    margin: calc(var(--spacing) * 931);\n  }\n  .m-933 {\n    margin: calc(var(--spacing) * 933);\n  }\n  .m-934 {\n    margin: calc(var(--spacing) * 934);\n  }\n  .m-935 {\n    margin: calc(var(--spacing) * 935);\n  }\n  .m-936 {\n    margin: calc(var(--spacing) * 936);\n  }\n  .m-937 {\n    margin: calc(var(--spacing) * 937);\n  }\n  .m-938 {\n    margin: calc(var(--spacing) * 938);\n  }\n  .m-940 {\n    margin: calc(var(--spacing) * 940);\n  }\n  .m-941 {\n    margin: calc(var(--spacing) * 941);\n  }\n  .m-942 {\n    margin: calc(var(--spacing) * 942);\n  }\n  .m-945 {\n    margin: calc(var(--spacing) * 945);\n  }\n  .m-946 {\n    margin: calc(var(--spacing) * 946);\n  }\n  .m-947 {\n    margin: calc(var(--spacing) * 947);\n  }\n  .m-950 {\n    margin: calc(var(--spacing) * 950);\n  }\n  .m-952 {\n    margin: calc(var(--spacing) * 952);\n  }\n  .m-954 {\n    margin: calc(var(--spacing) * 954);\n  }\n  .m-958 {\n    margin: calc(var(--spacing) * 958);\n  }\n  .m-959 {\n    margin: calc(var(--spacing) * 959);\n  }\n  .m-960 {\n    margin: calc(var(--spacing) * 960);\n  }\n  .m-963 {\n    margin: calc(var(--spacing) * 963);\n  }\n  .m-964 {\n    margin: calc(var(--spacing) * 964);\n  }\n  .m-965 {\n    margin: calc(var(--spacing) * 965);\n  }\n  .m-968 {\n    margin: calc(var(--spacing) * 968);\n  }\n  .m-969 {\n    margin: calc(var(--spacing) * 969);\n  }\n  .m-973 {\n    margin: calc(var(--spacing) * 973);\n  }\n  .m-974 {\n    margin: calc(var(--spacing) * 974);\n  }\n  .m-977 {\n    margin: calc(var(--spacing) * 977);\n  }\n  .m-979 {\n    margin: calc(var(--spacing) * 979);\n  }\n  .m-980 {\n    margin: calc(var(--spacing) * 980);\n  }\n  .m-983 {\n    margin: calc(var(--spacing) * 983);\n  }\n  .m-984 {\n    margin: calc(var(--spacing) * 984);\n  }\n  .m-986 {\n    margin: calc(var(--spacing) * 986);\n  }\n  .m-989 {\n    margin: calc(var(--spacing) * 989);\n  }\n  .m-990 {\n    margin: calc(var(--spacing) * 990);\n  }\n  .m-992 {\n    margin: calc(var(--spacing) * 992);\n  }\n  .m-993 {\n    margin: calc(var(--spacing) * 993);\n  }\n  .m-995 {\n    margin: calc(var(--spacing) * 995);\n  }\n  .m-996 {\n    margin: calc(var(--spacing) * 996);\n  }\n  .m-997 {\n    margin: calc(var(--spacing) * 997);\n  }\n  .m-999 {\n    margin: calc(var(--spacing) * 999);\n  }\n  .m-1004 {\n    margin: calc(var(--spacing) * 1004);\n  }\n  .m-1007 {\n    margin: calc(var(--spacing) * 1007);\n  }\n  .m-1010 {\n    margin: calc(var(--spacing) * 1010);\n  }\n  .m-1012 {\n    margin: calc(var(--spacing) * 1012);\n  }\n  .m-1016 {\n    margin: calc(var(--spacing) * 1016);\n  }\n  .m-1017 {\n    margin: calc(var(--spacing) * 1017);\n  }\n  .m-1018 {\n    margin: calc(var(--spacing) * 1018);\n  }\n  .m-1019 {\n    margin: calc(var(--spacing) * 1019);\n  }\n  .m-1022 {\n    margin: calc(var(--spacing) * 1022);\n  }\n  .m-1024 {\n    margin: calc(var(--spacing) * 1024);\n  }\n  .m-1025 {\n    margin: calc(var(--spacing) * 1025);\n  }\n  .m-1026 {\n    margin: calc(var(--spacing) * 1026);\n  }\n  .m-1027 {\n    margin: calc(var(--spacing) * 1027);\n  }\n  .m-1028 {\n    margin: calc(var(--spacing) * 1028);\n  }\n  .m-1030 {\n    margin: calc(var(--spacing) * 1030);\n  }\n  .m-1036 {\n    margin: calc(var(--spacing) * 1036);\n  }\n  .m-1037 {\n    margin: calc(var(--spacing) * 1037);\n  }\n  .m-1039 {\n    margin: calc(var(--spacing) * 1039);\n  }\n  .m-1040 {\n    margin: calc(var(--spacing) * 1040);\n  }\n  .m-1043 {\n    margin: calc(var(--spacing) * 1043);\n  }\n  .m-1045 {\n    margin: calc(var(--spacing) * 1045);\n  }\n  .m-1046 {\n    margin: calc(var(--spacing) * 1046);\n  }\n  .m-1047 {\n    margin: calc(var(--spacing) * 1047);\n  }\n  .m-1048 {\n    margin: calc(var(--spacing) * 1048);\n  }\n  .m-1050 {\n    margin: calc(var(--spacing) * 1050);\n  }\n  .m-1051 {\n    margin: calc(var(--spacing) * 1051);\n  }\n  .m-1052 {\n    margin: calc(var(--spacing) * 1052);\n  }\n  .m-1054 {\n    margin: calc(var(--spacing) * 1054);\n  }\n  .m-1056 {\n    margin: calc(var(--spacing) * 1056);\n  }\n  .m-1057 {\n    margin: calc(var(--spacing) * 1057);\n  }\n  .m-1058 {\n    margin: calc(var(--spacing) * 1058);\n  }\n  .m-1059 {\n    margin: calc(var(--spacing) * 1059);\n  }\n  .m-1063 {\n    margin: calc(var(--spacing) * 1063);\n  }\n  .m-1065 {\n    margin: calc(var(--spacing) * 1065);\n  }\n  .m-1066 {\n    margin: calc(var(--spacing) * 1066);\n  }\n  .m-1068 {\n    margin: calc(var(--spacing) * 1068);\n  }\n  .m-1069 {\n    margin: calc(var(--spacing) * 1069);\n  }\n  .m-1070 {\n    margin: calc(var(--spacing) * 1070);\n  }\n  .m-1071 {\n    margin: calc(var(--spacing) * 1071);\n  }\n  .m-1074 {\n    margin: calc(var(--spacing) * 1074);\n  }\n  .m-1076 {\n    margin: calc(var(--spacing) * 1076);\n  }\n  .m-1077 {\n    margin: calc(var(--spacing) * 1077);\n  }\n  .m-1079 {\n    margin: calc(var(--spacing) * 1079);\n  }\n  .m-1081 {\n    margin: calc(var(--spacing) * 1081);\n  }\n  .m-1082 {\n    margin: calc(var(--spacing) * 1082);\n  }\n  .m-1083 {\n    margin: calc(var(--spacing) * 1083);\n  }\n  .m-1086 {\n    margin: calc(var(--spacing) * 1086);\n  }\n  .m-1087 {\n    margin: calc(var(--spacing) * 1087);\n  }\n  .m-1088 {\n    margin: calc(var(--spacing) * 1088);\n  }\n  .m-1089 {\n    margin: calc(var(--spacing) * 1089);\n  }\n  .m-1090 {\n    margin: calc(var(--spacing) * 1090);\n  }\n  .m-1094 {\n    margin: calc(var(--spacing) * 1094);\n  }\n  .m-1095 {\n    margin: calc(var(--spacing) * 1095);\n  }\n  .m-1098 {\n    margin: calc(var(--spacing) * 1098);\n  }\n  .m-1100 {\n    margin: calc(var(--spacing) * 1100);\n  }\n  .m-1103 {\n    margin: calc(var(--spacing) * 1103);\n  }\n  .m-1105 {\n    margin: calc(var(--spacing) * 1105);\n  }\n  .m-1106 {\n    margin: calc(var(--spacing) * 1106);\n  }\n  .m-1107 {\n    margin: calc(var(--spacing) * 1107);\n  }\n  .m-1108 {\n    margin: calc(var(--spacing) * 1108);\n  }\n  .m-1109 {\n    margin: calc(var(--spacing) * 1109);\n  }\n  .m-1111 {\n    margin: calc(var(--spacing) * 1111);\n  }\n  .m-1112 {\n    margin: calc(var(--spacing) * 1112);\n  }\n  .m-1113 {\n    margin: calc(var(--spacing) * 1113);\n  }\n  .m-1114 {\n    margin: calc(var(--spacing) * 1114);\n  }\n  .m-1115 {\n    margin: calc(var(--spacing) * 1115);\n  }\n  .m-1117 {\n    margin: calc(var(--spacing) * 1117);\n  }\n  .m-1118 {\n    margin: calc(var(--spacing) * 1118);\n  }\n  .m-1120 {\n    margin: calc(var(--spacing) * 1120);\n  }\n  .m-1122 {\n    margin: calc(var(--spacing) * 1122);\n  }\n  .m-1126 {\n    margin: calc(var(--spacing) * 1126);\n  }\n  .m-1127 {\n    margin: calc(var(--spacing) * 1127);\n  }\n  .m-1129 {\n    margin: calc(var(--spacing) * 1129);\n  }\n  .m-1131 {\n    margin: calc(var(--spacing) * 1131);\n  }\n  .m-1133 {\n    margin: calc(var(--spacing) * 1133);\n  }\n  .m-1134 {\n    margin: calc(var(--spacing) * 1134);\n  }\n  .m-1137 {\n    margin: calc(var(--spacing) * 1137);\n  }\n  .m-1140 {\n    margin: calc(var(--spacing) * 1140);\n  }\n  .m-1141 {\n    margin: calc(var(--spacing) * 1141);\n  }\n  .m-1147 {\n    margin: calc(var(--spacing) * 1147);\n  }\n  .m-1149 {\n    margin: calc(var(--spacing) * 1149);\n  }\n  .m-1150 {\n    margin: calc(var(--spacing) * 1150);\n  }\n  .m-1161 {\n    margin: calc(var(--spacing) * 1161);\n  }\n  .m-1165 {\n    margin: calc(var(--spacing) * 1165);\n  }\n  .m-1167 {\n    margin: calc(var(--spacing) * 1167);\n  }\n  .m-1169 {\n    margin: calc(var(--spacing) * 1169);\n  }\n  .m-1172 {\n    margin: calc(var(--spacing) * 1172);\n  }\n  .m-1174 {\n    margin: calc(var(--spacing) * 1174);\n  }\n  .m-1175 {\n    margin: calc(var(--spacing) * 1175);\n  }\n  .m-1177 {\n    margin: calc(var(--spacing) * 1177);\n  }\n  .m-1179 {\n    margin: calc(var(--spacing) * 1179);\n  }\n  .m-1180 {\n    margin: calc(var(--spacing) * 1180);\n  }\n  .m-1181 {\n    margin: calc(var(--spacing) * 1181);\n  }\n  .m-1182 {\n    margin: calc(var(--spacing) * 1182);\n  }\n  .m-1184 {\n    margin: calc(var(--spacing) * 1184);\n  }\n  .m-1188 {\n    margin: calc(var(--spacing) * 1188);\n  }\n  .m-1189 {\n    margin: calc(var(--spacing) * 1189);\n  }\n  .m-1192 {\n    margin: calc(var(--spacing) * 1192);\n  }\n  .m-1196 {\n    margin: calc(var(--spacing) * 1196);\n  }\n  .m-1197 {\n    margin: calc(var(--spacing) * 1197);\n  }\n  .m-1198 {\n    margin: calc(var(--spacing) * 1198);\n  }\n  .m-1199 {\n    margin: calc(var(--spacing) * 1199);\n  }\n  .m-1200 {\n    margin: calc(var(--spacing) * 1200);\n  }\n  .m-1201 {\n    margin: calc(var(--spacing) * 1201);\n  }\n  .m-1202 {\n    margin: calc(var(--spacing) * 1202);\n  }\n  .m-1203 {\n    margin: calc(var(--spacing) * 1203);\n  }\n  .m-1204 {\n    margin: calc(var(--spacing) * 1204);\n  }\n  .m-1205 {\n    margin: calc(var(--spacing) * 1205);\n  }\n  .m-1206 {\n    margin: calc(var(--spacing) * 1206);\n  }\n  .m-1207 {\n    margin: calc(var(--spacing) * 1207);\n  }\n  .m-1208 {\n    margin: calc(var(--spacing) * 1208);\n  }\n  .m-1209 {\n    margin: calc(var(--spacing) * 1209);\n  }\n  .m-1210 {\n    margin: calc(var(--spacing) * 1210);\n  }\n  .m-1211 {\n    margin: calc(var(--spacing) * 1211);\n  }\n  .m-1214 {\n    margin: calc(var(--spacing) * 1214);\n  }\n  .m-1215 {\n    margin: calc(var(--spacing) * 1215);\n  }\n  .m-1219 {\n    margin: calc(var(--spacing) * 1219);\n  }\n  .m-1220 {\n    margin: calc(var(--spacing) * 1220);\n  }\n  .m-1224 {\n    margin: calc(var(--spacing) * 1224);\n  }\n  .m-1229 {\n    margin: calc(var(--spacing) * 1229);\n  }\n  .m-1230 {\n    margin: calc(var(--spacing) * 1230);\n  }\n  .m-1234 {\n    margin: calc(var(--spacing) * 1234);\n  }\n  .m-1237 {\n    margin: calc(var(--spacing) * 1237);\n  }\n  .m-1240 {\n    margin: calc(var(--spacing) * 1240);\n  }\n  .m-1242 {\n    margin: calc(var(--spacing) * 1242);\n  }\n  .m-1244 {\n    margin: calc(var(--spacing) * 1244);\n  }\n  .m-1245 {\n    margin: calc(var(--spacing) * 1245);\n  }\n  .m-1246 {\n    margin: calc(var(--spacing) * 1246);\n  }\n  .m-1250 {\n    margin: calc(var(--spacing) * 1250);\n  }\n  .m-1251 {\n    margin: calc(var(--spacing) * 1251);\n  }\n  .m-1254 {\n    margin: calc(var(--spacing) * 1254);\n  }\n  .m-1255 {\n    margin: calc(var(--spacing) * 1255);\n  }\n  .m-1256 {\n    margin: calc(var(--spacing) * 1256);\n  }\n  .m-1257 {\n    margin: calc(var(--spacing) * 1257);\n  }\n  .m-1259 {\n    margin: calc(var(--spacing) * 1259);\n  }\n  .m-1260 {\n    margin: calc(var(--spacing) * 1260);\n  }\n  .m-1261 {\n    margin: calc(var(--spacing) * 1261);\n  }\n  .m-1262 {\n    margin: calc(var(--spacing) * 1262);\n  }\n  .m-1264 {\n    margin: calc(var(--spacing) * 1264);\n  }\n  .m-1266 {\n    margin: calc(var(--spacing) * 1266);\n  }\n  .m-1270 {\n    margin: calc(var(--spacing) * 1270);\n  }\n  .m-1271 {\n    margin: calc(var(--spacing) * 1271);\n  }\n  .m-1274 {\n    margin: calc(var(--spacing) * 1274);\n  }\n  .m-1275 {\n    margin: calc(var(--spacing) * 1275);\n  }\n  .m-1276 {\n    margin: calc(var(--spacing) * 1276);\n  }\n  .m-1277 {\n    margin: calc(var(--spacing) * 1277);\n  }\n  .m-1278 {\n    margin: calc(var(--spacing) * 1278);\n  }\n  .m-1280 {\n    margin: calc(var(--spacing) * 1280);\n  }\n  .m-1281 {\n    margin: calc(var(--spacing) * 1281);\n  }\n  .m-1283 {\n    margin: calc(var(--spacing) * 1283);\n  }\n  .m-1288 {\n    margin: calc(var(--spacing) * 1288);\n  }\n  .m-1290 {\n    margin: calc(var(--spacing) * 1290);\n  }\n  .m-1293 {\n    margin: calc(var(--spacing) * 1293);\n  }\n  .m-1294 {\n    margin: calc(var(--spacing) * 1294);\n  }\n  .m-1295 {\n    margin: calc(var(--spacing) * 1295);\n  }\n  .m-1296 {\n    margin: calc(var(--spacing) * 1296);\n  }\n  .m-1297 {\n    margin: calc(var(--spacing) * 1297);\n  }\n  .m-1299 {\n    margin: calc(var(--spacing) * 1299);\n  }\n  .m-1300 {\n    margin: calc(var(--spacing) * 1300);\n  }\n  .m-1305 {\n    margin: calc(var(--spacing) * 1305);\n  }\n  .m-1310 {\n    margin: calc(var(--spacing) * 1310);\n  }\n  .m-1314 {\n    margin: calc(var(--spacing) * 1314);\n  }\n  .m-1316 {\n    margin: calc(var(--spacing) * 1316);\n  }\n  .m-1317 {\n    margin: calc(var(--spacing) * 1317);\n  }\n  .m-1318 {\n    margin: calc(var(--spacing) * 1318);\n  }\n  .m-1321 {\n    margin: calc(var(--spacing) * 1321);\n  }\n  .m-1324 {\n    margin: calc(var(--spacing) * 1324);\n  }\n  .m-1325 {\n    margin: calc(var(--spacing) * 1325);\n  }\n  .m-1326 {\n    margin: calc(var(--spacing) * 1326);\n  }\n  .m-1329 {\n    margin: calc(var(--spacing) * 1329);\n  }\n  .m-1332 {\n    margin: calc(var(--spacing) * 1332);\n  }\n  .m-1333 {\n    margin: calc(var(--spacing) * 1333);\n  }\n  .m-1334 {\n    margin: calc(var(--spacing) * 1334);\n  }\n  .m-1339 {\n    margin: calc(var(--spacing) * 1339);\n  }\n  .m-1340 {\n    margin: calc(var(--spacing) * 1340);\n  }\n  .m-1342 {\n    margin: calc(var(--spacing) * 1342);\n  }\n  .m-1344 {\n    margin: calc(var(--spacing) * 1344);\n  }\n  .m-1345 {\n    margin: calc(var(--spacing) * 1345);\n  }\n  .m-1347 {\n    margin: calc(var(--spacing) * 1347);\n  }\n  .m-1350 {\n    margin: calc(var(--spacing) * 1350);\n  }\n  .m-1351 {\n    margin: calc(var(--spacing) * 1351);\n  }\n  .m-1353 {\n    margin: calc(var(--spacing) * 1353);\n  }\n  .m-1355 {\n    margin: calc(var(--spacing) * 1355);\n  }\n  .m-1356 {\n    margin: calc(var(--spacing) * 1356);\n  }\n  .m-1357 {\n    margin: calc(var(--spacing) * 1357);\n  }\n  .m-1359 {\n    margin: calc(var(--spacing) * 1359);\n  }\n  .m-1360 {\n    margin: calc(var(--spacing) * 1360);\n  }\n  .m-1361 {\n    margin: calc(var(--spacing) * 1361);\n  }\n  .m-1366 {\n    margin: calc(var(--spacing) * 1366);\n  }\n  .m-1370 {\n    margin: calc(var(--spacing) * 1370);\n  }\n  .m-1373 {\n    margin: calc(var(--spacing) * 1373);\n  }\n  .m-1378 {\n    margin: calc(var(--spacing) * 1378);\n  }\n  .m-1379 {\n    margin: calc(var(--spacing) * 1379);\n  }\n  .m-1381 {\n    margin: calc(var(--spacing) * 1381);\n  }\n  .m-1383 {\n    margin: calc(var(--spacing) * 1383);\n  }\n  .m-1384 {\n    margin: calc(var(--spacing) * 1384);\n  }\n  .m-1386 {\n    margin: calc(var(--spacing) * 1386);\n  }\n  .m-1388 {\n    margin: calc(var(--spacing) * 1388);\n  }\n  .m-1390 {\n    margin: calc(var(--spacing) * 1390);\n  }\n  .m-1391 {\n    margin: calc(var(--spacing) * 1391);\n  }\n  .m-1395 {\n    margin: calc(var(--spacing) * 1395);\n  }\n  .m-1396 {\n    margin: calc(var(--spacing) * 1396);\n  }\n  .m-1397 {\n    margin: calc(var(--spacing) * 1397);\n  }\n  .m-1399 {\n    margin: calc(var(--spacing) * 1399);\n  }\n  .m-1400 {\n    margin: calc(var(--spacing) * 1400);\n  }\n  .m-1402 {\n    margin: calc(var(--spacing) * 1402);\n  }\n  .m-1403 {\n    margin: calc(var(--spacing) * 1403);\n  }\n  .m-1405 {\n    margin: calc(var(--spacing) * 1405);\n  }\n  .m-1408 {\n    margin: calc(var(--spacing) * 1408);\n  }\n  .m-1416 {\n    margin: calc(var(--spacing) * 1416);\n  }\n  .m-1420 {\n    margin: calc(var(--spacing) * 1420);\n  }\n  .m-1423 {\n    margin: calc(var(--spacing) * 1423);\n  }\n  .m-1424 {\n    margin: calc(var(--spacing) * 1424);\n  }\n  .m-1425 {\n    margin: calc(var(--spacing) * 1425);\n  }\n  .m-1426 {\n    margin: calc(var(--spacing) * 1426);\n  }\n  .m-1428 {\n    margin: calc(var(--spacing) * 1428);\n  }\n  .m-1430 {\n    margin: calc(var(--spacing) * 1430);\n  }\n  .m-1431 {\n    margin: calc(var(--spacing) * 1431);\n  }\n  .m-1432 {\n    margin: calc(var(--spacing) * 1432);\n  }\n  .m-1434 {\n    margin: calc(var(--spacing) * 1434);\n  }\n  .m-1436 {\n    margin: calc(var(--spacing) * 1436);\n  }\n  .m-1437 {\n    margin: calc(var(--spacing) * 1437);\n  }\n  .m-1439 {\n    margin: calc(var(--spacing) * 1439);\n  }\n  .m-1441 {\n    margin: calc(var(--spacing) * 1441);\n  }\n  .m-1442 {\n    margin: calc(var(--spacing) * 1442);\n  }\n  .m-1445 {\n    margin: calc(var(--spacing) * 1445);\n  }\n  .m-1448 {\n    margin: calc(var(--spacing) * 1448);\n  }\n  .m-1450 {\n    margin: calc(var(--spacing) * 1450);\n  }\n  .m-1452 {\n    margin: calc(var(--spacing) * 1452);\n  }\n  .m-1454 {\n    margin: calc(var(--spacing) * 1454);\n  }\n  .m-1456 {\n    margin: calc(var(--spacing) * 1456);\n  }\n  .m-1458 {\n    margin: calc(var(--spacing) * 1458);\n  }\n  .m-1459 {\n    margin: calc(var(--spacing) * 1459);\n  }\n  .m-1460 {\n    margin: calc(var(--spacing) * 1460);\n  }\n  .m-1467 {\n    margin: calc(var(--spacing) * 1467);\n  }\n  .m-1468 {\n    margin: calc(var(--spacing) * 1468);\n  }\n  .m-1470 {\n    margin: calc(var(--spacing) * 1470);\n  }\n  .m-1474 {\n    margin: calc(var(--spacing) * 1474);\n  }\n  .m-1475 {\n    margin: calc(var(--spacing) * 1475);\n  }\n  .m-1476 {\n    margin: calc(var(--spacing) * 1476);\n  }\n  .m-1477 {\n    margin: calc(var(--spacing) * 1477);\n  }\n  .m-1478 {\n    margin: calc(var(--spacing) * 1478);\n  }\n  .m-1482 {\n    margin: calc(var(--spacing) * 1482);\n  }\n  .m-1483 {\n    margin: calc(var(--spacing) * 1483);\n  }\n  .m-1486 {\n    margin: calc(var(--spacing) * 1486);\n  }\n  .m-1490 {\n    margin: calc(var(--spacing) * 1490);\n  }\n  .m-1491 {\n    margin: calc(var(--spacing) * 1491);\n  }\n  .m-1493 {\n    margin: calc(var(--spacing) * 1493);\n  }\n  .m-1494 {\n    margin: calc(var(--spacing) * 1494);\n  }\n  .m-1495 {\n    margin: calc(var(--spacing) * 1495);\n  }\n  .m-1497 {\n    margin: calc(var(--spacing) * 1497);\n  }\n  .m-1498 {\n    margin: calc(var(--spacing) * 1498);\n  }\n  .m-1499 {\n    margin: calc(var(--spacing) * 1499);\n  }\n  .m-1501 {\n    margin: calc(var(--spacing) * 1501);\n  }\n  .m-1502 {\n    margin: calc(var(--spacing) * 1502);\n  }\n  .m-1503 {\n    margin: calc(var(--spacing) * 1503);\n  }\n  .m-1506 {\n    margin: calc(var(--spacing) * 1506);\n  }\n  .m-1510 {\n    margin: calc(var(--spacing) * 1510);\n  }\n  .m-1514 {\n    margin: calc(var(--spacing) * 1514);\n  }\n  .m-1515 {\n    margin: calc(var(--spacing) * 1515);\n  }\n  .m-1518 {\n    margin: calc(var(--spacing) * 1518);\n  }\n  .m-1522 {\n    margin: calc(var(--spacing) * 1522);\n  }\n  .m-1523 {\n    margin: calc(var(--spacing) * 1523);\n  }\n  .m-1524 {\n    margin: calc(var(--spacing) * 1524);\n  }\n  .m-1525 {\n    margin: calc(var(--spacing) * 1525);\n  }\n  .m-1528 {\n    margin: calc(var(--spacing) * 1528);\n  }\n  .m-1529 {\n    margin: calc(var(--spacing) * 1529);\n  }\n  .m-1531 {\n    margin: calc(var(--spacing) * 1531);\n  }\n  .m-1534 {\n    margin: calc(var(--spacing) * 1534);\n  }\n  .m-1536 {\n    margin: calc(var(--spacing) * 1536);\n  }\n  .m-1538 {\n    margin: calc(var(--spacing) * 1538);\n  }\n  .m-1539 {\n    margin: calc(var(--spacing) * 1539);\n  }\n  .m-1540 {\n    margin: calc(var(--spacing) * 1540);\n  }\n  .m-1545 {\n    margin: calc(var(--spacing) * 1545);\n  }\n  .m-1546 {\n    margin: calc(var(--spacing) * 1546);\n  }\n  .m-1548 {\n    margin: calc(var(--spacing) * 1548);\n  }\n  .m-1551 {\n    margin: calc(var(--spacing) * 1551);\n  }\n  .m-1552 {\n    margin: calc(var(--spacing) * 1552);\n  }\n  .m-1554 {\n    margin: calc(var(--spacing) * 1554);\n  }\n  .m-1559 {\n    margin: calc(var(--spacing) * 1559);\n  }\n  .m-1560 {\n    margin: calc(var(--spacing) * 1560);\n  }\n  .m-1563 {\n    margin: calc(var(--spacing) * 1563);\n  }\n  .m-1565 {\n    margin: calc(var(--spacing) * 1565);\n  }\n  .m-1566 {\n    margin: calc(var(--spacing) * 1566);\n  }\n  .m-1567 {\n    margin: calc(var(--spacing) * 1567);\n  }\n  .m-1570 {\n    margin: calc(var(--spacing) * 1570);\n  }\n  .m-1575 {\n    margin: calc(var(--spacing) * 1575);\n  }\n  .m-1577 {\n    margin: calc(var(--spacing) * 1577);\n  }\n  .m-1578 {\n    margin: calc(var(--spacing) * 1578);\n  }\n  .m-1580 {\n    margin: calc(var(--spacing) * 1580);\n  }\n  .m-1582 {\n    margin: calc(var(--spacing) * 1582);\n  }\n  .m-1583 {\n    margin: calc(var(--spacing) * 1583);\n  }\n  .m-1585 {\n    margin: calc(var(--spacing) * 1585);\n  }\n  .m-1590 {\n    margin: calc(var(--spacing) * 1590);\n  }\n  .m-1591 {\n    margin: calc(var(--spacing) * 1591);\n  }\n  .m-1592 {\n    margin: calc(var(--spacing) * 1592);\n  }\n  .m-1593 {\n    margin: calc(var(--spacing) * 1593);\n  }\n  .m-1595 {\n    margin: calc(var(--spacing) * 1595);\n  }\n  .m-1596 {\n    margin: calc(var(--spacing) * 1596);\n  }\n  .m-1600 {\n    margin: calc(var(--spacing) * 1600);\n  }\n  .m-1602 {\n    margin: calc(var(--spacing) * 1602);\n  }\n  .m-1605 {\n    margin: calc(var(--spacing) * 1605);\n  }\n  .m-1606 {\n    margin: calc(var(--spacing) * 1606);\n  }\n  .m-1609 {\n    margin: calc(var(--spacing) * 1609);\n  }\n  .m-1610 {\n    margin: calc(var(--spacing) * 1610);\n  }\n  .m-1613 {\n    margin: calc(var(--spacing) * 1613);\n  }\n  .m-1615 {\n    margin: calc(var(--spacing) * 1615);\n  }\n  .m-1616 {\n    margin: calc(var(--spacing) * 1616);\n  }\n  .m-1626 {\n    margin: calc(var(--spacing) * 1626);\n  }\n  .m-1627 {\n    margin: calc(var(--spacing) * 1627);\n  }\n  .m-1629 {\n    margin: calc(var(--spacing) * 1629);\n  }\n  .m-1630 {\n    margin: calc(var(--spacing) * 1630);\n  }\n  .m-1631 {\n    margin: calc(var(--spacing) * 1631);\n  }\n  .m-1633 {\n    margin: calc(var(--spacing) * 1633);\n  }\n  .m-1638 {\n    margin: calc(var(--spacing) * 1638);\n  }\n  .m-1643 {\n    margin: calc(var(--spacing) * 1643);\n  }\n  .m-1644 {\n    margin: calc(var(--spacing) * 1644);\n  }\n  .m-1647 {\n    margin: calc(var(--spacing) * 1647);\n  }\n  .m-1648 {\n    margin: calc(var(--spacing) * 1648);\n  }\n  .m-1651 {\n    margin: calc(var(--spacing) * 1651);\n  }\n  .m-1652 {\n    margin: calc(var(--spacing) * 1652);\n  }\n  .m-1657 {\n    margin: calc(var(--spacing) * 1657);\n  }\n  .m-1658 {\n    margin: calc(var(--spacing) * 1658);\n  }\n  .m-1660 {\n    margin: calc(var(--spacing) * 1660);\n  }\n  .m-1661 {\n    margin: calc(var(--spacing) * 1661);\n  }\n  .m-1664 {\n    margin: calc(var(--spacing) * 1664);\n  }\n  .m-1667 {\n    margin: calc(var(--spacing) * 1667);\n  }\n  .m-1669 {\n    margin: calc(var(--spacing) * 1669);\n  }\n  .m-1670 {\n    margin: calc(var(--spacing) * 1670);\n  }\n  .m-1672 {\n    margin: calc(var(--spacing) * 1672);\n  }\n  .m-1680 {\n    margin: calc(var(--spacing) * 1680);\n  }\n  .m-1684 {\n    margin: calc(var(--spacing) * 1684);\n  }\n  .m-1685 {\n    margin: calc(var(--spacing) * 1685);\n  }\n  .m-1686 {\n    margin: calc(var(--spacing) * 1686);\n  }\n  .m-1689 {\n    margin: calc(var(--spacing) * 1689);\n  }\n  .m-1690 {\n    margin: calc(var(--spacing) * 1690);\n  }\n  .m-1691 {\n    margin: calc(var(--spacing) * 1691);\n  }\n  .m-1695 {\n    margin: calc(var(--spacing) * 1695);\n  }\n  .m-1697 {\n    margin: calc(var(--spacing) * 1697);\n  }\n  .m-1698 {\n    margin: calc(var(--spacing) * 1698);\n  }\n  .m-1699 {\n    margin: calc(var(--spacing) * 1699);\n  }\n  .m-1700 {\n    margin: calc(var(--spacing) * 1700);\n  }\n  .m-1704 {\n    margin: calc(var(--spacing) * 1704);\n  }\n  .m-1706 {\n    margin: calc(var(--spacing) * 1706);\n  }\n  .m-1710 {\n    margin: calc(var(--spacing) * 1710);\n  }\n  .m-1712 {\n    margin: calc(var(--spacing) * 1712);\n  }\n  .m-1713 {\n    margin: calc(var(--spacing) * 1713);\n  }\n  .m-1715 {\n    margin: calc(var(--spacing) * 1715);\n  }\n  .m-1716 {\n    margin: calc(var(--spacing) * 1716);\n  }\n  .m-1718 {\n    margin: calc(var(--spacing) * 1718);\n  }\n  .m-1725 {\n    margin: calc(var(--spacing) * 1725);\n  }\n  .m-1729 {\n    margin: calc(var(--spacing) * 1729);\n  }\n  .m-1730 {\n    margin: calc(var(--spacing) * 1730);\n  }\n  .m-1733 {\n    margin: calc(var(--spacing) * 1733);\n  }\n  .m-1734 {\n    margin: calc(var(--spacing) * 1734);\n  }\n  .m-1735 {\n    margin: calc(var(--spacing) * 1735);\n  }\n  .m-1736 {\n    margin: calc(var(--spacing) * 1736);\n  }\n  .m-1737 {\n    margin: calc(var(--spacing) * 1737);\n  }\n  .m-1738 {\n    margin: calc(var(--spacing) * 1738);\n  }\n  .m-1740 {\n    margin: calc(var(--spacing) * 1740);\n  }\n  .m-1741 {\n    margin: calc(var(--spacing) * 1741);\n  }\n  .m-1742 {\n    margin: calc(var(--spacing) * 1742);\n  }\n  .m-1743 {\n    margin: calc(var(--spacing) * 1743);\n  }\n  .m-1745 {\n    margin: calc(var(--spacing) * 1745);\n  }\n  .m-1747 {\n    margin: calc(var(--spacing) * 1747);\n  }\n  .m-1748 {\n    margin: calc(var(--spacing) * 1748);\n  }\n  .m-1749 {\n    margin: calc(var(--spacing) * 1749);\n  }\n  .m-1750 {\n    margin: calc(var(--spacing) * 1750);\n  }\n  .m-1751 {\n    margin: calc(var(--spacing) * 1751);\n  }\n  .m-1754 {\n    margin: calc(var(--spacing) * 1754);\n  }\n  .m-1755 {\n    margin: calc(var(--spacing) * 1755);\n  }\n  .m-1756 {\n    margin: calc(var(--spacing) * 1756);\n  }\n  .m-1760 {\n    margin: calc(var(--spacing) * 1760);\n  }\n  .m-1761 {\n    margin: calc(var(--spacing) * 1761);\n  }\n  .m-1763 {\n    margin: calc(var(--spacing) * 1763);\n  }\n  .m-1764 {\n    margin: calc(var(--spacing) * 1764);\n  }\n  .m-1766 {\n    margin: calc(var(--spacing) * 1766);\n  }\n  .m-1767 {\n    margin: calc(var(--spacing) * 1767);\n  }\n  .m-1768 {\n    margin: calc(var(--spacing) * 1768);\n  }\n  .m-1769 {\n    margin: calc(var(--spacing) * 1769);\n  }\n  .m-1770 {\n    margin: calc(var(--spacing) * 1770);\n  }\n  .m-1771 {\n    margin: calc(var(--spacing) * 1771);\n  }\n  .m-1773 {\n    margin: calc(var(--spacing) * 1773);\n  }\n  .m-1774 {\n    margin: calc(var(--spacing) * 1774);\n  }\n  .m-1777 {\n    margin: calc(var(--spacing) * 1777);\n  }\n  .m-1782 {\n    margin: calc(var(--spacing) * 1782);\n  }\n  .m-1783 {\n    margin: calc(var(--spacing) * 1783);\n  }\n  .m-1786 {\n    margin: calc(var(--spacing) * 1786);\n  }\n  .m-1787 {\n    margin: calc(var(--spacing) * 1787);\n  }\n  .m-1790 {\n    margin: calc(var(--spacing) * 1790);\n  }\n  .m-1791 {\n    margin: calc(var(--spacing) * 1791);\n  }\n  .m-1793 {\n    margin: calc(var(--spacing) * 1793);\n  }\n  .m-1794 {\n    margin: calc(var(--spacing) * 1794);\n  }\n  .m-1798 {\n    margin: calc(var(--spacing) * 1798);\n  }\n  .m-1804 {\n    margin: calc(var(--spacing) * 1804);\n  }\n  .m-1806 {\n    margin: calc(var(--spacing) * 1806);\n  }\n  .m-1807 {\n    margin: calc(var(--spacing) * 1807);\n  }\n  .m-1815 {\n    margin: calc(var(--spacing) * 1815);\n  }\n  .m-1816 {\n    margin: calc(var(--spacing) * 1816);\n  }\n  .m-1819 {\n    margin: calc(var(--spacing) * 1819);\n  }\n  .m-1820 {\n    margin: calc(var(--spacing) * 1820);\n  }\n  .m-1821 {\n    margin: calc(var(--spacing) * 1821);\n  }\n  .m-1824 {\n    margin: calc(var(--spacing) * 1824);\n  }\n  .m-1826 {\n    margin: calc(var(--spacing) * 1826);\n  }\n  .m-1829 {\n    margin: calc(var(--spacing) * 1829);\n  }\n  .m-1830 {\n    margin: calc(var(--spacing) * 1830);\n  }\n  .m-1831 {\n    margin: calc(var(--spacing) * 1831);\n  }\n  .m-1832 {\n    margin: calc(var(--spacing) * 1832);\n  }\n  .m-1833 {\n    margin: calc(var(--spacing) * 1833);\n  }\n  .m-1836 {\n    margin: calc(var(--spacing) * 1836);\n  }\n  .m-1838 {\n    margin: calc(var(--spacing) * 1838);\n  }\n  .m-1841 {\n    margin: calc(var(--spacing) * 1841);\n  }\n  .m-1842 {\n    margin: calc(var(--spacing) * 1842);\n  }\n  .m-1849 {\n    margin: calc(var(--spacing) * 1849);\n  }\n  .m-1853 {\n    margin: calc(var(--spacing) * 1853);\n  }\n  .m-1854 {\n    margin: calc(var(--spacing) * 1854);\n  }\n  .m-1856 {\n    margin: calc(var(--spacing) * 1856);\n  }\n  .m-1857 {\n    margin: calc(var(--spacing) * 1857);\n  }\n  .m-1859 {\n    margin: calc(var(--spacing) * 1859);\n  }\n  .m-1860 {\n    margin: calc(var(--spacing) * 1860);\n  }\n  .m-1864 {\n    margin: calc(var(--spacing) * 1864);\n  }\n  .m-1865 {\n    margin: calc(var(--spacing) * 1865);\n  }\n  .m-1867 {\n    margin: calc(var(--spacing) * 1867);\n  }\n  .m-1868 {\n    margin: calc(var(--spacing) * 1868);\n  }\n  .m-1871 {\n    margin: calc(var(--spacing) * 1871);\n  }\n  .m-1873 {\n    margin: calc(var(--spacing) * 1873);\n  }\n  .m-1877 {\n    margin: calc(var(--spacing) * 1877);\n  }\n  .m-1879 {\n    margin: calc(var(--spacing) * 1879);\n  }\n  .m-1884 {\n    margin: calc(var(--spacing) * 1884);\n  }\n  .m-1886 {\n    margin: calc(var(--spacing) * 1886);\n  }\n  .m-1887 {\n    margin: calc(var(--spacing) * 1887);\n  }\n  .m-1895 {\n    margin: calc(var(--spacing) * 1895);\n  }\n  .m-1897 {\n    margin: calc(var(--spacing) * 1897);\n  }\n  .m-1898 {\n    margin: calc(var(--spacing) * 1898);\n  }\n  .m-1902 {\n    margin: calc(var(--spacing) * 1902);\n  }\n  .m-1905 {\n    margin: calc(var(--spacing) * 1905);\n  }\n  .m-1907 {\n    margin: calc(var(--spacing) * 1907);\n  }\n  .m-1909 {\n    margin: calc(var(--spacing) * 1909);\n  }\n  .m-1911 {\n    margin: calc(var(--spacing) * 1911);\n  }\n  .m-1912 {\n    margin: calc(var(--spacing) * 1912);\n  }\n  .m-1914 {\n    margin: calc(var(--spacing) * 1914);\n  }\n  .m-1915 {\n    margin: calc(var(--spacing) * 1915);\n  }\n  .m-1919 {\n    margin: calc(var(--spacing) * 1919);\n  }\n  .m-1920 {\n    margin: calc(var(--spacing) * 1920);\n  }\n  .m-1925 {\n    margin: calc(var(--spacing) * 1925);\n  }\n  .m-1929 {\n    margin: calc(var(--spacing) * 1929);\n  }\n  .m-1935 {\n    margin: calc(var(--spacing) * 1935);\n  }\n  .m-1937 {\n    margin: calc(var(--spacing) * 1937);\n  }\n  .m-1940 {\n    margin: calc(var(--spacing) * 1940);\n  }\n  .m-1945 {\n    margin: calc(var(--spacing) * 1945);\n  }\n  .m-1946 {\n    margin: calc(var(--spacing) * 1946);\n  }\n  .m-1947 {\n    margin: calc(var(--spacing) * 1947);\n  }\n  .m-1948 {\n    margin: calc(var(--spacing) * 1948);\n  }\n  .m-1951 {\n    margin: calc(var(--spacing) * 1951);\n  }\n  .m-1953 {\n    margin: calc(var(--spacing) * 1953);\n  }\n  .m-1956 {\n    margin: calc(var(--spacing) * 1956);\n  }\n  .m-1959 {\n    margin: calc(var(--spacing) * 1959);\n  }\n  .m-1960 {\n    margin: calc(var(--spacing) * 1960);\n  }\n  .m-1961 {\n    margin: calc(var(--spacing) * 1961);\n  }\n  .m-1962 {\n    margin: calc(var(--spacing) * 1962);\n  }\n  .m-1963 {\n    margin: calc(var(--spacing) * 1963);\n  }\n  .m-1965 {\n    margin: calc(var(--spacing) * 1965);\n  }\n  .m-1966 {\n    margin: calc(var(--spacing) * 1966);\n  }\n  .m-1967 {\n    margin: calc(var(--spacing) * 1967);\n  }\n  .m-1968 {\n    margin: calc(var(--spacing) * 1968);\n  }\n  .m-1969 {\n    margin: calc(var(--spacing) * 1969);\n  }\n  .m-1970 {\n    margin: calc(var(--spacing) * 1970);\n  }\n  .m-1971 {\n    margin: calc(var(--spacing) * 1971);\n  }\n  .m-1973 {\n    margin: calc(var(--spacing) * 1973);\n  }\n  .m-1974 {\n    margin: calc(var(--spacing) * 1974);\n  }\n  .m-1975 {\n    margin: calc(var(--spacing) * 1975);\n  }\n  .m-1976 {\n    margin: calc(var(--spacing) * 1976);\n  }\n  .m-1977 {\n    margin: calc(var(--spacing) * 1977);\n  }\n  .m-1978 {\n    margin: calc(var(--spacing) * 1978);\n  }\n  .m-1980 {\n    margin: calc(var(--spacing) * 1980);\n  }\n  .m-1985 {\n    margin: calc(var(--spacing) * 1985);\n  }\n  .m-1987 {\n    margin: calc(var(--spacing) * 1987);\n  }\n  .m-1990 {\n    margin: calc(var(--spacing) * 1990);\n  }\n  .m-1993 {\n    margin: calc(var(--spacing) * 1993);\n  }\n  .m-1994 {\n    margin: calc(var(--spacing) * 1994);\n  }\n  .m-1995 {\n    margin: calc(var(--spacing) * 1995);\n  }\n  .m-1996 {\n    margin: calc(var(--spacing) * 1996);\n  }\n  .m-1997 {\n    margin: calc(var(--spacing) * 1997);\n  }\n  .m-1998 {\n    margin: calc(var(--spacing) * 1998);\n  }\n  .m-1999 {\n    margin: calc(var(--spacing) * 1999);\n  }\n  .m-2000 {\n    margin: calc(var(--spacing) * 2000);\n  }\n  .m-2002 {\n    margin: calc(var(--spacing) * 2002);\n  }\n  .m-2007 {\n    margin: calc(var(--spacing) * 2007);\n  }\n  .m-2010 {\n    margin: calc(var(--spacing) * 2010);\n  }\n  .m-2012 {\n    margin: calc(var(--spacing) * 2012);\n  }\n  .m-2016 {\n    margin: calc(var(--spacing) * 2016);\n  }\n  .m-2018 {\n    margin: calc(var(--spacing) * 2018);\n  }\n  .m-2020 {\n    margin: calc(var(--spacing) * 2020);\n  }\n  .m-2025 {\n    margin: calc(var(--spacing) * 2025);\n  }\n  .m-2026 {\n    margin: calc(var(--spacing) * 2026);\n  }\n  .m-2027 {\n    margin: calc(var(--spacing) * 2027);\n  }\n  .m-2028 {\n    margin: calc(var(--spacing) * 2028);\n  }\n  .m-2030 {\n    margin: calc(var(--spacing) * 2030);\n  }\n  .m-2032 {\n    margin: calc(var(--spacing) * 2032);\n  }\n  .m-2034 {\n    margin: calc(var(--spacing) * 2034);\n  }\n  .m-2035 {\n    margin: calc(var(--spacing) * 2035);\n  }\n  .m-2037 {\n    margin: calc(var(--spacing) * 2037);\n  }\n  .m-2039 {\n    margin: calc(var(--spacing) * 2039);\n  }\n  .m-2043 {\n    margin: calc(var(--spacing) * 2043);\n  }\n  .m-2046 {\n    margin: calc(var(--spacing) * 2046);\n  }\n  .m-2047 {\n    margin: calc(var(--spacing) * 2047);\n  }\n  .m-2048 {\n    margin: calc(var(--spacing) * 2048);\n  }\n  .m-2049 {\n    margin: calc(var(--spacing) * 2049);\n  }\n  .m-2050 {\n    margin: calc(var(--spacing) * 2050);\n  }\n  .m-2052 {\n    margin: calc(var(--spacing) * 2052);\n  }\n  .m-2053 {\n    margin: calc(var(--spacing) * 2053);\n  }\n  .m-2058 {\n    margin: calc(var(--spacing) * 2058);\n  }\n  .m-2059 {\n    margin: calc(var(--spacing) * 2059);\n  }\n  .m-2060 {\n    margin: calc(var(--spacing) * 2060);\n  }\n  .m-2061 {\n    margin: calc(var(--spacing) * 2061);\n  }\n  .m-2063 {\n    margin: calc(var(--spacing) * 2063);\n  }\n  .m-2064 {\n    margin: calc(var(--spacing) * 2064);\n  }\n  .m-2065 {\n    margin: calc(var(--spacing) * 2065);\n  }\n  .m-2066 {\n    margin: calc(var(--spacing) * 2066);\n  }\n  .m-2068 {\n    margin: calc(var(--spacing) * 2068);\n  }\n  .m-2070 {\n    margin: calc(var(--spacing) * 2070);\n  }\n  .m-2071 {\n    margin: calc(var(--spacing) * 2071);\n  }\n  .m-2075 {\n    margin: calc(var(--spacing) * 2075);\n  }\n  .m-2079 {\n    margin: calc(var(--spacing) * 2079);\n  }\n  .m-2081 {\n    margin: calc(var(--spacing) * 2081);\n  }\n  .m-2082 {\n    margin: calc(var(--spacing) * 2082);\n  }\n  .m-2084 {\n    margin: calc(var(--spacing) * 2084);\n  }\n  .m-2087 {\n    margin: calc(var(--spacing) * 2087);\n  }\n  .m-2088 {\n    margin: calc(var(--spacing) * 2088);\n  }\n  .m-2092 {\n    margin: calc(var(--spacing) * 2092);\n  }\n  .m-2096 {\n    margin: calc(var(--spacing) * 2096);\n  }\n  .m-2098 {\n    margin: calc(var(--spacing) * 2098);\n  }\n  .m-2101 {\n    margin: calc(var(--spacing) * 2101);\n  }\n  .m-2102 {\n    margin: calc(var(--spacing) * 2102);\n  }\n  .m-2103 {\n    margin: calc(var(--spacing) * 2103);\n  }\n  .m-2104 {\n    margin: calc(var(--spacing) * 2104);\n  }\n  .m-2105 {\n    margin: calc(var(--spacing) * 2105);\n  }\n  .m-2106 {\n    margin: calc(var(--spacing) * 2106);\n  }\n  .m-2108 {\n    margin: calc(var(--spacing) * 2108);\n  }\n  .m-2109 {\n    margin: calc(var(--spacing) * 2109);\n  }\n  .m-2110 {\n    margin: calc(var(--spacing) * 2110);\n  }\n  .m-2111 {\n    margin: calc(var(--spacing) * 2111);\n  }\n  .m-2114 {\n    margin: calc(var(--spacing) * 2114);\n  }\n  .m-2119 {\n    margin: calc(var(--spacing) * 2119);\n  }\n  .m-2123 {\n    margin: calc(var(--spacing) * 2123);\n  }\n  .m-2125 {\n    margin: calc(var(--spacing) * 2125);\n  }\n  .m-2126 {\n    margin: calc(var(--spacing) * 2126);\n  }\n  .m-2127 {\n    margin: calc(var(--spacing) * 2127);\n  }\n  .m-2130 {\n    margin: calc(var(--spacing) * 2130);\n  }\n  .m-2134 {\n    margin: calc(var(--spacing) * 2134);\n  }\n  .m-2138 {\n    margin: calc(var(--spacing) * 2138);\n  }\n  .m-2139 {\n    margin: calc(var(--spacing) * 2139);\n  }\n  .m-2141 {\n    margin: calc(var(--spacing) * 2141);\n  }\n  .m-2144 {\n    margin: calc(var(--spacing) * 2144);\n  }\n  .m-2147 {\n    margin: calc(var(--spacing) * 2147);\n  }\n  .m-2148 {\n    margin: calc(var(--spacing) * 2148);\n  }\n  .m-2150 {\n    margin: calc(var(--spacing) * 2150);\n  }\n  .m-2154 {\n    margin: calc(var(--spacing) * 2154);\n  }\n  .m-2156 {\n    margin: calc(var(--spacing) * 2156);\n  }\n  .m-2159 {\n    margin: calc(var(--spacing) * 2159);\n  }\n  .m-2160 {\n    margin: calc(var(--spacing) * 2160);\n  }\n  .m-2161 {\n    margin: calc(var(--spacing) * 2161);\n  }\n  .m-2165 {\n    margin: calc(var(--spacing) * 2165);\n  }\n  .m-2167 {\n    margin: calc(var(--spacing) * 2167);\n  }\n  .m-2171 {\n    margin: calc(var(--spacing) * 2171);\n  }\n  .m-2173 {\n    margin: calc(var(--spacing) * 2173);\n  }\n  .m-2174 {\n    margin: calc(var(--spacing) * 2174);\n  }\n  .m-2175 {\n    margin: calc(var(--spacing) * 2175);\n  }\n  .m-2176 {\n    margin: calc(var(--spacing) * 2176);\n  }\n  .m-2179 {\n    margin: calc(var(--spacing) * 2179);\n  }\n  .m-2180 {\n    margin: calc(var(--spacing) * 2180);\n  }\n  .m-2181 {\n    margin: calc(var(--spacing) * 2181);\n  }\n  .m-2185 {\n    margin: calc(var(--spacing) * 2185);\n  }\n  .m-2186 {\n    margin: calc(var(--spacing) * 2186);\n  }\n  .m-2187 {\n    margin: calc(var(--spacing) * 2187);\n  }\n  .m-2188 {\n    margin: calc(var(--spacing) * 2188);\n  }\n  .m-2189 {\n    margin: calc(var(--spacing) * 2189);\n  }\n  .m-2190 {\n    margin: calc(var(--spacing) * 2190);\n  }\n  .m-2192 {\n    margin: calc(var(--spacing) * 2192);\n  }\n  .m-2193 {\n    margin: calc(var(--spacing) * 2193);\n  }\n  .m-2194 {\n    margin: calc(var(--spacing) * 2194);\n  }\n  .m-2197 {\n    margin: calc(var(--spacing) * 2197);\n  }\n  .m-2199 {\n    margin: calc(var(--spacing) * 2199);\n  }\n  .m-2200 {\n    margin: calc(var(--spacing) * 2200);\n  }\n  .m-2201 {\n    margin: calc(var(--spacing) * 2201);\n  }\n  .m-2203 {\n    margin: calc(var(--spacing) * 2203);\n  }\n  .m-2204 {\n    margin: calc(var(--spacing) * 2204);\n  }\n  .m-2205 {\n    margin: calc(var(--spacing) * 2205);\n  }\n  .m-2208 {\n    margin: calc(var(--spacing) * 2208);\n  }\n  .m-2209 {\n    margin: calc(var(--spacing) * 2209);\n  }\n  .m-2210 {\n    margin: calc(var(--spacing) * 2210);\n  }\n  .m-2212 {\n    margin: calc(var(--spacing) * 2212);\n  }\n  .m-2213 {\n    margin: calc(var(--spacing) * 2213);\n  }\n  .m-2214 {\n    margin: calc(var(--spacing) * 2214);\n  }\n  .m-2216 {\n    margin: calc(var(--spacing) * 2216);\n  }\n  .m-2219 {\n    margin: calc(var(--spacing) * 2219);\n  }\n  .m-2220 {\n    margin: calc(var(--spacing) * 2220);\n  }\n  .m-2221 {\n    margin: calc(var(--spacing) * 2221);\n  }\n  .m-2222 {\n    margin: calc(var(--spacing) * 2222);\n  }\n  .m-2225 {\n    margin: calc(var(--spacing) * 2225);\n  }\n  .m-2230 {\n    margin: calc(var(--spacing) * 2230);\n  }\n  .m-2232 {\n    margin: calc(var(--spacing) * 2232);\n  }\n  .m-2233 {\n    margin: calc(var(--spacing) * 2233);\n  }\n  .m-2238 {\n    margin: calc(var(--spacing) * 2238);\n  }\n  .m-2241 {\n    margin: calc(var(--spacing) * 2241);\n  }\n  .m-2243 {\n    margin: calc(var(--spacing) * 2243);\n  }\n  .m-2244 {\n    margin: calc(var(--spacing) * 2244);\n  }\n  .m-2245 {\n    margin: calc(var(--spacing) * 2245);\n  }\n  .m-2247 {\n    margin: calc(var(--spacing) * 2247);\n  }\n  .m-2248 {\n    margin: calc(var(--spacing) * 2248);\n  }\n  .m-2250 {\n    margin: calc(var(--spacing) * 2250);\n  }\n  .m-2252 {\n    margin: calc(var(--spacing) * 2252);\n  }\n  .m-2253 {\n    margin: calc(var(--spacing) * 2253);\n  }\n  .m-2254 {\n    margin: calc(var(--spacing) * 2254);\n  }\n  .m-2255 {\n    margin: calc(var(--spacing) * 2255);\n  }\n  .m-2257 {\n    margin: calc(var(--spacing) * 2257);\n  }\n  .m-2260 {\n    margin: calc(var(--spacing) * 2260);\n  }\n  .m-2263 {\n    margin: calc(var(--spacing) * 2263);\n  }\n  .m-2265 {\n    margin: calc(var(--spacing) * 2265);\n  }\n  .m-2266 {\n    margin: calc(var(--spacing) * 2266);\n  }\n  .m-2268 {\n    margin: calc(var(--spacing) * 2268);\n  }\n  .m-2269 {\n    margin: calc(var(--spacing) * 2269);\n  }\n  .m-2270 {\n    margin: calc(var(--spacing) * 2270);\n  }\n  .m-2274 {\n    margin: calc(var(--spacing) * 2274);\n  }\n  .m-2275 {\n    margin: calc(var(--spacing) * 2275);\n  }\n  .m-2279 {\n    margin: calc(var(--spacing) * 2279);\n  }\n  .m-2280 {\n    margin: calc(var(--spacing) * 2280);\n  }\n  .m-2285 {\n    margin: calc(var(--spacing) * 2285);\n  }\n  .m-2290 {\n    margin: calc(var(--spacing) * 2290);\n  }\n  .m-2291 {\n    margin: calc(var(--spacing) * 2291);\n  }\n  .m-2295 {\n    margin: calc(var(--spacing) * 2295);\n  }\n  .m-2297 {\n    margin: calc(var(--spacing) * 2297);\n  }\n  .m-2301 {\n    margin: calc(var(--spacing) * 2301);\n  }\n  .m-2302 {\n    margin: calc(var(--spacing) * 2302);\n  }\n  .m-2304 {\n    margin: calc(var(--spacing) * 2304);\n  }\n  .m-2305 {\n    margin: calc(var(--spacing) * 2305);\n  }\n  .m-2306 {\n    margin: calc(var(--spacing) * 2306);\n  }\n  .m-2307 {\n    margin: calc(var(--spacing) * 2307);\n  }\n  .m-2308 {\n    margin: calc(var(--spacing) * 2308);\n  }\n  .m-2309 {\n    margin: calc(var(--spacing) * 2309);\n  }\n  .m-2312 {\n    margin: calc(var(--spacing) * 2312);\n  }\n  .m-2313 {\n    margin: calc(var(--spacing) * 2313);\n  }\n  .m-2317 {\n    margin: calc(var(--spacing) * 2317);\n  }\n  .m-2320 {\n    margin: calc(var(--spacing) * 2320);\n  }\n  .m-2325 {\n    margin: calc(var(--spacing) * 2325);\n  }\n  .m-2327 {\n    margin: calc(var(--spacing) * 2327);\n  }\n  .m-2328 {\n    margin: calc(var(--spacing) * 2328);\n  }\n  .m-2329 {\n    margin: calc(var(--spacing) * 2329);\n  }\n  .m-2330 {\n    margin: calc(var(--spacing) * 2330);\n  }\n  .m-2332 {\n    margin: calc(var(--spacing) * 2332);\n  }\n  .m-2334 {\n    margin: calc(var(--spacing) * 2334);\n  }\n  .m-2338 {\n    margin: calc(var(--spacing) * 2338);\n  }\n  .m-2339 {\n    margin: calc(var(--spacing) * 2339);\n  }\n  .m-2340 {\n    margin: calc(var(--spacing) * 2340);\n  }\n  .m-2344 {\n    margin: calc(var(--spacing) * 2344);\n  }\n  .m-2347 {\n    margin: calc(var(--spacing) * 2347);\n  }\n  .m-2350 {\n    margin: calc(var(--spacing) * 2350);\n  }\n  .m-2352 {\n    margin: calc(var(--spacing) * 2352);\n  }\n  .m-2353 {\n    margin: calc(var(--spacing) * 2353);\n  }\n  .m-2354 {\n    margin: calc(var(--spacing) * 2354);\n  }\n  .m-2360 {\n    margin: calc(var(--spacing) * 2360);\n  }\n  .m-2361 {\n    margin: calc(var(--spacing) * 2361);\n  }\n  .m-2363 {\n    margin: calc(var(--spacing) * 2363);\n  }\n  .m-2364 {\n    margin: calc(var(--spacing) * 2364);\n  }\n  .m-2366 {\n    margin: calc(var(--spacing) * 2366);\n  }\n  .m-2368 {\n    margin: calc(var(--spacing) * 2368);\n  }\n  .m-2370 {\n    margin: calc(var(--spacing) * 2370);\n  }\n  .m-2372 {\n    margin: calc(var(--spacing) * 2372);\n  }\n  .m-2374 {\n    margin: calc(var(--spacing) * 2374);\n  }\n  .m-2375 {\n    margin: calc(var(--spacing) * 2375);\n  }\n  .m-2378 {\n    margin: calc(var(--spacing) * 2378);\n  }\n  .m-2379 {\n    margin: calc(var(--spacing) * 2379);\n  }\n  .m-2380 {\n    margin: calc(var(--spacing) * 2380);\n  }\n  .m-2383 {\n    margin: calc(var(--spacing) * 2383);\n  }\n  .m-2384 {\n    margin: calc(var(--spacing) * 2384);\n  }\n  .m-2385 {\n    margin: calc(var(--spacing) * 2385);\n  }\n  .m-2386 {\n    margin: calc(var(--spacing) * 2386);\n  }\n  .m-2390 {\n    margin: calc(var(--spacing) * 2390);\n  }\n  .m-2393 {\n    margin: calc(var(--spacing) * 2393);\n  }\n  .m-2395 {\n    margin: calc(var(--spacing) * 2395);\n  }\n  .m-2398 {\n    margin: calc(var(--spacing) * 2398);\n  }\n  .m-2399 {\n    margin: calc(var(--spacing) * 2399);\n  }\n  .m-2400 {\n    margin: calc(var(--spacing) * 2400);\n  }\n  .m-2401 {\n    margin: calc(var(--spacing) * 2401);\n  }\n  .m-2403 {\n    margin: calc(var(--spacing) * 2403);\n  }\n  .m-2404 {\n    margin: calc(var(--spacing) * 2404);\n  }\n  .m-2408 {\n    margin: calc(var(--spacing) * 2408);\n  }\n  .m-2409 {\n    margin: calc(var(--spacing) * 2409);\n  }\n  .m-2410 {\n    margin: calc(var(--spacing) * 2410);\n  }\n  .m-2412 {\n    margin: calc(var(--spacing) * 2412);\n  }\n  .m-2419 {\n    margin: calc(var(--spacing) * 2419);\n  }\n  .m-2424 {\n    margin: calc(var(--spacing) * 2424);\n  }\n  .m-2426 {\n    margin: calc(var(--spacing) * 2426);\n  }\n  .m-2427 {\n    margin: calc(var(--spacing) * 2427);\n  }\n  .m-2428 {\n    margin: calc(var(--spacing) * 2428);\n  }\n  .m-2432 {\n    margin: calc(var(--spacing) * 2432);\n  }\n  .m-2435 {\n    margin: calc(var(--spacing) * 2435);\n  }\n  .m-2437 {\n    margin: calc(var(--spacing) * 2437);\n  }\n  .m-2439 {\n    margin: calc(var(--spacing) * 2439);\n  }\n  .m-2440 {\n    margin: calc(var(--spacing) * 2440);\n  }\n  .m-2441 {\n    margin: calc(var(--spacing) * 2441);\n  }\n  .m-2442 {\n    margin: calc(var(--spacing) * 2442);\n  }\n  .m-2444 {\n    margin: calc(var(--spacing) * 2444);\n  }\n  .m-2447 {\n    margin: calc(var(--spacing) * 2447);\n  }\n  .m-2450 {\n    margin: calc(var(--spacing) * 2450);\n  }\n  .m-2451 {\n    margin: calc(var(--spacing) * 2451);\n  }\n  .m-2453 {\n    margin: calc(var(--spacing) * 2453);\n  }\n  .m-2457 {\n    margin: calc(var(--spacing) * 2457);\n  }\n  .m-2458 {\n    margin: calc(var(--spacing) * 2458);\n  }\n  .m-2461 {\n    margin: calc(var(--spacing) * 2461);\n  }\n  .m-2462 {\n    margin: calc(var(--spacing) * 2462);\n  }\n  .m-2464 {\n    margin: calc(var(--spacing) * 2464);\n  }\n  .m-2466 {\n    margin: calc(var(--spacing) * 2466);\n  }\n  .m-2467 {\n    margin: calc(var(--spacing) * 2467);\n  }\n  .m-2468 {\n    margin: calc(var(--spacing) * 2468);\n  }\n  .m-2470 {\n    margin: calc(var(--spacing) * 2470);\n  }\n  .m-2476 {\n    margin: calc(var(--spacing) * 2476);\n  }\n  .m-2477 {\n    margin: calc(var(--spacing) * 2477);\n  }\n  .m-2484 {\n    margin: calc(var(--spacing) * 2484);\n  }\n  .m-2485 {\n    margin: calc(var(--spacing) * 2485);\n  }\n  .m-2486 {\n    margin: calc(var(--spacing) * 2486);\n  }\n  .m-2488 {\n    margin: calc(var(--spacing) * 2488);\n  }\n  .m-2490 {\n    margin: calc(var(--spacing) * 2490);\n  }\n  .m-2492 {\n    margin: calc(var(--spacing) * 2492);\n  }\n  .m-2493 {\n    margin: calc(var(--spacing) * 2493);\n  }\n  .m-2495 {\n    margin: calc(var(--spacing) * 2495);\n  }\n  .m-2496 {\n    margin: calc(var(--spacing) * 2496);\n  }\n  .m-2497 {\n    margin: calc(var(--spacing) * 2497);\n  }\n  .m-2500 {\n    margin: calc(var(--spacing) * 2500);\n  }\n  .m-2502 {\n    margin: calc(var(--spacing) * 2502);\n  }\n  .m-2504 {\n    margin: calc(var(--spacing) * 2504);\n  }\n  .m-2505 {\n    margin: calc(var(--spacing) * 2505);\n  }\n  .m-2510 {\n    margin: calc(var(--spacing) * 2510);\n  }\n  .m-2513 {\n    margin: calc(var(--spacing) * 2513);\n  }\n  .m-2514 {\n    margin: calc(var(--spacing) * 2514);\n  }\n  .m-2516 {\n    margin: calc(var(--spacing) * 2516);\n  }\n  .m-2517 {\n    margin: calc(var(--spacing) * 2517);\n  }\n  .m-2519 {\n    margin: calc(var(--spacing) * 2519);\n  }\n  .m-2522 {\n    margin: calc(var(--spacing) * 2522);\n  }\n  .m-2527 {\n    margin: calc(var(--spacing) * 2527);\n  }\n  .m-2531 {\n    margin: calc(var(--spacing) * 2531);\n  }\n  .m-2532 {\n    margin: calc(var(--spacing) * 2532);\n  }\n  .m-2533 {\n    margin: calc(var(--spacing) * 2533);\n  }\n  .m-2536 {\n    margin: calc(var(--spacing) * 2536);\n  }\n  .m-2539 {\n    margin: calc(var(--spacing) * 2539);\n  }\n  .m-2542 {\n    margin: calc(var(--spacing) * 2542);\n  }\n  .m-2547 {\n    margin: calc(var(--spacing) * 2547);\n  }\n  .m-2550 {\n    margin: calc(var(--spacing) * 2550);\n  }\n  .m-2553 {\n    margin: calc(var(--spacing) * 2553);\n  }\n  .m-2555 {\n    margin: calc(var(--spacing) * 2555);\n  }\n  .m-2556 {\n    margin: calc(var(--spacing) * 2556);\n  }\n  .m-2557 {\n    margin: calc(var(--spacing) * 2557);\n  }\n  .m-2558 {\n    margin: calc(var(--spacing) * 2558);\n  }\n  .m-2564 {\n    margin: calc(var(--spacing) * 2564);\n  }\n  .m-2565 {\n    margin: calc(var(--spacing) * 2565);\n  }\n  .m-2568 {\n    margin: calc(var(--spacing) * 2568);\n  }\n  .m-2569 {\n    margin: calc(var(--spacing) * 2569);\n  }\n  .m-2571 {\n    margin: calc(var(--spacing) * 2571);\n  }\n  .m-2572 {\n    margin: calc(var(--spacing) * 2572);\n  }\n  .m-2573 {\n    margin: calc(var(--spacing) * 2573);\n  }\n  .m-2575 {\n    margin: calc(var(--spacing) * 2575);\n  }\n  .m-2576 {\n    margin: calc(var(--spacing) * 2576);\n  }\n  .m-2578 {\n    margin: calc(var(--spacing) * 2578);\n  }\n  .m-2580 {\n    margin: calc(var(--spacing) * 2580);\n  }\n  .m-2583 {\n    margin: calc(var(--spacing) * 2583);\n  }\n  .m-2587 {\n    margin: calc(var(--spacing) * 2587);\n  }\n  .m-2590 {\n    margin: calc(var(--spacing) * 2590);\n  }\n  .m-2591 {\n    margin: calc(var(--spacing) * 2591);\n  }\n  .m-2592 {\n    margin: calc(var(--spacing) * 2592);\n  }\n  .m-2594 {\n    margin: calc(var(--spacing) * 2594);\n  }\n  .m-2597 {\n    margin: calc(var(--spacing) * 2597);\n  }\n  .m-2598 {\n    margin: calc(var(--spacing) * 2598);\n  }\n  .m-2599 {\n    margin: calc(var(--spacing) * 2599);\n  }\n  .m-2600 {\n    margin: calc(var(--spacing) * 2600);\n  }\n  .m-2604 {\n    margin: calc(var(--spacing) * 2604);\n  }\n  .m-2605 {\n    margin: calc(var(--spacing) * 2605);\n  }\n  .m-2606 {\n    margin: calc(var(--spacing) * 2606);\n  }\n  .m-2612 {\n    margin: calc(var(--spacing) * 2612);\n  }\n  .m-2614 {\n    margin: calc(var(--spacing) * 2614);\n  }\n  .m-2615 {\n    margin: calc(var(--spacing) * 2615);\n  }\n  .m-2616 {\n    margin: calc(var(--spacing) * 2616);\n  }\n  .m-2617 {\n    margin: calc(var(--spacing) * 2617);\n  }\n  .m-2619 {\n    margin: calc(var(--spacing) * 2619);\n  }\n  .m-2621 {\n    margin: calc(var(--spacing) * 2621);\n  }\n  .m-2623 {\n    margin: calc(var(--spacing) * 2623);\n  }\n  .m-2624 {\n    margin: calc(var(--spacing) * 2624);\n  }\n  .m-2627 {\n    margin: calc(var(--spacing) * 2627);\n  }\n  .m-2628 {\n    margin: calc(var(--spacing) * 2628);\n  }\n  .m-2629 {\n    margin: calc(var(--spacing) * 2629);\n  }\n  .m-2630 {\n    margin: calc(var(--spacing) * 2630);\n  }\n  .m-2632 {\n    margin: calc(var(--spacing) * 2632);\n  }\n  .m-2634 {\n    margin: calc(var(--spacing) * 2634);\n  }\n  .m-2635 {\n    margin: calc(var(--spacing) * 2635);\n  }\n  .m-2636 {\n    margin: calc(var(--spacing) * 2636);\n  }\n  .m-2638 {\n    margin: calc(var(--spacing) * 2638);\n  }\n  .m-2639 {\n    margin: calc(var(--spacing) * 2639);\n  }\n  .m-2641 {\n    margin: calc(var(--spacing) * 2641);\n  }\n  .m-2643 {\n    margin: calc(var(--spacing) * 2643);\n  }\n  .m-2644 {\n    margin: calc(var(--spacing) * 2644);\n  }\n  .m-2647 {\n    margin: calc(var(--spacing) * 2647);\n  }\n  .m-2652 {\n    margin: calc(var(--spacing) * 2652);\n  }\n  .m-2655 {\n    margin: calc(var(--spacing) * 2655);\n  }\n  .m-2657 {\n    margin: calc(var(--spacing) * 2657);\n  }\n  .m-2658 {\n    margin: calc(var(--spacing) * 2658);\n  }\n  .m-2665 {\n    margin: calc(var(--spacing) * 2665);\n  }\n  .m-2666 {\n    margin: calc(var(--spacing) * 2666);\n  }\n  .m-2670 {\n    margin: calc(var(--spacing) * 2670);\n  }\n  .m-2675 {\n    margin: calc(var(--spacing) * 2675);\n  }\n  .m-2676 {\n    margin: calc(var(--spacing) * 2676);\n  }\n  .m-2677 {\n    margin: calc(var(--spacing) * 2677);\n  }\n  .m-2678 {\n    margin: calc(var(--spacing) * 2678);\n  }\n  .m-2680 {\n    margin: calc(var(--spacing) * 2680);\n  }\n  .m-2681 {\n    margin: calc(var(--spacing) * 2681);\n  }\n  .m-2683 {\n    margin: calc(var(--spacing) * 2683);\n  }\n  .m-2685 {\n    margin: calc(var(--spacing) * 2685);\n  }\n  .m-2686 {\n    margin: calc(var(--spacing) * 2686);\n  }\n  .m-2690 {\n    margin: calc(var(--spacing) * 2690);\n  }\n  .m-2695 {\n    margin: calc(var(--spacing) * 2695);\n  }\n  .m-2696 {\n    margin: calc(var(--spacing) * 2696);\n  }\n  .m-2697 {\n    margin: calc(var(--spacing) * 2697);\n  }\n  .m-2698 {\n    margin: calc(var(--spacing) * 2698);\n  }\n  .m-2699 {\n    margin: calc(var(--spacing) * 2699);\n  }\n  .m-2700 {\n    margin: calc(var(--spacing) * 2700);\n  }\n  .m-2702 {\n    margin: calc(var(--spacing) * 2702);\n  }\n  .m-2704 {\n    margin: calc(var(--spacing) * 2704);\n  }\n  .m-2706 {\n    margin: calc(var(--spacing) * 2706);\n  }\n  .m-2710 {\n    margin: calc(var(--spacing) * 2710);\n  }\n  .m-2715 {\n    margin: calc(var(--spacing) * 2715);\n  }\n  .m-2718 {\n    margin: calc(var(--spacing) * 2718);\n  }\n  .m-2719 {\n    margin: calc(var(--spacing) * 2719);\n  }\n  .m-2721 {\n    margin: calc(var(--spacing) * 2721);\n  }\n  .m-2724 {\n    margin: calc(var(--spacing) * 2724);\n  }\n  .m-2725 {\n    margin: calc(var(--spacing) * 2725);\n  }\n  .m-2727 {\n    margin: calc(var(--spacing) * 2727);\n  }\n  .m-2728 {\n    margin: calc(var(--spacing) * 2728);\n  }\n  .m-2729 {\n    margin: calc(var(--spacing) * 2729);\n  }\n  .m-2730 {\n    margin: calc(var(--spacing) * 2730);\n  }\n  .m-2732 {\n    margin: calc(var(--spacing) * 2732);\n  }\n  .m-2733 {\n    margin: calc(var(--spacing) * 2733);\n  }\n  .m-2734 {\n    margin: calc(var(--spacing) * 2734);\n  }\n  .m-2737 {\n    margin: calc(var(--spacing) * 2737);\n  }\n  .m-2738 {\n    margin: calc(var(--spacing) * 2738);\n  }\n  .m-2739 {\n    margin: calc(var(--spacing) * 2739);\n  }\n  .m-2740 {\n    margin: calc(var(--spacing) * 2740);\n  }\n  .m-2747 {\n    margin: calc(var(--spacing) * 2747);\n  }\n  .m-2751 {\n    margin: calc(var(--spacing) * 2751);\n  }\n  .m-2753 {\n    margin: calc(var(--spacing) * 2753);\n  }\n  .m-2754 {\n    margin: calc(var(--spacing) * 2754);\n  }\n  .m-2760 {\n    margin: calc(var(--spacing) * 2760);\n  }\n  .m-2767 {\n    margin: calc(var(--spacing) * 2767);\n  }\n  .m-2768 {\n    margin: calc(var(--spacing) * 2768);\n  }\n  .m-2769 {\n    margin: calc(var(--spacing) * 2769);\n  }\n  .m-2770 {\n    margin: calc(var(--spacing) * 2770);\n  }\n  .m-2771 {\n    margin: calc(var(--spacing) * 2771);\n  }\n  .m-2773 {\n    margin: calc(var(--spacing) * 2773);\n  }\n  .m-2774 {\n    margin: calc(var(--spacing) * 2774);\n  }\n  .m-2775 {\n    margin: calc(var(--spacing) * 2775);\n  }\n  .m-2776 {\n    margin: calc(var(--spacing) * 2776);\n  }\n  .m-2777 {\n    margin: calc(var(--spacing) * 2777);\n  }\n  .m-2780 {\n    margin: calc(var(--spacing) * 2780);\n  }\n  .m-2783 {\n    margin: calc(var(--spacing) * 2783);\n  }\n  .m-2784 {\n    margin: calc(var(--spacing) * 2784);\n  }\n  .m-2787 {\n    margin: calc(var(--spacing) * 2787);\n  }\n  .m-2792 {\n    margin: calc(var(--spacing) * 2792);\n  }\n  .m-2795 {\n    margin: calc(var(--spacing) * 2795);\n  }\n  .m-2797 {\n    margin: calc(var(--spacing) * 2797);\n  }\n  .m-2799 {\n    margin: calc(var(--spacing) * 2799);\n  }\n  .m-2800 {\n    margin: calc(var(--spacing) * 2800);\n  }\n  .m-2802 {\n    margin: calc(var(--spacing) * 2802);\n  }\n  .m-2803 {\n    margin: calc(var(--spacing) * 2803);\n  }\n  .m-2804 {\n    margin: calc(var(--spacing) * 2804);\n  }\n  .m-2806 {\n    margin: calc(var(--spacing) * 2806);\n  }\n  .m-2809 {\n    margin: calc(var(--spacing) * 2809);\n  }\n  .m-2811 {\n    margin: calc(var(--spacing) * 2811);\n  }\n  .m-2812 {\n    margin: calc(var(--spacing) * 2812);\n  }\n  .m-2817 {\n    margin: calc(var(--spacing) * 2817);\n  }\n  .m-2820 {\n    margin: calc(var(--spacing) * 2820);\n  }\n  .m-2822 {\n    margin: calc(var(--spacing) * 2822);\n  }\n  .m-2828 {\n    margin: calc(var(--spacing) * 2828);\n  }\n  .m-2829 {\n    margin: calc(var(--spacing) * 2829);\n  }\n  .m-2830 {\n    margin: calc(var(--spacing) * 2830);\n  }\n  .m-2831 {\n    margin: calc(var(--spacing) * 2831);\n  }\n  .m-2832 {\n    margin: calc(var(--spacing) * 2832);\n  }\n  .m-2835 {\n    margin: calc(var(--spacing) * 2835);\n  }\n  .m-2838 {\n    margin: calc(var(--spacing) * 2838);\n  }\n  .m-2839 {\n    margin: calc(var(--spacing) * 2839);\n  }\n  .m-2843 {\n    margin: calc(var(--spacing) * 2843);\n  }\n  .m-2847 {\n    margin: calc(var(--spacing) * 2847);\n  }\n  .m-2848 {\n    margin: calc(var(--spacing) * 2848);\n  }\n  .m-2852 {\n    margin: calc(var(--spacing) * 2852);\n  }\n  .m-2853 {\n    margin: calc(var(--spacing) * 2853);\n  }\n  .m-2855 {\n    margin: calc(var(--spacing) * 2855);\n  }\n  .m-2857 {\n    margin: calc(var(--spacing) * 2857);\n  }\n  .m-2858 {\n    margin: calc(var(--spacing) * 2858);\n  }\n  .m-2866 {\n    margin: calc(var(--spacing) * 2866);\n  }\n  .m-2867 {\n    margin: calc(var(--spacing) * 2867);\n  }\n  .m-2868 {\n    margin: calc(var(--spacing) * 2868);\n  }\n  .m-2871 {\n    margin: calc(var(--spacing) * 2871);\n  }\n  .m-2875 {\n    margin: calc(var(--spacing) * 2875);\n  }\n  .m-2876 {\n    margin: calc(var(--spacing) * 2876);\n  }\n  .m-2877 {\n    margin: calc(var(--spacing) * 2877);\n  }\n  .m-2878 {\n    margin: calc(var(--spacing) * 2878);\n  }\n  .m-2879 {\n    margin: calc(var(--spacing) * 2879);\n  }\n  .m-2880 {\n    margin: calc(var(--spacing) * 2880);\n  }\n  .m-2885 {\n    margin: calc(var(--spacing) * 2885);\n  }\n  .m-2890 {\n    margin: calc(var(--spacing) * 2890);\n  }\n  .m-2891 {\n    margin: calc(var(--spacing) * 2891);\n  }\n  .m-2892 {\n    margin: calc(var(--spacing) * 2892);\n  }\n  .m-2895 {\n    margin: calc(var(--spacing) * 2895);\n  }\n  .m-2896 {\n    margin: calc(var(--spacing) * 2896);\n  }\n  .m-2899 {\n    margin: calc(var(--spacing) * 2899);\n  }\n  .m-2900 {\n    margin: calc(var(--spacing) * 2900);\n  }\n  .m-2901 {\n    margin: calc(var(--spacing) * 2901);\n  }\n  .m-2906 {\n    margin: calc(var(--spacing) * 2906);\n  }\n  .m-2909 {\n    margin: calc(var(--spacing) * 2909);\n  }\n  .m-2912 {\n    margin: calc(var(--spacing) * 2912);\n  }\n  .m-2913 {\n    margin: calc(var(--spacing) * 2913);\n  }\n  .m-2915 {\n    margin: calc(var(--spacing) * 2915);\n  }\n  .m-2916 {\n    margin: calc(var(--spacing) * 2916);\n  }\n  .m-2917 {\n    margin: calc(var(--spacing) * 2917);\n  }\n  .m-2919 {\n    margin: calc(var(--spacing) * 2919);\n  }\n  .m-2920 {\n    margin: calc(var(--spacing) * 2920);\n  }\n  .m-2922 {\n    margin: calc(var(--spacing) * 2922);\n  }\n  .m-2924 {\n    margin: calc(var(--spacing) * 2924);\n  }\n  .m-2925 {\n    margin: calc(var(--spacing) * 2925);\n  }\n  .m-2926 {\n    margin: calc(var(--spacing) * 2926);\n  }\n  .m-2927 {\n    margin: calc(var(--spacing) * 2927);\n  }\n  .m-2928 {\n    margin: calc(var(--spacing) * 2928);\n  }\n  .m-2936 {\n    margin: calc(var(--spacing) * 2936);\n  }\n  .m-2937 {\n    margin: calc(var(--spacing) * 2937);\n  }\n  .m-2947 {\n    margin: calc(var(--spacing) * 2947);\n  }\n  .m-2949 {\n    margin: calc(var(--spacing) * 2949);\n  }\n  .m-2953 {\n    margin: calc(var(--spacing) * 2953);\n  }\n  .m-2956 {\n    margin: calc(var(--spacing) * 2956);\n  }\n  .m-2959 {\n    margin: calc(var(--spacing) * 2959);\n  }\n  .m-2961 {\n    margin: calc(var(--spacing) * 2961);\n  }\n  .m-2968 {\n    margin: calc(var(--spacing) * 2968);\n  }\n  .m-2969 {\n    margin: calc(var(--spacing) * 2969);\n  }\n  .m-2971 {\n    margin: calc(var(--spacing) * 2971);\n  }\n  .m-2972 {\n    margin: calc(var(--spacing) * 2972);\n  }\n  .m-2973 {\n    margin: calc(var(--spacing) * 2973);\n  }\n  .m-2979 {\n    margin: calc(var(--spacing) * 2979);\n  }\n  .m-2980 {\n    margin: calc(var(--spacing) * 2980);\n  }\n  .m-2981 {\n    margin: calc(var(--spacing) * 2981);\n  }\n  .m-2982 {\n    margin: calc(var(--spacing) * 2982);\n  }\n  .m-2986 {\n    margin: calc(var(--spacing) * 2986);\n  }\n  .m-2988 {\n    margin: calc(var(--spacing) * 2988);\n  }\n  .m-2989 {\n    margin: calc(var(--spacing) * 2989);\n  }\n  .m-2990 {\n    margin: calc(var(--spacing) * 2990);\n  }\n  .m-2991 {\n    margin: calc(var(--spacing) * 2991);\n  }\n  .m-2994 {\n    margin: calc(var(--spacing) * 2994);\n  }\n  .m-2995 {\n    margin: calc(var(--spacing) * 2995);\n  }\n  .m-2999 {\n    margin: calc(var(--spacing) * 2999);\n  }\n  .m-3001 {\n    margin: calc(var(--spacing) * 3001);\n  }\n  .m-3002 {\n    margin: calc(var(--spacing) * 3002);\n  }\n  .m-3004 {\n    margin: calc(var(--spacing) * 3004);\n  }\n  .m-3007 {\n    margin: calc(var(--spacing) * 3007);\n  }\n  .m-3008 {\n    margin: calc(var(--spacing) * 3008);\n  }\n  .m-3009 {\n    margin: calc(var(--spacing) * 3009);\n  }\n  .m-3010 {\n    margin: calc(var(--spacing) * 3010);\n  }\n  .m-3011 {\n    margin: calc(var(--spacing) * 3011);\n  }\n  .m-3013 {\n    margin: calc(var(--spacing) * 3013);\n  }\n  .m-3015 {\n    margin: calc(var(--spacing) * 3015);\n  }\n  .m-3016 {\n    margin: calc(var(--spacing) * 3016);\n  }\n  .m-3017 {\n    margin: calc(var(--spacing) * 3017);\n  }\n  .m-3018 {\n    margin: calc(var(--spacing) * 3018);\n  }\n  .m-3021 {\n    margin: calc(var(--spacing) * 3021);\n  }\n  .m-3024 {\n    margin: calc(var(--spacing) * 3024);\n  }\n  .m-3027 {\n    margin: calc(var(--spacing) * 3027);\n  }\n  .m-3029 {\n    margin: calc(var(--spacing) * 3029);\n  }\n  .m-3043 {\n    margin: calc(var(--spacing) * 3043);\n  }\n  .m-3044 {\n    margin: calc(var(--spacing) * 3044);\n  }\n  .m-3045 {\n    margin: calc(var(--spacing) * 3045);\n  }\n  .m-3049 {\n    margin: calc(var(--spacing) * 3049);\n  }\n  .m-3050 {\n    margin: calc(var(--spacing) * 3050);\n  }\n  .m-3053 {\n    margin: calc(var(--spacing) * 3053);\n  }\n  .m-3055 {\n    margin: calc(var(--spacing) * 3055);\n  }\n  .m-3059 {\n    margin: calc(var(--spacing) * 3059);\n  }\n  .m-3061 {\n    margin: calc(var(--spacing) * 3061);\n  }\n  .m-3064 {\n    margin: calc(var(--spacing) * 3064);\n  }\n  .m-3068 {\n    margin: calc(var(--spacing) * 3068);\n  }\n  .m-3069 {\n    margin: calc(var(--spacing) * 3069);\n  }\n  .m-3070 {\n    margin: calc(var(--spacing) * 3070);\n  }\n  .m-3074 {\n    margin: calc(var(--spacing) * 3074);\n  }\n  .m-3075 {\n    margin: calc(var(--spacing) * 3075);\n  }\n  .m-3077 {\n    margin: calc(var(--spacing) * 3077);\n  }\n  .m-3078 {\n    margin: calc(var(--spacing) * 3078);\n  }\n  .m-3079 {\n    margin: calc(var(--spacing) * 3079);\n  }\n  .m-3080 {\n    margin: calc(var(--spacing) * 3080);\n  }\n  .m-3081 {\n    margin: calc(var(--spacing) * 3081);\n  }\n  .m-3086 {\n    margin: calc(var(--spacing) * 3086);\n  }\n  .m-3090 {\n    margin: calc(var(--spacing) * 3090);\n  }\n  .m-3092 {\n    margin: calc(var(--spacing) * 3092);\n  }\n  .m-3093 {\n    margin: calc(var(--spacing) * 3093);\n  }\n  .m-3095 {\n    margin: calc(var(--spacing) * 3095);\n  }\n  .m-3096 {\n    margin: calc(var(--spacing) * 3096);\n  }\n  .m-3097 {\n    margin: calc(var(--spacing) * 3097);\n  }\n  .m-3099 {\n    margin: calc(var(--spacing) * 3099);\n  }\n  .m-3103 {\n    margin: calc(var(--spacing) * 3103);\n  }\n  .m-3104 {\n    margin: calc(var(--spacing) * 3104);\n  }\n  .m-3105 {\n    margin: calc(var(--spacing) * 3105);\n  }\n  .m-3106 {\n    margin: calc(var(--spacing) * 3106);\n  }\n  .m-3108 {\n    margin: calc(var(--spacing) * 3108);\n  }\n  .m-3111 {\n    margin: calc(var(--spacing) * 3111);\n  }\n  .m-3119 {\n    margin: calc(var(--spacing) * 3119);\n  }\n  .m-3122 {\n    margin: calc(var(--spacing) * 3122);\n  }\n  .m-3123 {\n    margin: calc(var(--spacing) * 3123);\n  }\n  .m-3124 {\n    margin: calc(var(--spacing) * 3124);\n  }\n  .m-3127 {\n    margin: calc(var(--spacing) * 3127);\n  }\n  .m-3128 {\n    margin: calc(var(--spacing) * 3128);\n  }\n  .m-3130 {\n    margin: calc(var(--spacing) * 3130);\n  }\n  .m-3132 {\n    margin: calc(var(--spacing) * 3132);\n  }\n  .m-3133 {\n    margin: calc(var(--spacing) * 3133);\n  }\n  .m-3134 {\n    margin: calc(var(--spacing) * 3134);\n  }\n  .m-3135 {\n    margin: calc(var(--spacing) * 3135);\n  }\n  .m-3136 {\n    margin: calc(var(--spacing) * 3136);\n  }\n  .m-3137 {\n    margin: calc(var(--spacing) * 3137);\n  }\n  .m-3138 {\n    margin: calc(var(--spacing) * 3138);\n  }\n  .m-3146 {\n    margin: calc(var(--spacing) * 3146);\n  }\n  .m-3147 {\n    margin: calc(var(--spacing) * 3147);\n  }\n  .m-3150 {\n    margin: calc(var(--spacing) * 3150);\n  }\n  .m-3151 {\n    margin: calc(var(--spacing) * 3151);\n  }\n  .m-3152 {\n    margin: calc(var(--spacing) * 3152);\n  }\n  .m-3154 {\n    margin: calc(var(--spacing) * 3154);\n  }\n  .m-3156 {\n    margin: calc(var(--spacing) * 3156);\n  }\n  .m-3158 {\n    margin: calc(var(--spacing) * 3158);\n  }\n  .m-3160 {\n    margin: calc(var(--spacing) * 3160);\n  }\n  .m-3175 {\n    margin: calc(var(--spacing) * 3175);\n  }\n  .m-3176 {\n    margin: calc(var(--spacing) * 3176);\n  }\n  .m-3178 {\n    margin: calc(var(--spacing) * 3178);\n  }\n  .m-3179 {\n    margin: calc(var(--spacing) * 3179);\n  }\n  .m-3182 {\n    margin: calc(var(--spacing) * 3182);\n  }\n  .m-3183 {\n    margin: calc(var(--spacing) * 3183);\n  }\n  .m-3184 {\n    margin: calc(var(--spacing) * 3184);\n  }\n  .m-3185 {\n    margin: calc(var(--spacing) * 3185);\n  }\n  .m-3189 {\n    margin: calc(var(--spacing) * 3189);\n  }\n  .m-3191 {\n    margin: calc(var(--spacing) * 3191);\n  }\n  .m-3192 {\n    margin: calc(var(--spacing) * 3192);\n  }\n  .m-3194 {\n    margin: calc(var(--spacing) * 3194);\n  }\n  .m-3196 {\n    margin: calc(var(--spacing) * 3196);\n  }\n  .m-3198 {\n    margin: calc(var(--spacing) * 3198);\n  }\n  .m-3201 {\n    margin: calc(var(--spacing) * 3201);\n  }\n  .m-3206 {\n    margin: calc(var(--spacing) * 3206);\n  }\n  .m-3208 {\n    margin: calc(var(--spacing) * 3208);\n  }\n  .m-3211 {\n    margin: calc(var(--spacing) * 3211);\n  }\n  .m-3213 {\n    margin: calc(var(--spacing) * 3213);\n  }\n  .m-3216 {\n    margin: calc(var(--spacing) * 3216);\n  }\n  .m-3220 {\n    margin: calc(var(--spacing) * 3220);\n  }\n  .m-3224 {\n    margin: calc(var(--spacing) * 3224);\n  }\n  .m-3225 {\n    margin: calc(var(--spacing) * 3225);\n  }\n  .m-3226 {\n    margin: calc(var(--spacing) * 3226);\n  }\n  .m-3229 {\n    margin: calc(var(--spacing) * 3229);\n  }\n  .m-3230 {\n    margin: calc(var(--spacing) * 3230);\n  }\n  .m-3235 {\n    margin: calc(var(--spacing) * 3235);\n  }\n  .m-3236 {\n    margin: calc(var(--spacing) * 3236);\n  }\n  .m-3239 {\n    margin: calc(var(--spacing) * 3239);\n  }\n  .m-3247 {\n    margin: calc(var(--spacing) * 3247);\n  }\n  .m-3248 {\n    margin: calc(var(--spacing) * 3248);\n  }\n  .m-3252 {\n    margin: calc(var(--spacing) * 3252);\n  }\n  .m-3254 {\n    margin: calc(var(--spacing) * 3254);\n  }\n  .m-3257 {\n    margin: calc(var(--spacing) * 3257);\n  }\n  .m-3260 {\n    margin: calc(var(--spacing) * 3260);\n  }\n  .m-3262 {\n    margin: calc(var(--spacing) * 3262);\n  }\n  .m-3263 {\n    margin: calc(var(--spacing) * 3263);\n  }\n  .m-3266 {\n    margin: calc(var(--spacing) * 3266);\n  }\n  .m-3279 {\n    margin: calc(var(--spacing) * 3279);\n  }\n  .m-3280 {\n    margin: calc(var(--spacing) * 3280);\n  }\n  .m-3281 {\n    margin: calc(var(--spacing) * 3281);\n  }\n  .m-3289 {\n    margin: calc(var(--spacing) * 3289);\n  }\n  .m-3293 {\n    margin: calc(var(--spacing) * 3293);\n  }\n  .m-3300 {\n    margin: calc(var(--spacing) * 3300);\n  }\n  .m-3303 {\n    margin: calc(var(--spacing) * 3303);\n  }\n  .m-3304 {\n    margin: calc(var(--spacing) * 3304);\n  }\n  .m-3315 {\n    margin: calc(var(--spacing) * 3315);\n  }\n  .m-3317 {\n    margin: calc(var(--spacing) * 3317);\n  }\n  .m-3320 {\n    margin: calc(var(--spacing) * 3320);\n  }\n  .m-3321 {\n    margin: calc(var(--spacing) * 3321);\n  }\n  .m-3326 {\n    margin: calc(var(--spacing) * 3326);\n  }\n  .m-3330 {\n    margin: calc(var(--spacing) * 3330);\n  }\n  .m-3334 {\n    margin: calc(var(--spacing) * 3334);\n  }\n  .m-3336 {\n    margin: calc(var(--spacing) * 3336);\n  }\n  .m-3339 {\n    margin: calc(var(--spacing) * 3339);\n  }\n  .m-3341 {\n    margin: calc(var(--spacing) * 3341);\n  }\n  .m-3342 {\n    margin: calc(var(--spacing) * 3342);\n  }\n  .m-3344 {\n    margin: calc(var(--spacing) * 3344);\n  }\n  .m-3348 {\n    margin: calc(var(--spacing) * 3348);\n  }\n  .m-3353 {\n    margin: calc(var(--spacing) * 3353);\n  }\n  .m-3354 {\n    margin: calc(var(--spacing) * 3354);\n  }\n  .m-3355 {\n    margin: calc(var(--spacing) * 3355);\n  }\n  .m-3359 {\n    margin: calc(var(--spacing) * 3359);\n  }\n  .m-3362 {\n    margin: calc(var(--spacing) * 3362);\n  }\n  .m-3366 {\n    margin: calc(var(--spacing) * 3366);\n  }\n  .m-3370 {\n    margin: calc(var(--spacing) * 3370);\n  }\n  .m-3371 {\n    margin: calc(var(--spacing) * 3371);\n  }\n  .m-3372 {\n    margin: calc(var(--spacing) * 3372);\n  }\n  .m-3373 {\n    margin: calc(var(--spacing) * 3373);\n  }\n  .m-3379 {\n    margin: calc(var(--spacing) * 3379);\n  }\n  .m-3381 {\n    margin: calc(var(--spacing) * 3381);\n  }\n  .m-3384 {\n    margin: calc(var(--spacing) * 3384);\n  }\n  .m-3395 {\n    margin: calc(var(--spacing) * 3395);\n  }\n  .m-3399 {\n    margin: calc(var(--spacing) * 3399);\n  }\n  .m-3400 {\n    margin: calc(var(--spacing) * 3400);\n  }\n  .m-3401 {\n    margin: calc(var(--spacing) * 3401);\n  }\n  .m-3408 {\n    margin: calc(var(--spacing) * 3408);\n  }\n  .m-3410 {\n    margin: calc(var(--spacing) * 3410);\n  }\n  .m-3411 {\n    margin: calc(var(--spacing) * 3411);\n  }\n  .m-3414 {\n    margin: calc(var(--spacing) * 3414);\n  }\n  .m-3417 {\n    margin: calc(var(--spacing) * 3417);\n  }\n  .m-3420 {\n    margin: calc(var(--spacing) * 3420);\n  }\n  .m-3423 {\n    margin: calc(var(--spacing) * 3423);\n  }\n  .m-3425 {\n    margin: calc(var(--spacing) * 3425);\n  }\n  .m-3426 {\n    margin: calc(var(--spacing) * 3426);\n  }\n  .m-3428 {\n    margin: calc(var(--spacing) * 3428);\n  }\n  .m-3430 {\n    margin: calc(var(--spacing) * 3430);\n  }\n  .m-3431 {\n    margin: calc(var(--spacing) * 3431);\n  }\n  .m-3435 {\n    margin: calc(var(--spacing) * 3435);\n  }\n  .m-3439 {\n    margin: calc(var(--spacing) * 3439);\n  }\n  .m-3443 {\n    margin: calc(var(--spacing) * 3443);\n  }\n  .m-3446 {\n    margin: calc(var(--spacing) * 3446);\n  }\n  .m-3448 {\n    margin: calc(var(--spacing) * 3448);\n  }\n  .m-3449 {\n    margin: calc(var(--spacing) * 3449);\n  }\n  .m-3450 {\n    margin: calc(var(--spacing) * 3450);\n  }\n  .m-3451 {\n    margin: calc(var(--spacing) * 3451);\n  }\n  .m-3452 {\n    margin: calc(var(--spacing) * 3452);\n  }\n  .m-3458 {\n    margin: calc(var(--spacing) * 3458);\n  }\n  .m-3460 {\n    margin: calc(var(--spacing) * 3460);\n  }\n  .m-3461 {\n    margin: calc(var(--spacing) * 3461);\n  }\n  .m-3462 {\n    margin: calc(var(--spacing) * 3462);\n  }\n  .m-3468 {\n    margin: calc(var(--spacing) * 3468);\n  }\n  .m-3477 {\n    margin: calc(var(--spacing) * 3477);\n  }\n  .m-3479 {\n    margin: calc(var(--spacing) * 3479);\n  }\n  .m-3480 {\n    margin: calc(var(--spacing) * 3480);\n  }\n  .m-3481 {\n    margin: calc(var(--spacing) * 3481);\n  }\n  .m-3482 {\n    margin: calc(var(--spacing) * 3482);\n  }\n  .m-3483 {\n    margin: calc(var(--spacing) * 3483);\n  }\n  .m-3485 {\n    margin: calc(var(--spacing) * 3485);\n  }\n  .m-3486 {\n    margin: calc(var(--spacing) * 3486);\n  }\n  .m-3491 {\n    margin: calc(var(--spacing) * 3491);\n  }\n  .m-3495 {\n    margin: calc(var(--spacing) * 3495);\n  }\n  .m-3496 {\n    margin: calc(var(--spacing) * 3496);\n  }\n  .m-3497 {\n    margin: calc(var(--spacing) * 3497);\n  }\n  .m-3502 {\n    margin: calc(var(--spacing) * 3502);\n  }\n  .m-3503 {\n    margin: calc(var(--spacing) * 3503);\n  }\n  .m-3505 {\n    margin: calc(var(--spacing) * 3505);\n  }\n  .m-3511 {\n    margin: calc(var(--spacing) * 3511);\n  }\n  .m-3512 {\n    margin: calc(var(--spacing) * 3512);\n  }\n  .m-3514 {\n    margin: calc(var(--spacing) * 3514);\n  }\n  .m-3520 {\n    margin: calc(var(--spacing) * 3520);\n  }\n  .m-3521 {\n    margin: calc(var(--spacing) * 3521);\n  }\n  .m-3525 {\n    margin: calc(var(--spacing) * 3525);\n  }\n  .m-3528 {\n    margin: calc(var(--spacing) * 3528);\n  }\n  .m-3529 {\n    margin: calc(var(--spacing) * 3529);\n  }\n  .m-3532 {\n    margin: calc(var(--spacing) * 3532);\n  }\n  .m-3534 {\n    margin: calc(var(--spacing) * 3534);\n  }\n  .m-3536 {\n    margin: calc(var(--spacing) * 3536);\n  }\n  .m-3540 {\n    margin: calc(var(--spacing) * 3540);\n  }\n  .m-3542 {\n    margin: calc(var(--spacing) * 3542);\n  }\n  .m-3550 {\n    margin: calc(var(--spacing) * 3550);\n  }\n  .m-3551 {\n    margin: calc(var(--spacing) * 3551);\n  }\n  .m-3552 {\n    margin: calc(var(--spacing) * 3552);\n  }\n  .m-3553 {\n    margin: calc(var(--spacing) * 3553);\n  }\n  .m-3555 {\n    margin: calc(var(--spacing) * 3555);\n  }\n  .m-3556 {\n    margin: calc(var(--spacing) * 3556);\n  }\n  .m-3557 {\n    margin: calc(var(--spacing) * 3557);\n  }\n  .m-3558 {\n    margin: calc(var(--spacing) * 3558);\n  }\n  .m-3559 {\n    margin: calc(var(--spacing) * 3559);\n  }\n  .m-3562 {\n    margin: calc(var(--spacing) * 3562);\n  }\n  .m-3565 {\n    margin: calc(var(--spacing) * 3565);\n  }\n  .m-3566 {\n    margin: calc(var(--spacing) * 3566);\n  }\n  .m-3567 {\n    margin: calc(var(--spacing) * 3567);\n  }\n  .m-3568 {\n    margin: calc(var(--spacing) * 3568);\n  }\n  .m-3569 {\n    margin: calc(var(--spacing) * 3569);\n  }\n  .m-3570 {\n    margin: calc(var(--spacing) * 3570);\n  }\n  .m-3571 {\n    margin: calc(var(--spacing) * 3571);\n  }\n  .m-3573 {\n    margin: calc(var(--spacing) * 3573);\n  }\n  .m-3574 {\n    margin: calc(var(--spacing) * 3574);\n  }\n  .m-3575 {\n    margin: calc(var(--spacing) * 3575);\n  }\n  .m-3578 {\n    margin: calc(var(--spacing) * 3578);\n  }\n  .m-3581 {\n    margin: calc(var(--spacing) * 3581);\n  }\n  .m-3585 {\n    margin: calc(var(--spacing) * 3585);\n  }\n  .m-3587 {\n    margin: calc(var(--spacing) * 3587);\n  }\n  .m-3589 {\n    margin: calc(var(--spacing) * 3589);\n  }\n  .m-3590 {\n    margin: calc(var(--spacing) * 3590);\n  }\n  .m-3595 {\n    margin: calc(var(--spacing) * 3595);\n  }\n  .m-3604 {\n    margin: calc(var(--spacing) * 3604);\n  }\n  .m-3605 {\n    margin: calc(var(--spacing) * 3605);\n  }\n  .m-3606 {\n    margin: calc(var(--spacing) * 3606);\n  }\n  .m-3608 {\n    margin: calc(var(--spacing) * 3608);\n  }\n  .m-3616 {\n    margin: calc(var(--spacing) * 3616);\n  }\n  .m-3618 {\n    margin: calc(var(--spacing) * 3618);\n  }\n  .m-3619 {\n    margin: calc(var(--spacing) * 3619);\n  }\n  .m-3621 {\n    margin: calc(var(--spacing) * 3621);\n  }\n  .m-3622 {\n    margin: calc(var(--spacing) * 3622);\n  }\n  .m-3626 {\n    margin: calc(var(--spacing) * 3626);\n  }\n  .m-3627 {\n    margin: calc(var(--spacing) * 3627);\n  }\n  .m-3631 {\n    margin: calc(var(--spacing) * 3631);\n  }\n  .m-3634 {\n    margin: calc(var(--spacing) * 3634);\n  }\n  .m-3637 {\n    margin: calc(var(--spacing) * 3637);\n  }\n  .m-3639 {\n    margin: calc(var(--spacing) * 3639);\n  }\n  .m-3642 {\n    margin: calc(var(--spacing) * 3642);\n  }\n  .m-3643 {\n    margin: calc(var(--spacing) * 3643);\n  }\n  .m-3644 {\n    margin: calc(var(--spacing) * 3644);\n  }\n  .m-3645 {\n    margin: calc(var(--spacing) * 3645);\n  }\n  .m-3647 {\n    margin: calc(var(--spacing) * 3647);\n  }\n  .m-3650 {\n    margin: calc(var(--spacing) * 3650);\n  }\n  .m-3651 {\n    margin: calc(var(--spacing) * 3651);\n  }\n  .m-3655 {\n    margin: calc(var(--spacing) * 3655);\n  }\n  .m-3656 {\n    margin: calc(var(--spacing) * 3656);\n  }\n  .m-3657 {\n    margin: calc(var(--spacing) * 3657);\n  }\n  .m-3658 {\n    margin: calc(var(--spacing) * 3658);\n  }\n  .m-3662 {\n    margin: calc(var(--spacing) * 3662);\n  }\n  .m-3663 {\n    margin: calc(var(--spacing) * 3663);\n  }\n  .m-3664 {\n    margin: calc(var(--spacing) * 3664);\n  }\n  .m-3666 {\n    margin: calc(var(--spacing) * 3666);\n  }\n  .m-3667 {\n    margin: calc(var(--spacing) * 3667);\n  }\n  .m-3668 {\n    margin: calc(var(--spacing) * 3668);\n  }\n  .m-3670 {\n    margin: calc(var(--spacing) * 3670);\n  }\n  .m-3671 {\n    margin: calc(var(--spacing) * 3671);\n  }\n  .m-3675 {\n    margin: calc(var(--spacing) * 3675);\n  }\n  .m-3676 {\n    margin: calc(var(--spacing) * 3676);\n  }\n  .m-3678 {\n    margin: calc(var(--spacing) * 3678);\n  }\n  .m-3679 {\n    margin: calc(var(--spacing) * 3679);\n  }\n  .m-3681 {\n    margin: calc(var(--spacing) * 3681);\n  }\n  .m-3684 {\n    margin: calc(var(--spacing) * 3684);\n  }\n  .m-3685 {\n    margin: calc(var(--spacing) * 3685);\n  }\n  .m-3687 {\n    margin: calc(var(--spacing) * 3687);\n  }\n  .m-3688 {\n    margin: calc(var(--spacing) * 3688);\n  }\n  .m-3690 {\n    margin: calc(var(--spacing) * 3690);\n  }\n  .m-3691 {\n    margin: calc(var(--spacing) * 3691);\n  }\n  .m-3694 {\n    margin: calc(var(--spacing) * 3694);\n  }\n  .m-3699 {\n    margin: calc(var(--spacing) * 3699);\n  }\n  .m-3700 {\n    margin: calc(var(--spacing) * 3700);\n  }\n  .m-3701 {\n    margin: calc(var(--spacing) * 3701);\n  }\n  .m-3702 {\n    margin: calc(var(--spacing) * 3702);\n  }\n  .m-3703 {\n    margin: calc(var(--spacing) * 3703);\n  }\n  .m-3706 {\n    margin: calc(var(--spacing) * 3706);\n  }\n  .m-3708 {\n    margin: calc(var(--spacing) * 3708);\n  }\n  .m-3709 {\n    margin: calc(var(--spacing) * 3709);\n  }\n  .m-3710 {\n    margin: calc(var(--spacing) * 3710);\n  }\n  .m-3711 {\n    margin: calc(var(--spacing) * 3711);\n  }\n  .m-3713 {\n    margin: calc(var(--spacing) * 3713);\n  }\n  .m-3714 {\n    margin: calc(var(--spacing) * 3714);\n  }\n  .m-3715 {\n    margin: calc(var(--spacing) * 3715);\n  }\n  .m-3716 {\n    margin: calc(var(--spacing) * 3716);\n  }\n  .m-3717 {\n    margin: calc(var(--spacing) * 3717);\n  }\n  .m-3723 {\n    margin: calc(var(--spacing) * 3723);\n  }\n  .m-3733 {\n    margin: calc(var(--spacing) * 3733);\n  }\n  .m-3734 {\n    margin: calc(var(--spacing) * 3734);\n  }\n  .m-3738 {\n    margin: calc(var(--spacing) * 3738);\n  }\n  .m-3739 {\n    margin: calc(var(--spacing) * 3739);\n  }\n  .m-3740 {\n    margin: calc(var(--spacing) * 3740);\n  }\n  .m-3742 {\n    margin: calc(var(--spacing) * 3742);\n  }\n  .m-3749 {\n    margin: calc(var(--spacing) * 3749);\n  }\n  .m-3753 {\n    margin: calc(var(--spacing) * 3753);\n  }\n  .m-3756 {\n    margin: calc(var(--spacing) * 3756);\n  }\n  .m-3765 {\n    margin: calc(var(--spacing) * 3765);\n  }\n  .m-3766 {\n    margin: calc(var(--spacing) * 3766);\n  }\n  .m-3767 {\n    margin: calc(var(--spacing) * 3767);\n  }\n  .m-3777 {\n    margin: calc(var(--spacing) * 3777);\n  }\n  .m-3780 {\n    margin: calc(var(--spacing) * 3780);\n  }\n  .m-3783 {\n    margin: calc(var(--spacing) * 3783);\n  }\n  .m-3785 {\n    margin: calc(var(--spacing) * 3785);\n  }\n  .m-3791 {\n    margin: calc(var(--spacing) * 3791);\n  }\n  .m-3792 {\n    margin: calc(var(--spacing) * 3792);\n  }\n  .m-3803 {\n    margin: calc(var(--spacing) * 3803);\n  }\n  .m-3804 {\n    margin: calc(var(--spacing) * 3804);\n  }\n  .m-3806 {\n    margin: calc(var(--spacing) * 3806);\n  }\n  .m-3811 {\n    margin: calc(var(--spacing) * 3811);\n  }\n  .m-3813 {\n    margin: calc(var(--spacing) * 3813);\n  }\n  .m-3815 {\n    margin: calc(var(--spacing) * 3815);\n  }\n  .m-3816 {\n    margin: calc(var(--spacing) * 3816);\n  }\n  .m-3817 {\n    margin: calc(var(--spacing) * 3817);\n  }\n  .m-3818 {\n    margin: calc(var(--spacing) * 3818);\n  }\n  .m-3819 {\n    margin: calc(var(--spacing) * 3819);\n  }\n  .m-3822 {\n    margin: calc(var(--spacing) * 3822);\n  }\n  .m-3824 {\n    margin: calc(var(--spacing) * 3824);\n  }\n  .m-3832 {\n    margin: calc(var(--spacing) * 3832);\n  }\n  .m-3835 {\n    margin: calc(var(--spacing) * 3835);\n  }\n  .m-3841 {\n    margin: calc(var(--spacing) * 3841);\n  }\n  .m-3842 {\n    margin: calc(var(--spacing) * 3842);\n  }\n  .m-3846 {\n    margin: calc(var(--spacing) * 3846);\n  }\n  .m-3847 {\n    margin: calc(var(--spacing) * 3847);\n  }\n  .m-3850 {\n    margin: calc(var(--spacing) * 3850);\n  }\n  .m-3853 {\n    margin: calc(var(--spacing) * 3853);\n  }\n  .m-3854 {\n    margin: calc(var(--spacing) * 3854);\n  }\n  .m-3855 {\n    margin: calc(var(--spacing) * 3855);\n  }\n  .m-3858 {\n    margin: calc(var(--spacing) * 3858);\n  }\n  .m-3859 {\n    margin: calc(var(--spacing) * 3859);\n  }\n  .m-3860 {\n    margin: calc(var(--spacing) * 3860);\n  }\n  .m-3862 {\n    margin: calc(var(--spacing) * 3862);\n  }\n  .m-3867 {\n    margin: calc(var(--spacing) * 3867);\n  }\n  .m-3868 {\n    margin: calc(var(--spacing) * 3868);\n  }\n  .m-3870 {\n    margin: calc(var(--spacing) * 3870);\n  }\n  .m-3875 {\n    margin: calc(var(--spacing) * 3875);\n  }\n  .m-3881 {\n    margin: calc(var(--spacing) * 3881);\n  }\n  .m-3882 {\n    margin: calc(var(--spacing) * 3882);\n  }\n  .m-3886 {\n    margin: calc(var(--spacing) * 3886);\n  }\n  .m-3891 {\n    margin: calc(var(--spacing) * 3891);\n  }\n  .m-3894 {\n    margin: calc(var(--spacing) * 3894);\n  }\n  .m-3897 {\n    margin: calc(var(--spacing) * 3897);\n  }\n  .m-3900 {\n    margin: calc(var(--spacing) * 3900);\n  }\n  .m-3901 {\n    margin: calc(var(--spacing) * 3901);\n  }\n  .m-3904 {\n    margin: calc(var(--spacing) * 3904);\n  }\n  .m-3910 {\n    margin: calc(var(--spacing) * 3910);\n  }\n  .m-3915 {\n    margin: calc(var(--spacing) * 3915);\n  }\n  .m-3924 {\n    margin: calc(var(--spacing) * 3924);\n  }\n  .m-3929 {\n    margin: calc(var(--spacing) * 3929);\n  }\n  .m-3932 {\n    margin: calc(var(--spacing) * 3932);\n  }\n  .m-3935 {\n    margin: calc(var(--spacing) * 3935);\n  }\n  .m-3937 {\n    margin: calc(var(--spacing) * 3937);\n  }\n  .m-3938 {\n    margin: calc(var(--spacing) * 3938);\n  }\n  .m-3944 {\n    margin: calc(var(--spacing) * 3944);\n  }\n  .m-3949 {\n    margin: calc(var(--spacing) * 3949);\n  }\n  .m-3951 {\n    margin: calc(var(--spacing) * 3951);\n  }\n  .m-3956 {\n    margin: calc(var(--spacing) * 3956);\n  }\n  .m-3966 {\n    margin: calc(var(--spacing) * 3966);\n  }\n  .m-3968 {\n    margin: calc(var(--spacing) * 3968);\n  }\n  .m-3974 {\n    margin: calc(var(--spacing) * 3974);\n  }\n  .m-3977 {\n    margin: calc(var(--spacing) * 3977);\n  }\n  .m-3978 {\n    margin: calc(var(--spacing) * 3978);\n  }\n  .m-3981 {\n    margin: calc(var(--spacing) * 3981);\n  }\n  .m-3982 {\n    margin: calc(var(--spacing) * 3982);\n  }\n  .m-3989 {\n    margin: calc(var(--spacing) * 3989);\n  }\n  .m-3990 {\n    margin: calc(var(--spacing) * 3990);\n  }\n  .m-3991 {\n    margin: calc(var(--spacing) * 3991);\n  }\n  .m-3992 {\n    margin: calc(var(--spacing) * 3992);\n  }\n  .m-3994 {\n    margin: calc(var(--spacing) * 3994);\n  }\n  .m-3996 {\n    margin: calc(var(--spacing) * 3996);\n  }\n  .m-3998 {\n    margin: calc(var(--spacing) * 3998);\n  }\n  .m-3999 {\n    margin: calc(var(--spacing) * 3999);\n  }\n  .m-4001 {\n    margin: calc(var(--spacing) * 4001);\n  }\n  .m-4002 {\n    margin: calc(var(--spacing) * 4002);\n  }\n  .m-4003 {\n    margin: calc(var(--spacing) * 4003);\n  }\n  .m-4004 {\n    margin: calc(var(--spacing) * 4004);\n  }\n  .m-4008 {\n    margin: calc(var(--spacing) * 4008);\n  }\n  .m-4010 {\n    margin: calc(var(--spacing) * 4010);\n  }\n  .m-4011 {\n    margin: calc(var(--spacing) * 4011);\n  }\n  .m-4013 {\n    margin: calc(var(--spacing) * 4013);\n  }\n  .m-4014 {\n    margin: calc(var(--spacing) * 4014);\n  }\n  .m-4015 {\n    margin: calc(var(--spacing) * 4015);\n  }\n  .m-4016 {\n    margin: calc(var(--spacing) * 4016);\n  }\n  .m-4018 {\n    margin: calc(var(--spacing) * 4018);\n  }\n  .m-4019 {\n    margin: calc(var(--spacing) * 4019);\n  }\n  .m-4023 {\n    margin: calc(var(--spacing) * 4023);\n  }\n  .m-4024 {\n    margin: calc(var(--spacing) * 4024);\n  }\n  .m-4025 {\n    margin: calc(var(--spacing) * 4025);\n  }\n  .m-4035 {\n    margin: calc(var(--spacing) * 4035);\n  }\n  .m-4036 {\n    margin: calc(var(--spacing) * 4036);\n  }\n  .m-4038 {\n    margin: calc(var(--spacing) * 4038);\n  }\n  .m-4043 {\n    margin: calc(var(--spacing) * 4043);\n  }\n  .m-4045 {\n    margin: calc(var(--spacing) * 4045);\n  }\n  .m-4046 {\n    margin: calc(var(--spacing) * 4046);\n  }\n  .m-4049 {\n    margin: calc(var(--spacing) * 4049);\n  }\n  .m-4050 {\n    margin: calc(var(--spacing) * 4050);\n  }\n  .m-4060 {\n    margin: calc(var(--spacing) * 4060);\n  }\n  .m-4061 {\n    margin: calc(var(--spacing) * 4061);\n  }\n  .m-4066 {\n    margin: calc(var(--spacing) * 4066);\n  }\n  .m-4070 {\n    margin: calc(var(--spacing) * 4070);\n  }\n  .m-4073 {\n    margin: calc(var(--spacing) * 4073);\n  }\n  .m-4075 {\n    margin: calc(var(--spacing) * 4075);\n  }\n  .m-4082 {\n    margin: calc(var(--spacing) * 4082);\n  }\n  .m-4084 {\n    margin: calc(var(--spacing) * 4084);\n  }\n  .m-4087 {\n    margin: calc(var(--spacing) * 4087);\n  }\n  .m-4088 {\n    margin: calc(var(--spacing) * 4088);\n  }\n  .m-4089 {\n    margin: calc(var(--spacing) * 4089);\n  }\n  .m-4090 {\n    margin: calc(var(--spacing) * 4090);\n  }\n  .m-4092 {\n    margin: calc(var(--spacing) * 4092);\n  }\n  .m-4096 {\n    margin: calc(var(--spacing) * 4096);\n  }\n  .m-4100 {\n    margin: calc(var(--spacing) * 4100);\n  }\n  .m-4103 {\n    margin: calc(var(--spacing) * 4103);\n  }\n  .m-4108 {\n    margin: calc(var(--spacing) * 4108);\n  }\n  .m-4109 {\n    margin: calc(var(--spacing) * 4109);\n  }\n  .m-4112 {\n    margin: calc(var(--spacing) * 4112);\n  }\n  .m-4113 {\n    margin: calc(var(--spacing) * 4113);\n  }\n  .m-4114 {\n    margin: calc(var(--spacing) * 4114);\n  }\n  .m-4129 {\n    margin: calc(var(--spacing) * 4129);\n  }\n  .m-4132 {\n    margin: calc(var(--spacing) * 4132);\n  }\n  .m-4134 {\n    margin: calc(var(--spacing) * 4134);\n  }\n  .m-4138 {\n    margin: calc(var(--spacing) * 4138);\n  }\n  .m-4141 {\n    margin: calc(var(--spacing) * 4141);\n  }\n  .m-4143 {\n    margin: calc(var(--spacing) * 4143);\n  }\n  .m-4144 {\n    margin: calc(var(--spacing) * 4144);\n  }\n  .m-4145 {\n    margin: calc(var(--spacing) * 4145);\n  }\n  .m-4150 {\n    margin: calc(var(--spacing) * 4150);\n  }\n  .m-4161 {\n    margin: calc(var(--spacing) * 4161);\n  }\n  .m-4162 {\n    margin: calc(var(--spacing) * 4162);\n  }\n  .m-4170 {\n    margin: calc(var(--spacing) * 4170);\n  }\n  .m-4172 {\n    margin: calc(var(--spacing) * 4172);\n  }\n  .m-4176 {\n    margin: calc(var(--spacing) * 4176);\n  }\n  .m-4179 {\n    margin: calc(var(--spacing) * 4179);\n  }\n  .m-4181 {\n    margin: calc(var(--spacing) * 4181);\n  }\n  .m-4184 {\n    margin: calc(var(--spacing) * 4184);\n  }\n  .m-4190 {\n    margin: calc(var(--spacing) * 4190);\n  }\n  .m-4192 {\n    margin: calc(var(--spacing) * 4192);\n  }\n  .m-4196 {\n    margin: calc(var(--spacing) * 4196);\n  }\n  .m-4198 {\n    margin: calc(var(--spacing) * 4198);\n  }\n  .m-4200 {\n    margin: calc(var(--spacing) * 4200);\n  }\n  .m-4204 {\n    margin: calc(var(--spacing) * 4204);\n  }\n  .m-4209 {\n    margin: calc(var(--spacing) * 4209);\n  }\n  .m-4211 {\n    margin: calc(var(--spacing) * 4211);\n  }\n  .m-4212 {\n    margin: calc(var(--spacing) * 4212);\n  }\n  .m-4214 {\n    margin: calc(var(--spacing) * 4214);\n  }\n  .m-4216 {\n    margin: calc(var(--spacing) * 4216);\n  }\n  .m-4219 {\n    margin: calc(var(--spacing) * 4219);\n  }\n  .m-4221 {\n    margin: calc(var(--spacing) * 4221);\n  }\n  .m-4224 {\n    margin: calc(var(--spacing) * 4224);\n  }\n  .m-4226 {\n    margin: calc(var(--spacing) * 4226);\n  }\n  .m-4227 {\n    margin: calc(var(--spacing) * 4227);\n  }\n  .m-4228 {\n    margin: calc(var(--spacing) * 4228);\n  }\n  .m-4229 {\n    margin: calc(var(--spacing) * 4229);\n  }\n  .m-4230 {\n    margin: calc(var(--spacing) * 4230);\n  }\n  .m-4232 {\n    margin: calc(var(--spacing) * 4232);\n  }\n  .m-4235 {\n    margin: calc(var(--spacing) * 4235);\n  }\n  .m-4236 {\n    margin: calc(var(--spacing) * 4236);\n  }\n  .m-4241 {\n    margin: calc(var(--spacing) * 4241);\n  }\n  .m-4244 {\n    margin: calc(var(--spacing) * 4244);\n  }\n  .m-4248 {\n    margin: calc(var(--spacing) * 4248);\n  }\n  .m-4249 {\n    margin: calc(var(--spacing) * 4249);\n  }\n  .m-4252 {\n    margin: calc(var(--spacing) * 4252);\n  }\n  .m-4253 {\n    margin: calc(var(--spacing) * 4253);\n  }\n  .m-4259 {\n    margin: calc(var(--spacing) * 4259);\n  }\n  .m-4260 {\n    margin: calc(var(--spacing) * 4260);\n  }\n  .m-4261 {\n    margin: calc(var(--spacing) * 4261);\n  }\n  .m-4262 {\n    margin: calc(var(--spacing) * 4262);\n  }\n  .m-4265 {\n    margin: calc(var(--spacing) * 4265);\n  }\n  .m-4268 {\n    margin: calc(var(--spacing) * 4268);\n  }\n  .m-4269 {\n    margin: calc(var(--spacing) * 4269);\n  }\n  .m-4270 {\n    margin: calc(var(--spacing) * 4270);\n  }\n  .m-4271 {\n    margin: calc(var(--spacing) * 4271);\n  }\n  .m-4274 {\n    margin: calc(var(--spacing) * 4274);\n  }\n  .m-4277 {\n    margin: calc(var(--spacing) * 4277);\n  }\n  .m-4278 {\n    margin: calc(var(--spacing) * 4278);\n  }\n  .m-4279 {\n    margin: calc(var(--spacing) * 4279);\n  }\n  .m-4280 {\n    margin: calc(var(--spacing) * 4280);\n  }\n  .m-4284 {\n    margin: calc(var(--spacing) * 4284);\n  }\n  .m-4285 {\n    margin: calc(var(--spacing) * 4285);\n  }\n  .m-4289 {\n    margin: calc(var(--spacing) * 4289);\n  }\n  .m-4290 {\n    margin: calc(var(--spacing) * 4290);\n  }\n  .m-4292 {\n    margin: calc(var(--spacing) * 4292);\n  }\n  .m-4299 {\n    margin: calc(var(--spacing) * 4299);\n  }\n  .m-4302 {\n    margin: calc(var(--spacing) * 4302);\n  }\n  .m-4308 {\n    margin: calc(var(--spacing) * 4308);\n  }\n  .m-4309 {\n    margin: calc(var(--spacing) * 4309);\n  }\n  .m-4313 {\n    margin: calc(var(--spacing) * 4313);\n  }\n  .m-4314 {\n    margin: calc(var(--spacing) * 4314);\n  }\n  .m-4315 {\n    margin: calc(var(--spacing) * 4315);\n  }\n  .m-4320 {\n    margin: calc(var(--spacing) * 4320);\n  }\n  .m-4329 {\n    margin: calc(var(--spacing) * 4329);\n  }\n  .m-4330 {\n    margin: calc(var(--spacing) * 4330);\n  }\n  .m-4334 {\n    margin: calc(var(--spacing) * 4334);\n  }\n  .m-4338 {\n    margin: calc(var(--spacing) * 4338);\n  }\n  .m-4340 {\n    margin: calc(var(--spacing) * 4340);\n  }\n  .m-4344 {\n    margin: calc(var(--spacing) * 4344);\n  }\n  .m-4345 {\n    margin: calc(var(--spacing) * 4345);\n  }\n  .m-4349 {\n    margin: calc(var(--spacing) * 4349);\n  }\n  .m-4353 {\n    margin: calc(var(--spacing) * 4353);\n  }\n  .m-4360 {\n    margin: calc(var(--spacing) * 4360);\n  }\n  .m-4366 {\n    margin: calc(var(--spacing) * 4366);\n  }\n  .m-4367 {\n    margin: calc(var(--spacing) * 4367);\n  }\n  .m-4368 {\n    margin: calc(var(--spacing) * 4368);\n  }\n  .m-4369 {\n    margin: calc(var(--spacing) * 4369);\n  }\n  .m-4380 {\n    margin: calc(var(--spacing) * 4380);\n  }\n  .m-4382 {\n    margin: calc(var(--spacing) * 4382);\n  }\n  .m-4384 {\n    margin: calc(var(--spacing) * 4384);\n  }\n  .m-4389 {\n    margin: calc(var(--spacing) * 4389);\n  }\n  .m-4392 {\n    margin: calc(var(--spacing) * 4392);\n  }\n  .m-4395 {\n    margin: calc(var(--spacing) * 4395);\n  }\n  .m-4400 {\n    margin: calc(var(--spacing) * 4400);\n  }\n  .m-4401 {\n    margin: calc(var(--spacing) * 4401);\n  }\n  .m-4404 {\n    margin: calc(var(--spacing) * 4404);\n  }\n  .m-4406 {\n    margin: calc(var(--spacing) * 4406);\n  }\n  .m-4408 {\n    margin: calc(var(--spacing) * 4408);\n  }\n  .m-4411 {\n    margin: calc(var(--spacing) * 4411);\n  }\n  .m-4416 {\n    margin: calc(var(--spacing) * 4416);\n  }\n  .m-4421 {\n    margin: calc(var(--spacing) * 4421);\n  }\n  .m-4423 {\n    margin: calc(var(--spacing) * 4423);\n  }\n  .m-4426 {\n    margin: calc(var(--spacing) * 4426);\n  }\n  .m-4429 {\n    margin: calc(var(--spacing) * 4429);\n  }\n  .m-4432 {\n    margin: calc(var(--spacing) * 4432);\n  }\n  .m-4440 {\n    margin: calc(var(--spacing) * 4440);\n  }\n  .m-4443 {\n    margin: calc(var(--spacing) * 4443);\n  }\n  .m-4444 {\n    margin: calc(var(--spacing) * 4444);\n  }\n  .m-4445 {\n    margin: calc(var(--spacing) * 4445);\n  }\n  .m-4450 {\n    margin: calc(var(--spacing) * 4450);\n  }\n  .m-4454 {\n    margin: calc(var(--spacing) * 4454);\n  }\n  .m-4455 {\n    margin: calc(var(--spacing) * 4455);\n  }\n  .m-4457 {\n    margin: calc(var(--spacing) * 4457);\n  }\n  .m-4468 {\n    margin: calc(var(--spacing) * 4468);\n  }\n  .m-4474 {\n    margin: calc(var(--spacing) * 4474);\n  }\n  .m-4480 {\n    margin: calc(var(--spacing) * 4480);\n  }\n  .m-4484 {\n    margin: calc(var(--spacing) * 4484);\n  }\n  .m-4486 {\n    margin: calc(var(--spacing) * 4486);\n  }\n  .m-4489 {\n    margin: calc(var(--spacing) * 4489);\n  }\n  .m-4490 {\n    margin: calc(var(--spacing) * 4490);\n  }\n  .m-4497 {\n    margin: calc(var(--spacing) * 4497);\n  }\n  .m-4500 {\n    margin: calc(var(--spacing) * 4500);\n  }\n  .m-4511 {\n    margin: calc(var(--spacing) * 4511);\n  }\n  .m-4519 {\n    margin: calc(var(--spacing) * 4519);\n  }\n  .m-4521 {\n    margin: calc(var(--spacing) * 4521);\n  }\n  .m-4523 {\n    margin: calc(var(--spacing) * 4523);\n  }\n  .m-4528 {\n    margin: calc(var(--spacing) * 4528);\n  }\n  .m-4539 {\n    margin: calc(var(--spacing) * 4539);\n  }\n  .m-4542 {\n    margin: calc(var(--spacing) * 4542);\n  }\n  .m-4548 {\n    margin: calc(var(--spacing) * 4548);\n  }\n  .m-4553 {\n    margin: calc(var(--spacing) * 4553);\n  }\n  .m-4555 {\n    margin: calc(var(--spacing) * 4555);\n  }\n  .m-4560 {\n    margin: calc(var(--spacing) * 4560);\n  }\n  .m-4561 {\n    margin: calc(var(--spacing) * 4561);\n  }\n  .m-4563 {\n    margin: calc(var(--spacing) * 4563);\n  }\n  .m-4586 {\n    margin: calc(var(--spacing) * 4586);\n  }\n  .m-4590 {\n    margin: calc(var(--spacing) * 4590);\n  }\n  .m-4603 {\n    margin: calc(var(--spacing) * 4603);\n  }\n  .m-4623 {\n    margin: calc(var(--spacing) * 4623);\n  }\n  .m-4631 {\n    margin: calc(var(--spacing) * 4631);\n  }\n  .m-4636 {\n    margin: calc(var(--spacing) * 4636);\n  }\n  .m-4641 {\n    margin: calc(var(--spacing) * 4641);\n  }\n  .m-4642 {\n    margin: calc(var(--spacing) * 4642);\n  }\n  .m-4654 {\n    margin: calc(var(--spacing) * 4654);\n  }\n  .m-4660 {\n    margin: calc(var(--spacing) * 4660);\n  }\n  .m-4665 {\n    margin: calc(var(--spacing) * 4665);\n  }\n  .m-4682 {\n    margin: calc(var(--spacing) * 4682);\n  }\n  .m-4689 {\n    margin: calc(var(--spacing) * 4689);\n  }\n  .m-4690 {\n    margin: calc(var(--spacing) * 4690);\n  }\n  .m-4699 {\n    margin: calc(var(--spacing) * 4699);\n  }\n  .m-4701 {\n    margin: calc(var(--spacing) * 4701);\n  }\n  .m-4713 {\n    margin: calc(var(--spacing) * 4713);\n  }\n  .m-4720 {\n    margin: calc(var(--spacing) * 4720);\n  }\n  .m-4724 {\n    margin: calc(var(--spacing) * 4724);\n  }\n  .m-4725 {\n    margin: calc(var(--spacing) * 4725);\n  }\n  .m-4729 {\n    margin: calc(var(--spacing) * 4729);\n  }\n  .m-4730 {\n    margin: calc(var(--spacing) * 4730);\n  }\n  .m-4737 {\n    margin: calc(var(--spacing) * 4737);\n  }\n  .m-4738 {\n    margin: calc(var(--spacing) * 4738);\n  }\n  .m-4743 {\n    margin: calc(var(--spacing) * 4743);\n  }\n  .m-4747 {\n    margin: calc(var(--spacing) * 4747);\n  }\n  .m-4748 {\n    margin: calc(var(--spacing) * 4748);\n  }\n  .m-4753 {\n    margin: calc(var(--spacing) * 4753);\n  }\n  .m-4754 {\n    margin: calc(var(--spacing) * 4754);\n  }\n  .m-4762 {\n    margin: calc(var(--spacing) * 4762);\n  }\n  .m-4771 {\n    margin: calc(var(--spacing) * 4771);\n  }\n  .m-4776 {\n    margin: calc(var(--spacing) * 4776);\n  }\n  .m-4793 {\n    margin: calc(var(--spacing) * 4793);\n  }\n  .m-4805 {\n    margin: calc(var(--spacing) * 4805);\n  }\n  .m-4808 {\n    margin: calc(var(--spacing) * 4808);\n  }\n  .m-4816 {\n    margin: calc(var(--spacing) * 4816);\n  }\n  .m-4817 {\n    margin: calc(var(--spacing) * 4817);\n  }\n  .m-4854 {\n    margin: calc(var(--spacing) * 4854);\n  }\n  .m-4890 {\n    margin: calc(var(--spacing) * 4890);\n  }\n  .m-4920 {\n    margin: calc(var(--spacing) * 4920);\n  }\n  .m-4923 {\n    margin: calc(var(--spacing) * 4923);\n  }\n  .m-4932 {\n    margin: calc(var(--spacing) * 4932);\n  }\n  .m-4940 {\n    margin: calc(var(--spacing) * 4940);\n  }\n  .m-4975 {\n    margin: calc(var(--spacing) * 4975);\n  }\n  .m-4977 {\n    margin: calc(var(--spacing) * 4977);\n  }\n  .contents {\n    display: contents;\n  }\n  .flex {\n    display: flex;\n  }\n  .hidden {\n    display: none;\n  }\n  .inline {\n    display: inline;\n  }\n  .grow {\n    flex-grow: 1;\n  }\n  .transform {\n    transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);\n  }\n  .uppercase {\n    text-transform: uppercase;\n  }\n  .ring {\n    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);\n    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);\n  }\n  .filter {\n    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);\n  }\n  .transition {\n    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;\n    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));\n    transition-duration: var(--tw-duration, var(--default-transition-duration));\n  }\n  .ease-out {\n    --tw-ease: var(--ease-out);\n    transition-timing-function: var(--ease-out);\n  }\n}\n@property --tw-rotate-x {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: rotateX(0);\n}\n@property --tw-rotate-y {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: rotateY(0);\n}\n@property --tw-rotate-z {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: rotateZ(0);\n}\n@property --tw-skew-x {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: skewX(0);\n}\n@property --tw-skew-y {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: skewY(0);\n}\n@property --tw-shadow {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: 0 0 #0000;\n}\n@property --tw-shadow-color {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-shadow-alpha {\n  syntax: \"<percentage>\";\n  inherits: false;\n  initial-value: 100%;\n}\n@property --tw-inset-shadow {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: 0 0 #0000;\n}\n@property --tw-inset-shadow-color {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-inset-shadow-alpha {\n  syntax: \"<percentage>\";\n  inherits: false;\n  initial-value: 100%;\n}\n@property --tw-ring-color {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-ring-shadow {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: 0 0 #0000;\n}\n@property --tw-inset-ring-color {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-inset-ring-shadow {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: 0 0 #0000;\n}\n@property --tw-ring-inset {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-ring-offset-width {\n  syntax: \"<length>\";\n  inherits: false;\n  initial-value: 0px;\n}\n@property --tw-ring-offset-color {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: #fff;\n}\n@property --tw-ring-offset-shadow {\n  syntax: \"*\";\n  inherits: false;\n  initial-value: 0 0 #0000;\n}\n@property --tw-blur {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-brightness {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-contrast {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-grayscale {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-hue-rotate {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-invert {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-opacity {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-saturate {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-sepia {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-drop-shadow {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-drop-shadow-color {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-drop-shadow-alpha {\n  syntax: \"<percentage>\";\n  inherits: false;\n  initial-value: 100%;\n}\n@property --tw-drop-shadow-size {\n  syntax: \"*\";\n  inherits: false;\n}\n@property --tw-ease {\n  syntax: \"*\";\n  inherits: false;\n}\n", "",{"version":3,"sources":["webpack://./src/index.css"],"names":[],"mappings":"AAAA,gEACA;AADA,yCACA;AADA;EAAA;IAAA;MAAA,yBACA;MADA,yBACA;MADA,yBACA;MADA,qBACA;MADA,qBACA;MADA,sBACA;MADA,0BACA;MADA,uBACA;MADA,4BACA;MADA,gCACA;MADA,6BACA;MADA,wBACA;MADA,2BACA;MADA,8BACA;MADA,iCACA;MADA,wBACA;MADA,2BACA;MADA,4BACA;MADA,kCACA;MADA,kBACA;MADA,wBACA;MADA,sBACA;MADA,uBACA;MADA,wBACA;MADA,oBACA;MADA,qBACA;MADA,sBACA;MADA,mBACA;MADA,yBACA;MADA,+BACA;MADA,4BACA;MADA,8BACA;MADA,kBACA;IAAA;EAAA;AAAA;AADA;EAAA;IAAA;6DACA;IADA;iDACA;IADA,kBACA;IADA,sCACA;IADA,oCACA;IADA,kEACA;IADA,uCACA;IADA,wEACA;IADA;;KACA;IADA,4CACA;IADA;;KACA;IADA;;KACA;EAAA;AAAA;AADA;EAAA;IAAA,sBACA;IADA,SACA;IADA,UACA;IADA,eACA;EAAA;EADA;IAAA,gBACA;IADA,8BACA;IADA,WACA;IADA,6JACA;IADA,mEACA;IADA,yEACA;IADA,wCACA;EAAA;EADA;IAAA,oBACA;EAAA;EADA;IAAA,SACA;IADA,cACA;IADA,qBACA;EAAA;EADA;IAAA,yCACA;IADA,iCACA;EAAA;EADA;IAAA,kBACA;IADA,oBACA;EAAA;EADA;IAAA,cACA;IADA,gCACA;IADA,wBACA;EAAA;EADA;IAAA,mBACA;EAAA;EADA;IAAA,kJACA;IADA,0EACA;IADA,8EACA;IADA,cACA;EAAA;EADA;IAAA,cACA;EAAA;EADA;IAAA,cACA;IADA,cACA;IADA,kBACA;IADA,wBACA;EAAA;EADA;IAAA,eACA;EAAA;EADA;IAAA,WACA;EAAA;EADA;IAAA,cACA;IADA,qBACA;IADA,yBACA;EAAA;EADA;IAAA,aACA;EAAA;EADA;IAAA,wBACA;EAAA;EADA;IAAA,kBACA;EAAA;EADA;IAAA,gBACA;EAAA;EADA;IAAA,cACA;IADA,sBACA;EAAA;EADA;IAAA,eACA;IADA,YACA;EAAA;EADA;IAAA,aACA;IADA,8BACA;IADA,gCACA;IADA,uBACA;IADA,cACA;IADA,gBACA;IADA,6BACA;IADA,UACA;EAAA;EADA;IAAA,mBACA;EAAA;EADA;IAAA,0BACA;EAAA;EADA;IAAA,sBACA;EAAA;EADA;IAAA,UACA;IADA,yDACA;EAAA;EADA;IAAA,gBACA;EAAA;EADA;IAAA,wBACA;EAAA;EADA;IAAA,eACA;IADA,mBACA;EAAA;EADA;IAAA,oBACA;EAAA;EADA;IAAA,UACA;EAAA;EADA;IAAA,gBACA;EAAA;EADA;IAAA,gBACA;EAAA;EADA;IAAA,kBACA;EAAA;EADA;IAAA,YACA;EAAA;EADA;IAAA,wBACA;EAAA;AAAA;AADA;EAAA;IAAA,mBACA;EAAA;EADA;IAAA,kBACA;EAAA;EADA;IAAA,kBACA;EAAA;EADA;IAAA,gBACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,gCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,iCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,kCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,mCACA;EAAA;EADA;IAAA,iBACA;EAAA;EADA;IAAA,aACA;EAAA;EADA;IAAA,aACA;EAAA;EADA;IAAA,eACA;EAAA;EADA;IAAA,YACA;EAAA;EADA;IAAA,qGACA;EAAA;EADA;IAAA,yBACA;EAAA;EADA;IAAA,wHACA;IADA,sIACA;EAAA;EADA;IAAA,0LACA;EAAA;EADA;IAAA,mRACA;IADA,qFACA;IADA,2EACA;EAAA;EADA;IAAA,0BACA;IADA,2CACA;EAAA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,yBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,yBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,yBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,uBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,uBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,wBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,sBACA;EADA,eACA;EADA,mBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,wBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,sBACA;EADA,eACA;EADA,mBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,wBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,wBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,kBACA;EADA,eACA;EADA,kBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,mBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;EADA,wBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,sBACA;EADA,eACA;EADA,mBACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA;AADA;EAAA,WACA;EADA,eACA;AAAA","sourcesContent":["@import \"tailwindcss\";\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 6314:
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join("");
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === "string") {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, ""]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ 4991:
/***/ ((module) => {



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ 1247:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

var Scheduler = __webpack_require__(9982),
  React = __webpack_require__(6540),
  ReactDOM = __webpack_require__(961);
function formatProdErrorMessage(code) {
  var url = "https://react.dev/errors/" + code;
  if (1 < arguments.length) {
    url += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var i = 2; i < arguments.length; i++)
      url += "&args[]=" + encodeURIComponent(arguments[i]);
  }
  return (
    "Minified React error #" +
    code +
    "; visit " +
    url +
    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
  );
}
function isValidContainer(node) {
  return !(
    !node ||
    (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
  );
}
var REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
  REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
  REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
  REACT_MEMO_TYPE = Symbol.for("react.memo"),
  REACT_LAZY_TYPE = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.tracing_marker");
var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
  maybeIterable =
    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
    maybeIterable["@@iterator"];
  return "function" === typeof maybeIterable ? maybeIterable : null;
}
var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
function getComponentNameFromType(type) {
  if (null == type) return null;
  if ("function" === typeof type)
    return type.$$typeof === REACT_CLIENT_REFERENCE
      ? null
      : type.displayName || type.name || null;
  if ("string" === typeof type) return type;
  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return "Fragment";
    case REACT_PORTAL_TYPE:
      return "Portal";
    case REACT_PROFILER_TYPE:
      return "Profiler";
    case REACT_STRICT_MODE_TYPE:
      return "StrictMode";
    case REACT_SUSPENSE_TYPE:
      return "Suspense";
    case REACT_SUSPENSE_LIST_TYPE:
      return "SuspenseList";
  }
  if ("object" === typeof type)
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Provider";
      case REACT_CONSUMER_TYPE:
        return (type._context.displayName || "Context") + ".Consumer";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type ||
          ((type = innerType.displayName || innerType.name || ""),
          (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
        return type;
      case REACT_MEMO_TYPE:
        return (
          (innerType = type.displayName || null),
          null !== innerType
            ? innerType
            : getComponentNameFromType(type.type) || "Memo"
        );
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
  return null;
}
var ReactSharedInternals =
    React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
  assign = Object.assign,
  prefix,
  suffix;
function describeBuiltInComponentFrame(name) {
  if (void 0 === prefix)
    try {
      throw Error();
    } catch (x) {
      var match = x.stack.trim().match(/\n( *(at )?)/);
      prefix = (match && match[1]) || "";
      suffix =
        -1 < x.stack.indexOf("\n    at")
          ? " (<anonymous>)"
          : -1 < x.stack.indexOf("@")
            ? "@unknown:0:0"
            : "";
    }
  return "\n" + prefix + name + suffix;
}
var reentry = !1;
function describeNativeComponentFrame(fn, construct) {
  if (!fn || reentry) return "";
  reentry = !0;
  var previousPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;
  try {
    var RunInRootFrame = {
      DetermineComponentFrameRoot: function () {
        try {
          if (construct) {
            var Fake = function () {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function () {
                throw Error();
              }
            });
            if ("object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                var control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x$0) {
                control = x$0;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x$1) {
              control = x$1;
            }
            (Fake = fn()) &&
              "function" === typeof Fake.catch &&
              Fake.catch(function () {});
          }
        } catch (sample) {
          if (sample && control && "string" === typeof sample.stack)
            return [sample.stack, control.stack];
        }
        return [null, null];
      }
    };
    RunInRootFrame.DetermineComponentFrameRoot.displayName =
      "DetermineComponentFrameRoot";
    var namePropDescriptor = Object.getOwnPropertyDescriptor(
      RunInRootFrame.DetermineComponentFrameRoot,
      "name"
    );
    namePropDescriptor &&
      namePropDescriptor.configurable &&
      Object.defineProperty(
        RunInRootFrame.DetermineComponentFrameRoot,
        "name",
        { value: "DetermineComponentFrameRoot" }
      );
    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
      sampleStack = _RunInRootFrame$Deter[0],
      controlStack = _RunInRootFrame$Deter[1];
    if (sampleStack && controlStack) {
      var sampleLines = sampleStack.split("\n"),
        controlLines = controlStack.split("\n");
      for (
        namePropDescriptor = RunInRootFrame = 0;
        RunInRootFrame < sampleLines.length &&
        !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");

      )
        RunInRootFrame++;
      for (
        ;
        namePropDescriptor < controlLines.length &&
        !controlLines[namePropDescriptor].includes(
          "DetermineComponentFrameRoot"
        );

      )
        namePropDescriptor++;
      if (
        RunInRootFrame === sampleLines.length ||
        namePropDescriptor === controlLines.length
      )
        for (
          RunInRootFrame = sampleLines.length - 1,
            namePropDescriptor = controlLines.length - 1;
          1 <= RunInRootFrame &&
          0 <= namePropDescriptor &&
          sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];

        )
          namePropDescriptor--;
      for (
        ;
        1 <= RunInRootFrame && 0 <= namePropDescriptor;
        RunInRootFrame--, namePropDescriptor--
      )
        if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
            do
              if (
                (RunInRootFrame--,
                namePropDescriptor--,
                0 > namePropDescriptor ||
                  sampleLines[RunInRootFrame] !==
                    controlLines[namePropDescriptor])
              ) {
                var frame =
                  "\n" +
                  sampleLines[RunInRootFrame].replace(" at new ", " at ");
                fn.displayName &&
                  frame.includes("<anonymous>") &&
                  (frame = frame.replace("<anonymous>", fn.displayName));
                return frame;
              }
            while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
          }
          break;
        }
    }
  } finally {
    (reentry = !1), (Error.prepareStackTrace = previousPrepareStackTrace);
  }
  return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "")
    ? describeBuiltInComponentFrame(previousPrepareStackTrace)
    : "";
}
function describeFiber(fiber) {
  switch (fiber.tag) {
    case 26:
    case 27:
    case 5:
      return describeBuiltInComponentFrame(fiber.type);
    case 16:
      return describeBuiltInComponentFrame("Lazy");
    case 13:
      return describeBuiltInComponentFrame("Suspense");
    case 19:
      return describeBuiltInComponentFrame("SuspenseList");
    case 0:
    case 15:
      return (fiber = describeNativeComponentFrame(fiber.type, !1)), fiber;
    case 11:
      return (
        (fiber = describeNativeComponentFrame(fiber.type.render, !1)), fiber
      );
    case 1:
      return (fiber = describeNativeComponentFrame(fiber.type, !0)), fiber;
    default:
      return "";
  }
}
function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = "";
    do
      (info += describeFiber(workInProgress)),
        (workInProgress = workInProgress.return);
    while (workInProgress);
    return info;
  } catch (x) {
    return "\nError generating stack: " + x.message + "\n" + x.stack;
  }
}
function getNearestMountedFiber(fiber) {
  var node = fiber,
    nearestMounted = fiber;
  if (fiber.alternate) for (; node.return; ) node = node.return;
  else {
    fiber = node;
    do
      (node = fiber),
        0 !== (node.flags & 4098) && (nearestMounted = node.return),
        (fiber = node.return);
    while (fiber);
  }
  return 3 === node.tag ? nearestMounted : null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (13 === fiber.tag) {
    var suspenseState = fiber.memoizedState;
    null === suspenseState &&
      ((fiber = fiber.alternate),
      null !== fiber && (suspenseState = fiber.memoizedState));
    if (null !== suspenseState) return suspenseState.dehydrated;
  }
  return null;
}
function assertIsMounted(fiber) {
  if (getNearestMountedFiber(fiber) !== fiber)
    throw Error(formatProdErrorMessage(188));
}
function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    alternate = getNearestMountedFiber(fiber);
    if (null === alternate) throw Error(formatProdErrorMessage(188));
    return alternate !== fiber ? null : fiber;
  }
  for (var a = fiber, b = alternate; ; ) {
    var parentA = a.return;
    if (null === parentA) break;
    var parentB = parentA.alternate;
    if (null === parentB) {
      b = parentA.return;
      if (null !== b) {
        a = b;
        continue;
      }
      break;
    }
    if (parentA.child === parentB.child) {
      for (parentB = parentA.child; parentB; ) {
        if (parentB === a) return assertIsMounted(parentA), fiber;
        if (parentB === b) return assertIsMounted(parentA), alternate;
        parentB = parentB.sibling;
      }
      throw Error(formatProdErrorMessage(188));
    }
    if (a.return !== b.return) (a = parentA), (b = parentB);
    else {
      for (var didFindChild = !1, child$2 = parentA.child; child$2; ) {
        if (child$2 === a) {
          didFindChild = !0;
          a = parentA;
          b = parentB;
          break;
        }
        if (child$2 === b) {
          didFindChild = !0;
          b = parentA;
          a = parentB;
          break;
        }
        child$2 = child$2.sibling;
      }
      if (!didFindChild) {
        for (child$2 = parentB.child; child$2; ) {
          if (child$2 === a) {
            didFindChild = !0;
            a = parentB;
            b = parentA;
            break;
          }
          if (child$2 === b) {
            didFindChild = !0;
            b = parentB;
            a = parentA;
            break;
          }
          child$2 = child$2.sibling;
        }
        if (!didFindChild) throw Error(formatProdErrorMessage(189));
      }
    }
    if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
  }
  if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
  return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
  var tag = node.tag;
  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
  for (node = node.child; null !== node; ) {
    tag = findCurrentHostFiberImpl(node);
    if (null !== tag) return tag;
    node = node.sibling;
  }
  return null;
}
var isArrayImpl = Array.isArray,
  ReactDOMSharedInternals =
    ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
  sharedNotPendingObject = {
    pending: !1,
    data: null,
    method: null,
    action: null
  },
  valueStack = [],
  index = -1;
function createCursor(defaultValue) {
  return { current: defaultValue };
}
function pop(cursor) {
  0 > index ||
    ((cursor.current = valueStack[index]), (valueStack[index] = null), index--);
}
function push(cursor, value) {
  index++;
  valueStack[index] = cursor.current;
  cursor.current = value;
}
var contextStackCursor = createCursor(null),
  contextFiberStackCursor = createCursor(null),
  rootInstanceStackCursor = createCursor(null),
  hostTransitionProviderCursor = createCursor(null);
function pushHostContainer(fiber, nextRootInstance) {
  push(rootInstanceStackCursor, nextRootInstance);
  push(contextFiberStackCursor, fiber);
  push(contextStackCursor, null);
  fiber = nextRootInstance.nodeType;
  switch (fiber) {
    case 9:
    case 11:
      nextRootInstance = (nextRootInstance = nextRootInstance.documentElement)
        ? (nextRootInstance = nextRootInstance.namespaceURI)
          ? getOwnHostContext(nextRootInstance)
          : 0
        : 0;
      break;
    default:
      if (
        ((fiber = 8 === fiber ? nextRootInstance.parentNode : nextRootInstance),
        (nextRootInstance = fiber.tagName),
        (fiber = fiber.namespaceURI))
      )
        (fiber = getOwnHostContext(fiber)),
          (nextRootInstance = getChildHostContextProd(fiber, nextRootInstance));
      else
        switch (nextRootInstance) {
          case "svg":
            nextRootInstance = 1;
            break;
          case "math":
            nextRootInstance = 2;
            break;
          default:
            nextRootInstance = 0;
        }
  }
  pop(contextStackCursor);
  push(contextStackCursor, nextRootInstance);
}
function popHostContainer() {
  pop(contextStackCursor);
  pop(contextFiberStackCursor);
  pop(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
  null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
  var context = contextStackCursor.current;
  var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
  context !== JSCompiler_inline_result &&
    (push(contextFiberStackCursor, fiber),
    push(contextStackCursor, JSCompiler_inline_result));
}
function popHostContext(fiber) {
  contextFiberStackCursor.current === fiber &&
    (pop(contextStackCursor), pop(contextFiberStackCursor));
  hostTransitionProviderCursor.current === fiber &&
    (pop(hostTransitionProviderCursor),
    (HostTransitionContext._currentValue = sharedNotPendingObject));
}
var hasOwnProperty = Object.prototype.hasOwnProperty,
  scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
  cancelCallback$1 = Scheduler.unstable_cancelCallback,
  shouldYield = Scheduler.unstable_shouldYield,
  requestPaint = Scheduler.unstable_requestPaint,
  now = Scheduler.unstable_now,
  getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
  ImmediatePriority = Scheduler.unstable_ImmediatePriority,
  UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
  NormalPriority$1 = Scheduler.unstable_NormalPriority,
  LowPriority = Scheduler.unstable_LowPriority,
  IdlePriority = Scheduler.unstable_IdlePriority,
  log$1 = Scheduler.log,
  unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
  rendererID = null,
  injectedHook = null;
function onCommitRoot(root) {
  if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
    try {
      injectedHook.onCommitFiberRoot(
        rendererID,
        root,
        void 0,
        128 === (root.current.flags & 128)
      );
    } catch (err) {}
}
function setIsStrictModeForDevtools(newIsStrictMode) {
  "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
  if (injectedHook && "function" === typeof injectedHook.setStrictMode)
    try {
      injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
  log = Math.log,
  LN2 = Math.LN2;
function clz32Fallback(x) {
  x >>>= 0;
  return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
}
var nextTransitionLane = 128,
  nextRetryLane = 4194304;
function getHighestPriorityLanes(lanes) {
  var pendingSyncLanes = lanes & 42;
  if (0 !== pendingSyncLanes) return pendingSyncLanes;
  switch (lanes & -lanes) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
      return 64;
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return lanes & 4194176;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return lanes & 62914560;
    case 67108864:
      return 67108864;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 0;
    default:
      return lanes;
  }
}
function getNextLanes(root, wipLanes) {
  var pendingLanes = root.pendingLanes;
  if (0 === pendingLanes) return 0;
  var nextLanes = 0,
    suspendedLanes = root.suspendedLanes,
    pingedLanes = root.pingedLanes,
    warmLanes = root.warmLanes;
  root = 0 !== root.finishedLanes;
  var nonIdlePendingLanes = pendingLanes & 134217727;
  0 !== nonIdlePendingLanes
    ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
      0 !== pendingLanes
        ? (nextLanes = getHighestPriorityLanes(pendingLanes))
        : ((pingedLanes &= nonIdlePendingLanes),
          0 !== pingedLanes
            ? (nextLanes = getHighestPriorityLanes(pingedLanes))
            : root ||
              ((warmLanes = nonIdlePendingLanes & ~warmLanes),
              0 !== warmLanes &&
                (nextLanes = getHighestPriorityLanes(warmLanes)))))
    : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
      0 !== nonIdlePendingLanes
        ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
        : 0 !== pingedLanes
          ? (nextLanes = getHighestPriorityLanes(pingedLanes))
          : root ||
            ((warmLanes = pendingLanes & ~warmLanes),
            0 !== warmLanes &&
              (nextLanes = getHighestPriorityLanes(warmLanes))));
  return 0 === nextLanes
    ? 0
    : 0 !== wipLanes &&
        wipLanes !== nextLanes &&
        0 === (wipLanes & suspendedLanes) &&
        ((suspendedLanes = nextLanes & -nextLanes),
        (warmLanes = wipLanes & -wipLanes),
        suspendedLanes >= warmLanes ||
          (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))
      ? wipLanes
      : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
  return (
    0 ===
    (root.pendingLanes &
      ~(root.suspendedLanes & ~root.pingedLanes) &
      renderLanes)
  );
}
function computeExpirationTime(lane, currentTime) {
  switch (lane) {
    case 1:
    case 2:
    case 4:
    case 8:
      return currentTime + 250;
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return currentTime + 5e3;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return -1;
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function claimNextTransitionLane() {
  var lane = nextTransitionLane;
  nextTransitionLane <<= 1;
  0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
  return lane;
}
function claimNextRetryLane() {
  var lane = nextRetryLane;
  nextRetryLane <<= 1;
  0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
  return lane;
}
function createLaneMap(initial) {
  for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
  return laneMap;
}
function markRootUpdated$1(root, updateLane) {
  root.pendingLanes |= updateLane;
  268435456 !== updateLane &&
    ((root.suspendedLanes = 0), (root.pingedLanes = 0), (root.warmLanes = 0));
}
function markRootFinished(
  root,
  finishedLanes,
  remainingLanes,
  spawnedLane,
  updatedLanes,
  suspendedRetryLanes
) {
  var previouslyPendingLanes = root.pendingLanes;
  root.pendingLanes = remainingLanes;
  root.suspendedLanes = 0;
  root.pingedLanes = 0;
  root.warmLanes = 0;
  root.expiredLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  root.errorRecoveryDisabledLanes &= remainingLanes;
  root.shellSuspendCounter = 0;
  var entanglements = root.entanglements,
    expirationTimes = root.expirationTimes,
    hiddenUpdates = root.hiddenUpdates;
  for (
    remainingLanes = previouslyPendingLanes & ~remainingLanes;
    0 < remainingLanes;

  ) {
    var index$7 = 31 - clz32(remainingLanes),
      lane = 1 << index$7;
    entanglements[index$7] = 0;
    expirationTimes[index$7] = -1;
    var hiddenUpdatesForLane = hiddenUpdates[index$7];
    if (null !== hiddenUpdatesForLane)
      for (
        hiddenUpdates[index$7] = null, index$7 = 0;
        index$7 < hiddenUpdatesForLane.length;
        index$7++
      ) {
        var update = hiddenUpdatesForLane[index$7];
        null !== update && (update.lane &= -536870913);
      }
    remainingLanes &= ~lane;
  }
  0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
  0 !== suspendedRetryLanes &&
    0 === updatedLanes &&
    0 !== root.tag &&
    (root.suspendedLanes |=
      suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
  root.pendingLanes |= spawnedLane;
  root.suspendedLanes &= ~spawnedLane;
  var spawnedLaneIndex = 31 - clz32(spawnedLane);
  root.entangledLanes |= spawnedLane;
  root.entanglements[spawnedLaneIndex] =
    root.entanglements[spawnedLaneIndex] |
    1073741824 |
    (entangledLanes & 4194218);
}
function markRootEntangled(root, entangledLanes) {
  var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
  for (root = root.entanglements; rootEntangledLanes; ) {
    var index$8 = 31 - clz32(rootEntangledLanes),
      lane = 1 << index$8;
    (lane & entangledLanes) | (root[index$8] & entangledLanes) &&
      (root[index$8] |= entangledLanes);
    rootEntangledLanes &= ~lane;
  }
}
function lanesToEventPriority(lanes) {
  lanes &= -lanes;
  return 2 < lanes
    ? 8 < lanes
      ? 0 !== (lanes & 134217727)
        ? 32
        : 268435456
      : 8
    : 2;
}
function resolveUpdatePriority() {
  var updatePriority = ReactDOMSharedInternals.p;
  if (0 !== updatePriority) return updatePriority;
  updatePriority = window.event;
  return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
}
function runWithPriority(priority, fn) {
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    return (ReactDOMSharedInternals.p = priority), fn();
  } finally {
    ReactDOMSharedInternals.p = previousPriority;
  }
}
var randomKey = Math.random().toString(36).slice(2),
  internalInstanceKey = "__reactFiber$" + randomKey,
  internalPropsKey = "__reactProps$" + randomKey,
  internalContainerInstanceKey = "__reactContainer$" + randomKey,
  internalEventHandlersKey = "__reactEvents$" + randomKey,
  internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
  internalEventHandlesSetKey = "__reactHandles$" + randomKey,
  internalRootNodeResourcesKey = "__reactResources$" + randomKey,
  internalHoistableMarker = "__reactMarker$" + randomKey;
function detachDeletedInstance(node) {
  delete node[internalInstanceKey];
  delete node[internalPropsKey];
  delete node[internalEventHandlersKey];
  delete node[internalEventHandlerListenersKey];
  delete node[internalEventHandlesSetKey];
}
function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];
  if (targetInst) return targetInst;
  for (var parentNode = targetNode.parentNode; parentNode; ) {
    if (
      (targetInst =
        parentNode[internalContainerInstanceKey] ||
        parentNode[internalInstanceKey])
    ) {
      parentNode = targetInst.alternate;
      if (
        null !== targetInst.child ||
        (null !== parentNode && null !== parentNode.child)
      )
        for (
          targetNode = getParentSuspenseInstance(targetNode);
          null !== targetNode;

        ) {
          if ((parentNode = targetNode[internalInstanceKey])) return parentNode;
          targetNode = getParentSuspenseInstance(targetNode);
        }
      return targetInst;
    }
    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }
  return null;
}
function getInstanceFromNode(node) {
  if (
    (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
  ) {
    var tag = node.tag;
    if (
      5 === tag ||
      6 === tag ||
      13 === tag ||
      26 === tag ||
      27 === tag ||
      3 === tag
    )
      return node;
  }
  return null;
}
function getNodeFromInstance(inst) {
  var tag = inst.tag;
  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
  throw Error(formatProdErrorMessage(33));
}
function getResourcesFromRoot(root) {
  var resources = root[internalRootNodeResourcesKey];
  resources ||
    (resources = root[internalRootNodeResourcesKey] =
      { hoistableStyles: new Map(), hoistableScripts: new Map() });
  return resources;
}
function markNodeAsHoistable(node) {
  node[internalHoistableMarker] = !0;
}
var allNativeEvents = new Set(),
  registrationNameDependencies = {};
function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + "Capture", dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  registrationNameDependencies[registrationName] = dependencies;
  for (
    registrationName = 0;
    registrationName < dependencies.length;
    registrationName++
  )
    allNativeEvents.add(dependencies[registrationName]);
}
var canUseDOM = !(
    "undefined" === typeof window ||
    "undefined" === typeof window.document ||
    "undefined" === typeof window.document.createElement
  ),
  VALID_ATTRIBUTE_NAME_REGEX = RegExp(
    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
  ),
  illegalAttributeNameCache = {},
  validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
    return !0;
  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return !1;
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
    return (validatedAttributeNameCache[attributeName] = !0);
  illegalAttributeNameCache[attributeName] = !0;
  return !1;
}
function setValueForAttribute(node, name, value) {
  if (isAttributeNameSafe(name))
    if (null === value) node.removeAttribute(name);
    else {
      switch (typeof value) {
        case "undefined":
        case "function":
        case "symbol":
          node.removeAttribute(name);
          return;
        case "boolean":
          var prefix$10 = name.toLowerCase().slice(0, 5);
          if ("data-" !== prefix$10 && "aria-" !== prefix$10) {
            node.removeAttribute(name);
            return;
          }
      }
      node.setAttribute(name, "" + value);
    }
}
function setValueForKnownAttribute(node, name, value) {
  if (null === value) node.removeAttribute(name);
  else {
    switch (typeof value) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        node.removeAttribute(name);
        return;
    }
    node.setAttribute(name, "" + value);
  }
}
function setValueForNamespacedAttribute(node, namespace, name, value) {
  if (null === value) node.removeAttribute(name);
  else {
    switch (typeof value) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        node.removeAttribute(name);
        return;
    }
    node.setAttributeNS(namespace, name, "" + value);
  }
}
function getToStringValue(value) {
  switch (typeof value) {
    case "bigint":
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return value;
    case "object":
      return value;
    default:
      return "";
  }
}
function isCheckable(elem) {
  var type = elem.type;
  return (
    (elem = elem.nodeName) &&
    "input" === elem.toLowerCase() &&
    ("checkbox" === type || "radio" === type)
  );
}
function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? "checked" : "value",
    descriptor = Object.getOwnPropertyDescriptor(
      node.constructor.prototype,
      valueField
    ),
    currentValue = "" + node[valueField];
  if (
    !node.hasOwnProperty(valueField) &&
    "undefined" !== typeof descriptor &&
    "function" === typeof descriptor.get &&
    "function" === typeof descriptor.set
  ) {
    var get = descriptor.get,
      set = descriptor.set;
    Object.defineProperty(node, valueField, {
      configurable: !0,
      get: function () {
        return get.call(this);
      },
      set: function (value) {
        currentValue = "" + value;
        set.call(this, value);
      }
    });
    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable
    });
    return {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = "" + value;
      },
      stopTracking: function () {
        node._valueTracker = null;
        delete node[valueField];
      }
    };
  }
}
function track(node) {
  node._valueTracker || (node._valueTracker = trackValueOnNode(node));
}
function updateValueIfChanged(node) {
  if (!node) return !1;
  var tracker = node._valueTracker;
  if (!tracker) return !0;
  var lastValue = tracker.getValue();
  var value = "";
  node &&
    (value = isCheckable(node)
      ? node.checked
        ? "true"
        : "false"
      : node.value);
  node = value;
  return node !== lastValue ? (tracker.setValue(node), !0) : !1;
}
function getActiveElement(doc) {
  doc = doc || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof doc) return null;
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}
var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
  return value.replace(
    escapeSelectorAttributeValueInsideDoubleQuotesRegex,
    function (ch) {
      return "\\" + ch.charCodeAt(0).toString(16) + " ";
    }
  );
}
function updateInput(
  element,
  value,
  defaultValue,
  lastDefaultValue,
  checked,
  defaultChecked,
  type,
  name
) {
  element.name = "";
  null != type &&
  "function" !== typeof type &&
  "symbol" !== typeof type &&
  "boolean" !== typeof type
    ? (element.type = type)
    : element.removeAttribute("type");
  if (null != value)
    if ("number" === type) {
      if ((0 === value && "" === element.value) || element.value != value)
        element.value = "" + getToStringValue(value);
    } else
      element.value !== "" + getToStringValue(value) &&
        (element.value = "" + getToStringValue(value));
  else
    ("submit" !== type && "reset" !== type) || element.removeAttribute("value");
  null != value
    ? setDefaultValue(element, type, getToStringValue(value))
    : null != defaultValue
      ? setDefaultValue(element, type, getToStringValue(defaultValue))
      : null != lastDefaultValue && element.removeAttribute("value");
  null == checked &&
    null != defaultChecked &&
    (element.defaultChecked = !!defaultChecked);
  null != checked &&
    (element.checked =
      checked && "function" !== typeof checked && "symbol" !== typeof checked);
  null != name &&
  "function" !== typeof name &&
  "symbol" !== typeof name &&
  "boolean" !== typeof name
    ? (element.name = "" + getToStringValue(name))
    : element.removeAttribute("name");
}
function initInput(
  element,
  value,
  defaultValue,
  checked,
  defaultChecked,
  type,
  name,
  isHydrating
) {
  null != type &&
    "function" !== typeof type &&
    "symbol" !== typeof type &&
    "boolean" !== typeof type &&
    (element.type = type);
  if (null != value || null != defaultValue) {
    if (
      !(
        ("submit" !== type && "reset" !== type) ||
        (void 0 !== value && null !== value)
      )
    )
      return;
    defaultValue =
      null != defaultValue ? "" + getToStringValue(defaultValue) : "";
    value = null != value ? "" + getToStringValue(value) : defaultValue;
    isHydrating || value === element.value || (element.value = value);
    element.defaultValue = value;
  }
  checked = null != checked ? checked : defaultChecked;
  checked =
    "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
  element.checked = isHydrating ? element.checked : !!checked;
  element.defaultChecked = !!checked;
  null != name &&
    "function" !== typeof name &&
    "symbol" !== typeof name &&
    "boolean" !== typeof name &&
    (element.name = name);
}
function setDefaultValue(node, type, value) {
  ("number" === type && getActiveElement(node.ownerDocument) === node) ||
    node.defaultValue === "" + value ||
    (node.defaultValue = "" + value);
}
function updateOptions(node, multiple, propValue, setDefaultSelected) {
  node = node.options;
  if (multiple) {
    multiple = {};
    for (var i = 0; i < propValue.length; i++)
      multiple["$" + propValue[i]] = !0;
    for (propValue = 0; propValue < node.length; propValue++)
      (i = multiple.hasOwnProperty("$" + node[propValue].value)),
        node[propValue].selected !== i && (node[propValue].selected = i),
        i && setDefaultSelected && (node[propValue].defaultSelected = !0);
  } else {
    propValue = "" + getToStringValue(propValue);
    multiple = null;
    for (i = 0; i < node.length; i++) {
      if (node[i].value === propValue) {
        node[i].selected = !0;
        setDefaultSelected && (node[i].defaultSelected = !0);
        return;
      }
      null !== multiple || node[i].disabled || (multiple = node[i]);
    }
    null !== multiple && (multiple.selected = !0);
  }
}
function updateTextarea(element, value, defaultValue) {
  if (
    null != value &&
    ((value = "" + getToStringValue(value)),
    value !== element.value && (element.value = value),
    null == defaultValue)
  ) {
    element.defaultValue !== value && (element.defaultValue = value);
    return;
  }
  element.defaultValue =
    null != defaultValue ? "" + getToStringValue(defaultValue) : "";
}
function initTextarea(element, value, defaultValue, children) {
  if (null == value) {
    if (null != children) {
      if (null != defaultValue) throw Error(formatProdErrorMessage(92));
      if (isArrayImpl(children)) {
        if (1 < children.length) throw Error(formatProdErrorMessage(93));
        children = children[0];
      }
      defaultValue = children;
    }
    null == defaultValue && (defaultValue = "");
    value = defaultValue;
  }
  defaultValue = getToStringValue(value);
  element.defaultValue = defaultValue;
  children = element.textContent;
  children === defaultValue &&
    "" !== children &&
    null !== children &&
    (element.value = children);
}
function setTextContent(node, text) {
  if (text) {
    var firstChild = node.firstChild;
    if (
      firstChild &&
      firstChild === node.lastChild &&
      3 === firstChild.nodeType
    ) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
}
var unitlessNumbers = new Set(
  "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
    " "
  )
);
function setValueForStyle(style, styleName, value) {
  var isCustomProperty = 0 === styleName.indexOf("--");
  null == value || "boolean" === typeof value || "" === value
    ? isCustomProperty
      ? style.setProperty(styleName, "")
      : "float" === styleName
        ? (style.cssFloat = "")
        : (style[styleName] = "")
    : isCustomProperty
      ? style.setProperty(styleName, value)
      : "number" !== typeof value ||
          0 === value ||
          unitlessNumbers.has(styleName)
        ? "float" === styleName
          ? (style.cssFloat = value)
          : (style[styleName] = ("" + value).trim())
        : (style[styleName] = value + "px");
}
function setValueForStyles(node, styles, prevStyles) {
  if (null != styles && "object" !== typeof styles)
    throw Error(formatProdErrorMessage(62));
  node = node.style;
  if (null != prevStyles) {
    for (var styleName in prevStyles)
      !prevStyles.hasOwnProperty(styleName) ||
        (null != styles && styles.hasOwnProperty(styleName)) ||
        (0 === styleName.indexOf("--")
          ? node.setProperty(styleName, "")
          : "float" === styleName
            ? (node.cssFloat = "")
            : (node[styleName] = ""));
    for (var styleName$16 in styles)
      (styleName = styles[styleName$16]),
        styles.hasOwnProperty(styleName$16) &&
          prevStyles[styleName$16] !== styleName &&
          setValueForStyle(node, styleName$16, styleName);
  } else
    for (var styleName$17 in styles)
      styles.hasOwnProperty(styleName$17) &&
        setValueForStyle(node, styleName$17, styles[styleName$17]);
}
function isCustomElement(tagName) {
  if (-1 === tagName.indexOf("-")) return !1;
  switch (tagName) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;
    default:
      return !0;
  }
}
var aliases = new Map([
    ["acceptCharset", "accept-charset"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
    ["crossOrigin", "crossorigin"],
    ["accentHeight", "accent-height"],
    ["alignmentBaseline", "alignment-baseline"],
    ["arabicForm", "arabic-form"],
    ["baselineShift", "baseline-shift"],
    ["capHeight", "cap-height"],
    ["clipPath", "clip-path"],
    ["clipRule", "clip-rule"],
    ["colorInterpolation", "color-interpolation"],
    ["colorInterpolationFilters", "color-interpolation-filters"],
    ["colorProfile", "color-profile"],
    ["colorRendering", "color-rendering"],
    ["dominantBaseline", "dominant-baseline"],
    ["enableBackground", "enable-background"],
    ["fillOpacity", "fill-opacity"],
    ["fillRule", "fill-rule"],
    ["floodColor", "flood-color"],
    ["floodOpacity", "flood-opacity"],
    ["fontFamily", "font-family"],
    ["fontSize", "font-size"],
    ["fontSizeAdjust", "font-size-adjust"],
    ["fontStretch", "font-stretch"],
    ["fontStyle", "font-style"],
    ["fontVariant", "font-variant"],
    ["fontWeight", "font-weight"],
    ["glyphName", "glyph-name"],
    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
    ["glyphOrientationVertical", "glyph-orientation-vertical"],
    ["horizAdvX", "horiz-adv-x"],
    ["horizOriginX", "horiz-origin-x"],
    ["imageRendering", "image-rendering"],
    ["letterSpacing", "letter-spacing"],
    ["lightingColor", "lighting-color"],
    ["markerEnd", "marker-end"],
    ["markerMid", "marker-mid"],
    ["markerStart", "marker-start"],
    ["overlinePosition", "overline-position"],
    ["overlineThickness", "overline-thickness"],
    ["paintOrder", "paint-order"],
    ["panose-1", "panose-1"],
    ["pointerEvents", "pointer-events"],
    ["renderingIntent", "rendering-intent"],
    ["shapeRendering", "shape-rendering"],
    ["stopColor", "stop-color"],
    ["stopOpacity", "stop-opacity"],
    ["strikethroughPosition", "strikethrough-position"],
    ["strikethroughThickness", "strikethrough-thickness"],
    ["strokeDasharray", "stroke-dasharray"],
    ["strokeDashoffset", "stroke-dashoffset"],
    ["strokeLinecap", "stroke-linecap"],
    ["strokeLinejoin", "stroke-linejoin"],
    ["strokeMiterlimit", "stroke-miterlimit"],
    ["strokeOpacity", "stroke-opacity"],
    ["strokeWidth", "stroke-width"],
    ["textAnchor", "text-anchor"],
    ["textDecoration", "text-decoration"],
    ["textRendering", "text-rendering"],
    ["transformOrigin", "transform-origin"],
    ["underlinePosition", "underline-position"],
    ["underlineThickness", "underline-thickness"],
    ["unicodeBidi", "unicode-bidi"],
    ["unicodeRange", "unicode-range"],
    ["unitsPerEm", "units-per-em"],
    ["vAlphabetic", "v-alphabetic"],
    ["vHanging", "v-hanging"],
    ["vIdeographic", "v-ideographic"],
    ["vMathematical", "v-mathematical"],
    ["vectorEffect", "vector-effect"],
    ["vertAdvY", "vert-adv-y"],
    ["vertOriginX", "vert-origin-x"],
    ["vertOriginY", "vert-origin-y"],
    ["wordSpacing", "word-spacing"],
    ["writingMode", "writing-mode"],
    ["xmlnsXlink", "xmlns:xlink"],
    ["xHeight", "x-height"]
  ]),
  isJavaScriptProtocol =
    /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
function sanitizeURL(url) {
  return isJavaScriptProtocol.test("" + url)
    ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
    : url;
}
var currentReplayingEvent = null;
function getEventTarget(nativeEvent) {
  nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
  nativeEvent.correspondingUseElement &&
    (nativeEvent = nativeEvent.correspondingUseElement);
  return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
}
var restoreTarget = null,
  restoreQueue = null;
function restoreStateOfTarget(target) {
  var internalInstance = getInstanceFromNode(target);
  if (internalInstance && (target = internalInstance.stateNode)) {
    var props = target[internalPropsKey] || null;
    a: switch (((target = internalInstance.stateNode), internalInstance.type)) {
      case "input":
        updateInput(
          target,
          props.value,
          props.defaultValue,
          props.defaultValue,
          props.checked,
          props.defaultChecked,
          props.type,
          props.name
        );
        internalInstance = props.name;
        if ("radio" === props.type && null != internalInstance) {
          for (props = target; props.parentNode; ) props = props.parentNode;
          props = props.querySelectorAll(
            'input[name="' +
              escapeSelectorAttributeValueInsideDoubleQuotes(
                "" + internalInstance
              ) +
              '"][type="radio"]'
          );
          for (
            internalInstance = 0;
            internalInstance < props.length;
            internalInstance++
          ) {
            var otherNode = props[internalInstance];
            if (otherNode !== target && otherNode.form === target.form) {
              var otherProps = otherNode[internalPropsKey] || null;
              if (!otherProps) throw Error(formatProdErrorMessage(90));
              updateInput(
                otherNode,
                otherProps.value,
                otherProps.defaultValue,
                otherProps.defaultValue,
                otherProps.checked,
                otherProps.defaultChecked,
                otherProps.type,
                otherProps.name
              );
            }
          }
          for (
            internalInstance = 0;
            internalInstance < props.length;
            internalInstance++
          )
            (otherNode = props[internalInstance]),
              otherNode.form === target.form && updateValueIfChanged(otherNode);
        }
        break a;
      case "textarea":
        updateTextarea(target, props.value, props.defaultValue);
        break a;
      case "select":
        (internalInstance = props.value),
          null != internalInstance &&
            updateOptions(target, !!props.multiple, internalInstance, !1);
    }
  }
}
var isInsideEventHandler = !1;
function batchedUpdates$1(fn, a, b) {
  if (isInsideEventHandler) return fn(a, b);
  isInsideEventHandler = !0;
  try {
    var JSCompiler_inline_result = fn(a);
    return JSCompiler_inline_result;
  } finally {
    if (
      ((isInsideEventHandler = !1),
      null !== restoreTarget || null !== restoreQueue)
    )
      if (
        (flushSyncWork$1(),
        restoreTarget &&
          ((a = restoreTarget),
          (fn = restoreQueue),
          (restoreQueue = restoreTarget = null),
          restoreStateOfTarget(a),
          fn))
      )
        for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
  }
}
function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;
  if (null === stateNode) return null;
  var props = stateNode[internalPropsKey] || null;
  if (null === props) return null;
  stateNode = props[registrationName];
  a: switch (registrationName) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (props = !props.disabled) ||
        ((inst = inst.type),
        (props = !(
          "button" === inst ||
          "input" === inst ||
          "select" === inst ||
          "textarea" === inst
        )));
      inst = !props;
      break a;
    default:
      inst = !1;
  }
  if (inst) return null;
  if (stateNode && "function" !== typeof stateNode)
    throw Error(
      formatProdErrorMessage(231, registrationName, typeof stateNode)
    );
  return stateNode;
}
var passiveBrowserEventsSupported = !1;
if (canUseDOM)
  try {
    var options = {};
    Object.defineProperty(options, "passive", {
      get: function () {
        passiveBrowserEventsSupported = !0;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (e) {
    passiveBrowserEventsSupported = !1;
  }
var root = null,
  startText = null,
  fallbackText = null;
function getData() {
  if (fallbackText) return fallbackText;
  var start,
    startValue = startText,
    startLength = startValue.length,
    end,
    endValue = "value" in root ? root.value : root.textContent,
    endLength = endValue.length;
  for (
    start = 0;
    start < startLength && startValue[start] === endValue[start];
    start++
  );
  var minEnd = startLength - start;
  for (
    end = 1;
    end <= minEnd &&
    startValue[startLength - end] === endValue[endLength - end];
    end++
  );
  return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0));
}
function getEventCharCode(nativeEvent) {
  var keyCode = nativeEvent.keyCode;
  "charCode" in nativeEvent
    ? ((nativeEvent = nativeEvent.charCode),
      0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
    : (nativeEvent = keyCode);
  10 === nativeEvent && (nativeEvent = 13);
  return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
}
function functionThatReturnsTrue() {
  return !0;
}
function functionThatReturnsFalse() {
  return !1;
}
function createSyntheticEvent(Interface) {
  function SyntheticBaseEvent(
    reactName,
    reactEventType,
    targetInst,
    nativeEvent,
    nativeEventTarget
  ) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;
    for (var propName in Interface)
      Interface.hasOwnProperty(propName) &&
        ((reactName = Interface[propName]),
        (this[propName] = reactName
          ? reactName(nativeEvent)
          : nativeEvent[propName]));
    this.isDefaultPrevented = (
      null != nativeEvent.defaultPrevented
        ? nativeEvent.defaultPrevented
        : !1 === nativeEvent.returnValue
    )
      ? functionThatReturnsTrue
      : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = !0;
      var event = this.nativeEvent;
      event &&
        (event.preventDefault
          ? event.preventDefault()
          : "unknown" !== typeof event.returnValue && (event.returnValue = !1),
        (this.isDefaultPrevented = functionThatReturnsTrue));
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      event &&
        (event.stopPropagation
          ? event.stopPropagation()
          : "unknown" !== typeof event.cancelBubble &&
            (event.cancelBubble = !0),
        (this.isPropagationStopped = functionThatReturnsTrue));
    },
    persist: function () {},
    isPersistent: functionThatReturnsTrue
  });
  return SyntheticBaseEvent;
}
var EventInterface = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  },
  SyntheticEvent = createSyntheticEvent(EventInterface),
  UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
  SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
  lastMovementX,
  lastMovementY,
  lastMouseEvent,
  MouseEventInterface = assign({}, UIEventInterface, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: getEventModifierState,
    button: 0,
    buttons: 0,
    relatedTarget: function (event) {
      return void 0 === event.relatedTarget
        ? event.fromElement === event.srcElement
          ? event.toElement
          : event.fromElement
        : event.relatedTarget;
    },
    movementX: function (event) {
      if ("movementX" in event) return event.movementX;
      event !== lastMouseEvent &&
        (lastMouseEvent && "mousemove" === event.type
          ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
            (lastMovementY = event.screenY - lastMouseEvent.screenY))
          : (lastMovementY = lastMovementX = 0),
        (lastMouseEvent = event));
      return lastMovementX;
    },
    movementY: function (event) {
      return "movementY" in event ? event.movementY : lastMovementY;
    }
  }),
  SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
  DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
  SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
  FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
  SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
  AnimationEventInterface = assign({}, EventInterface, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
  ClipboardEventInterface = assign({}, EventInterface, {
    clipboardData: function (event) {
      return "clipboardData" in event
        ? event.clipboardData
        : window.clipboardData;
    }
  }),
  SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
  CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
  SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface),
  normalizeKey = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  },
  translateToKey = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  },
  modifierKeyToProp = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
function modifierStateGetter(keyArg) {
  var nativeEvent = this.nativeEvent;
  return nativeEvent.getModifierState
    ? nativeEvent.getModifierState(keyArg)
    : (keyArg = modifierKeyToProp[keyArg])
      ? !!nativeEvent[keyArg]
      : !1;
}
function getEventModifierState() {
  return modifierStateGetter;
}
var KeyboardEventInterface = assign({}, UIEventInterface, {
    key: function (nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if ("Unidentified" !== key) return key;
      }
      return "keypress" === nativeEvent.type
        ? ((nativeEvent = getEventCharCode(nativeEvent)),
          13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
        : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
          ? translateToKey[nativeEvent.keyCode] || "Unidentified"
          : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: getEventModifierState,
    charCode: function (event) {
      return "keypress" === event.type ? getEventCharCode(event) : 0;
    },
    keyCode: function (event) {
      return "keydown" === event.type || "keyup" === event.type
        ? event.keyCode
        : 0;
    },
    which: function (event) {
      return "keypress" === event.type
        ? getEventCharCode(event)
        : "keydown" === event.type || "keyup" === event.type
          ? event.keyCode
          : 0;
    }
  }),
  SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
  PointerEventInterface = assign({}, MouseEventInterface, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }),
  SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
  TouchEventInterface = assign({}, UIEventInterface, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: getEventModifierState
  }),
  SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
  TransitionEventInterface = assign({}, EventInterface, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }),
  SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
  WheelEventInterface = assign({}, MouseEventInterface, {
    deltaX: function (event) {
      return "deltaX" in event
        ? event.deltaX
        : "wheelDeltaX" in event
          ? -event.wheelDeltaX
          : 0;
    },
    deltaY: function (event) {
      return "deltaY" in event
        ? event.deltaY
        : "wheelDeltaY" in event
          ? -event.wheelDeltaY
          : "wheelDelta" in event
            ? -event.wheelDelta
            : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }),
  SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
  ToggleEventInterface = assign({}, EventInterface, {
    newState: 0,
    oldState: 0
  }),
  SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
  END_KEYCODES = [9, 13, 27, 32],
  canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
  documentMode = null;
canUseDOM &&
  "documentMode" in document &&
  (documentMode = document.documentMode);
var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode,
  useFallbackCompositionData =
    canUseDOM &&
    (!canUseCompositionEvent ||
      (documentMode && 8 < documentMode && 11 >= documentMode)),
  SPACEBAR_CHAR = String.fromCharCode(32),
  hasSpaceKeypress = !1;
function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case "keyup":
      return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
    case "keydown":
      return 229 !== nativeEvent.keyCode;
    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;
    default:
      return !1;
  }
}
function getDataFromCustomEvent(nativeEvent) {
  nativeEvent = nativeEvent.detail;
  return "object" === typeof nativeEvent && "data" in nativeEvent
    ? nativeEvent.data
    : null;
}
var isComposing = !1;
function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case "compositionend":
      return getDataFromCustomEvent(nativeEvent);
    case "keypress":
      if (32 !== nativeEvent.which) return null;
      hasSpaceKeypress = !0;
      return SPACEBAR_CHAR;
    case "textInput":
      return (
        (domEventName = nativeEvent.data),
        domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName
      );
    default:
      return null;
  }
}
function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  if (isComposing)
    return "compositionend" === domEventName ||
      (!canUseCompositionEvent &&
        isFallbackCompositionEnd(domEventName, nativeEvent))
      ? ((domEventName = getData()),
        (fallbackText = startText = root = null),
        (isComposing = !1),
        domEventName)
      : null;
  switch (domEventName) {
    case "paste":
      return null;
    case "keypress":
      if (
        !(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) ||
        (nativeEvent.ctrlKey && nativeEvent.altKey)
      ) {
        if (nativeEvent.char && 1 < nativeEvent.char.length)
          return nativeEvent.char;
        if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case "compositionend":
      return useFallbackCompositionData && "ko" !== nativeEvent.locale
        ? null
        : nativeEvent.data;
    default:
      return null;
  }
}
var supportedInputTypes = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};
function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return "input" === nodeName
    ? !!supportedInputTypes[elem.type]
    : "textarea" === nodeName
      ? !0
      : !1;
}
function createAndAccumulateChangeEvent(
  dispatchQueue,
  inst,
  nativeEvent,
  target
) {
  restoreTarget
    ? restoreQueue
      ? restoreQueue.push(target)
      : (restoreQueue = [target])
    : (restoreTarget = target);
  inst = accumulateTwoPhaseListeners(inst, "onChange");
  0 < inst.length &&
    ((nativeEvent = new SyntheticEvent(
      "onChange",
      "change",
      null,
      nativeEvent,
      target
    )),
    dispatchQueue.push({ event: nativeEvent, listeners: inst }));
}
var activeElement$1 = null,
  activeElementInst$1 = null;
function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}
function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);
  if (updateValueIfChanged(targetNode)) return targetInst;
}
function getTargetInstForChangeEvent(domEventName, targetInst) {
  if ("change" === domEventName) return targetInst;
}
var isInputEventSupported = !1;
if (canUseDOM) {
  var JSCompiler_inline_result$jscomp$283;
  if (canUseDOM) {
    var isSupported$jscomp$inline_418 = "oninput" in document;
    if (!isSupported$jscomp$inline_418) {
      var element$jscomp$inline_419 = document.createElement("div");
      element$jscomp$inline_419.setAttribute("oninput", "return;");
      isSupported$jscomp$inline_418 =
        "function" === typeof element$jscomp$inline_419.oninput;
    }
    JSCompiler_inline_result$jscomp$283 = isSupported$jscomp$inline_418;
  } else JSCompiler_inline_result$jscomp$283 = !1;
  isInputEventSupported =
    JSCompiler_inline_result$jscomp$283 &&
    (!document.documentMode || 9 < document.documentMode);
}
function stopWatchingForValueChange() {
  activeElement$1 &&
    (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
    (activeElementInst$1 = activeElement$1 = null));
}
function handlePropertyChange(nativeEvent) {
  if (
    "value" === nativeEvent.propertyName &&
    getInstIfValueChanged(activeElementInst$1)
  ) {
    var dispatchQueue = [];
    createAndAccumulateChangeEvent(
      dispatchQueue,
      activeElementInst$1,
      nativeEvent,
      getEventTarget(nativeEvent)
    );
    batchedUpdates$1(runEventInBatch, dispatchQueue);
  }
}
function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  "focusin" === domEventName
    ? (stopWatchingForValueChange(),
      (activeElement$1 = target),
      (activeElementInst$1 = targetInst),
      activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
    : "focusout" === domEventName && stopWatchingForValueChange();
}
function getTargetInstForInputEventPolyfill(domEventName) {
  if (
    "selectionchange" === domEventName ||
    "keyup" === domEventName ||
    "keydown" === domEventName
  )
    return getInstIfValueChanged(activeElementInst$1);
}
function getTargetInstForClickEvent(domEventName, targetInst) {
  if ("click" === domEventName) return getInstIfValueChanged(targetInst);
}
function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if ("input" === domEventName || "change" === domEventName)
    return getInstIfValueChanged(targetInst);
}
function is(x, y) {
  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
}
var objectIs = "function" === typeof Object.is ? Object.is : is;
function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) return !0;
  if (
    "object" !== typeof objA ||
    null === objA ||
    "object" !== typeof objB ||
    null === objB
  )
    return !1;
  var keysA = Object.keys(objA),
    keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return !1;
  for (keysB = 0; keysB < keysA.length; keysB++) {
    var currentKey = keysA[keysB];
    if (
      !hasOwnProperty.call(objB, currentKey) ||
      !objectIs(objA[currentKey], objB[currentKey])
    )
      return !1;
  }
  return !0;
}
function getLeafNode(node) {
  for (; node && node.firstChild; ) node = node.firstChild;
  return node;
}
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  root = 0;
  for (var nodeEnd; node; ) {
    if (3 === node.nodeType) {
      nodeEnd = root + node.textContent.length;
      if (root <= offset && nodeEnd >= offset)
        return { node: node, offset: offset - root };
      root = nodeEnd;
    }
    a: {
      for (; node; ) {
        if (node.nextSibling) {
          node = node.nextSibling;
          break a;
        }
        node = node.parentNode;
      }
      node = void 0;
    }
    node = getLeafNode(node);
  }
}
function containsNode(outerNode, innerNode) {
  return outerNode && innerNode
    ? outerNode === innerNode
      ? !0
      : outerNode && 3 === outerNode.nodeType
        ? !1
        : innerNode && 3 === innerNode.nodeType
          ? containsNode(outerNode, innerNode.parentNode)
          : "contains" in outerNode
            ? outerNode.contains(innerNode)
            : outerNode.compareDocumentPosition
              ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
              : !1
    : !1;
}
function getActiveElementDeep(containerInfo) {
  containerInfo =
    null != containerInfo &&
    null != containerInfo.ownerDocument &&
    null != containerInfo.ownerDocument.defaultView
      ? containerInfo.ownerDocument.defaultView
      : window;
  for (
    var element = getActiveElement(containerInfo.document);
    element instanceof containerInfo.HTMLIFrameElement;

  ) {
    try {
      var JSCompiler_inline_result =
        "string" === typeof element.contentWindow.location.href;
    } catch (err) {
      JSCompiler_inline_result = !1;
    }
    if (JSCompiler_inline_result) containerInfo = element.contentWindow;
    else break;
    element = getActiveElement(containerInfo.document);
  }
  return element;
}
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return (
    nodeName &&
    (("input" === nodeName &&
      ("text" === elem.type ||
        "search" === elem.type ||
        "tel" === elem.type ||
        "url" === elem.type ||
        "password" === elem.type)) ||
      "textarea" === nodeName ||
      "true" === elem.contentEditable)
  );
}
function restoreSelection(priorSelectionInformation, containerInfo) {
  var curFocusedElem = getActiveElementDeep(containerInfo);
  containerInfo = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (
    curFocusedElem !== containerInfo &&
    containerInfo &&
    containerInfo.ownerDocument &&
    containsNode(containerInfo.ownerDocument.documentElement, containerInfo)
  ) {
    if (null !== priorSelectionRange && hasSelectionCapabilities(containerInfo))
      if (
        ((priorSelectionInformation = priorSelectionRange.start),
        (curFocusedElem = priorSelectionRange.end),
        void 0 === curFocusedElem &&
          (curFocusedElem = priorSelectionInformation),
        "selectionStart" in containerInfo)
      )
        (containerInfo.selectionStart = priorSelectionInformation),
          (containerInfo.selectionEnd = Math.min(
            curFocusedElem,
            containerInfo.value.length
          ));
      else if (
        ((curFocusedElem =
          ((priorSelectionInformation =
            containerInfo.ownerDocument || document) &&
            priorSelectionInformation.defaultView) ||
          window),
        curFocusedElem.getSelection)
      ) {
        curFocusedElem = curFocusedElem.getSelection();
        var length = containerInfo.textContent.length,
          start = Math.min(priorSelectionRange.start, length);
        priorSelectionRange =
          void 0 === priorSelectionRange.end
            ? start
            : Math.min(priorSelectionRange.end, length);
        !curFocusedElem.extend &&
          start > priorSelectionRange &&
          ((length = priorSelectionRange),
          (priorSelectionRange = start),
          (start = length));
        length = getNodeForCharacterOffset(containerInfo, start);
        var endMarker = getNodeForCharacterOffset(
          containerInfo,
          priorSelectionRange
        );
        length &&
          endMarker &&
          (1 !== curFocusedElem.rangeCount ||
            curFocusedElem.anchorNode !== length.node ||
            curFocusedElem.anchorOffset !== length.offset ||
            curFocusedElem.focusNode !== endMarker.node ||
            curFocusedElem.focusOffset !== endMarker.offset) &&
          ((priorSelectionInformation =
            priorSelectionInformation.createRange()),
          priorSelectionInformation.setStart(length.node, length.offset),
          curFocusedElem.removeAllRanges(),
          start > priorSelectionRange
            ? (curFocusedElem.addRange(priorSelectionInformation),
              curFocusedElem.extend(endMarker.node, endMarker.offset))
            : (priorSelectionInformation.setEnd(
                endMarker.node,
                endMarker.offset
              ),
              curFocusedElem.addRange(priorSelectionInformation)));
      }
    priorSelectionInformation = [];
    for (
      curFocusedElem = containerInfo;
      (curFocusedElem = curFocusedElem.parentNode);

    )
      1 === curFocusedElem.nodeType &&
        priorSelectionInformation.push({
          element: curFocusedElem,
          left: curFocusedElem.scrollLeft,
          top: curFocusedElem.scrollTop
        });
    "function" === typeof containerInfo.focus && containerInfo.focus();
    for (
      containerInfo = 0;
      containerInfo < priorSelectionInformation.length;
      containerInfo++
    )
      (curFocusedElem = priorSelectionInformation[containerInfo]),
        (curFocusedElem.element.scrollLeft = curFocusedElem.left),
        (curFocusedElem.element.scrollTop = curFocusedElem.top);
  }
}
var skipSelectionChangeEvent =
    canUseDOM && "documentMode" in document && 11 >= document.documentMode,
  activeElement = null,
  activeElementInst = null,
  lastSelection = null,
  mouseDown = !1;
function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  var doc =
    nativeEventTarget.window === nativeEventTarget
      ? nativeEventTarget.document
      : 9 === nativeEventTarget.nodeType
        ? nativeEventTarget
        : nativeEventTarget.ownerDocument;
  mouseDown ||
    null == activeElement ||
    activeElement !== getActiveElement(doc) ||
    ((doc = activeElement),
    "selectionStart" in doc && hasSelectionCapabilities(doc)
      ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
      : ((doc = (
          (doc.ownerDocument && doc.ownerDocument.defaultView) ||
          window
        ).getSelection()),
        (doc = {
          anchorNode: doc.anchorNode,
          anchorOffset: doc.anchorOffset,
          focusNode: doc.focusNode,
          focusOffset: doc.focusOffset
        })),
    (lastSelection && shallowEqual(lastSelection, doc)) ||
      ((lastSelection = doc),
      (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
      0 < doc.length &&
        ((nativeEvent = new SyntheticEvent(
          "onSelect",
          "select",
          null,
          nativeEvent,
          nativeEventTarget
        )),
        dispatchQueue.push({ event: nativeEvent, listeners: doc }),
        (nativeEvent.target = activeElement))));
}
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes["Webkit" + styleProp] = "webkit" + eventName;
  prefixes["Moz" + styleProp] = "moz" + eventName;
  return prefixes;
}
var vendorPrefixes = {
    animationend: makePrefixMap("Animation", "AnimationEnd"),
    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
    animationstart: makePrefixMap("Animation", "AnimationStart"),
    transitionrun: makePrefixMap("Transition", "TransitionRun"),
    transitionstart: makePrefixMap("Transition", "TransitionStart"),
    transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
    transitionend: makePrefixMap("Transition", "TransitionEnd")
  },
  prefixedEventNames = {},
  style = {};
canUseDOM &&
  ((style = document.createElement("div").style),
  "AnimationEvent" in window ||
    (delete vendorPrefixes.animationend.animation,
    delete vendorPrefixes.animationiteration.animation,
    delete vendorPrefixes.animationstart.animation),
  "TransitionEvent" in window ||
    delete vendorPrefixes.transitionend.transition);
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
  if (!vendorPrefixes[eventName]) return eventName;
  var prefixMap = vendorPrefixes[eventName],
    styleProp;
  for (styleProp in prefixMap)
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
      return (prefixedEventNames[eventName] = prefixMap[styleProp]);
  return eventName;
}
var ANIMATION_END = getVendorPrefixedEventName("animationend"),
  ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
  ANIMATION_START = getVendorPrefixedEventName("animationstart"),
  TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
  TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
  TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
  TRANSITION_END = getVendorPrefixedEventName("transitionend"),
  topLevelEventsToReactNames = new Map(),
  simpleEventPluginEvents =
    "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(
      " "
    );
function registerSimpleEvent(domEventName, reactName) {
  topLevelEventsToReactNames.set(domEventName, reactName);
  registerTwoPhaseEvent(reactName, [domEventName]);
}
var concurrentQueues = [],
  concurrentQueuesIndex = 0,
  concurrentlyUpdatedLanes = 0;
function finishQueueingConcurrentUpdates() {
  for (
    var endIndex = concurrentQueuesIndex,
      i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
    i < endIndex;

  ) {
    var fiber = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var queue = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var update = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var lane = concurrentQueues[i];
    concurrentQueues[i++] = null;
    if (null !== queue && null !== update) {
      var pending = queue.pending;
      null === pending
        ? (update.next = update)
        : ((update.next = pending.next), (pending.next = update));
      queue.pending = update;
    }
    0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
  }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
  concurrentQueues[concurrentQueuesIndex++] = fiber;
  concurrentQueues[concurrentQueuesIndex++] = queue;
  concurrentQueues[concurrentQueuesIndex++] = update;
  concurrentQueues[concurrentQueuesIndex++] = lane;
  concurrentlyUpdatedLanes |= lane;
  fiber.lanes |= lane;
  fiber = fiber.alternate;
  null !== fiber && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
  enqueueUpdate$1(fiber, queue, update, lane);
  return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
  enqueueUpdate$1(fiber, null, null, lane);
  return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
  sourceFiber.lanes |= lane;
  var alternate = sourceFiber.alternate;
  null !== alternate && (alternate.lanes |= lane);
  for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )
    (parent.childLanes |= lane),
      (alternate = parent.alternate),
      null !== alternate && (alternate.childLanes |= lane),
      22 === parent.tag &&
        ((sourceFiber = parent.stateNode),
        null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = !0)),
      (sourceFiber = parent),
      (parent = parent.return);
  isHidden &&
    null !== update &&
    3 === sourceFiber.tag &&
    ((parent = sourceFiber.stateNode),
    (isHidden = 31 - clz32(lane)),
    (parent = parent.hiddenUpdates),
    (sourceFiber = parent[isHidden]),
    null === sourceFiber
      ? (parent[isHidden] = [update])
      : sourceFiber.push(update),
    (update.lane = lane | 536870912));
}
function getRootForUpdatedFiber(sourceFiber) {
  if (50 < nestedUpdateCount)
    throw (
      ((nestedUpdateCount = 0),
      (rootWithNestedUpdates = null),
      Error(formatProdErrorMessage(185)))
    );
  for (var parent = sourceFiber.return; null !== parent; )
    (sourceFiber = parent), (parent = sourceFiber.return);
  return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
}
var emptyContextObject = {},
  CapturedStacks = new WeakMap();
function createCapturedValueAtFiber(value, source) {
  if ("object" === typeof value && null !== value) {
    var existing = CapturedStacks.get(value);
    if (void 0 !== existing) return existing;
    source = {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
    CapturedStacks.set(value, source);
    return source;
  }
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}
var forkStack = [],
  forkStackIndex = 0,
  treeForkProvider = null,
  treeForkCount = 0,
  idStack = [],
  idStackIndex = 0,
  treeContextProvider = null,
  treeContextId = 1,
  treeContextOverflow = "";
function pushTreeFork(workInProgress, totalChildren) {
  forkStack[forkStackIndex++] = treeForkCount;
  forkStack[forkStackIndex++] = treeForkProvider;
  treeForkProvider = workInProgress;
  treeForkCount = totalChildren;
}
function pushTreeId(workInProgress, totalChildren, index) {
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextProvider = workInProgress;
  var baseIdWithLeadingBit = treeContextId;
  workInProgress = treeContextOverflow;
  var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
  baseIdWithLeadingBit &= ~(1 << baseLength);
  index += 1;
  var length = 32 - clz32(totalChildren) + baseLength;
  if (30 < length) {
    var numberOfOverflowBits = baseLength - (baseLength % 5);
    length = (
      baseIdWithLeadingBit &
      ((1 << numberOfOverflowBits) - 1)
    ).toString(32);
    baseIdWithLeadingBit >>= numberOfOverflowBits;
    baseLength -= numberOfOverflowBits;
    treeContextId =
      (1 << (32 - clz32(totalChildren) + baseLength)) |
      (index << baseLength) |
      baseIdWithLeadingBit;
    treeContextOverflow = length + workInProgress;
  } else
    (treeContextId =
      (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
      (treeContextOverflow = workInProgress);
}
function pushMaterializedTreeId(workInProgress) {
  null !== workInProgress.return &&
    (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
}
function popTreeContext(workInProgress) {
  for (; workInProgress === treeForkProvider; )
    (treeForkProvider = forkStack[--forkStackIndex]),
      (forkStack[forkStackIndex] = null),
      (treeForkCount = forkStack[--forkStackIndex]),
      (forkStack[forkStackIndex] = null);
  for (; workInProgress === treeContextProvider; )
    (treeContextProvider = idStack[--idStackIndex]),
      (idStack[idStackIndex] = null),
      (treeContextOverflow = idStack[--idStackIndex]),
      (idStack[idStackIndex] = null),
      (treeContextId = idStack[--idStackIndex]),
      (idStack[idStackIndex] = null);
}
var hydrationParentFiber = null,
  nextHydratableInstance = null,
  isHydrating = !1,
  hydrationErrors = null,
  rootOrSingletonContext = !1,
  HydrationMismatchException = Error(formatProdErrorMessage(519));
function throwOnHydrationMismatch(fiber) {
  var error = Error(formatProdErrorMessage(418, ""));
  queueHydrationError(createCapturedValueAtFiber(error, fiber));
  throw HydrationMismatchException;
}
function prepareToHydrateHostInstance(fiber) {
  var instance = fiber.stateNode,
    type = fiber.type,
    props = fiber.memoizedProps;
  instance[internalInstanceKey] = fiber;
  instance[internalPropsKey] = props;
  switch (type) {
    case "dialog":
      listenToNonDelegatedEvent("cancel", instance);
      listenToNonDelegatedEvent("close", instance);
      break;
    case "iframe":
    case "object":
    case "embed":
      listenToNonDelegatedEvent("load", instance);
      break;
    case "video":
    case "audio":
      for (type = 0; type < mediaEventTypes.length; type++)
        listenToNonDelegatedEvent(mediaEventTypes[type], instance);
      break;
    case "source":
      listenToNonDelegatedEvent("error", instance);
      break;
    case "img":
    case "image":
    case "link":
      listenToNonDelegatedEvent("error", instance);
      listenToNonDelegatedEvent("load", instance);
      break;
    case "details":
      listenToNonDelegatedEvent("toggle", instance);
      break;
    case "input":
      listenToNonDelegatedEvent("invalid", instance);
      initInput(
        instance,
        props.value,
        props.defaultValue,
        props.checked,
        props.defaultChecked,
        props.type,
        props.name,
        !0
      );
      track(instance);
      break;
    case "select":
      listenToNonDelegatedEvent("invalid", instance);
      break;
    case "textarea":
      listenToNonDelegatedEvent("invalid", instance),
        initTextarea(instance, props.value, props.defaultValue, props.children),
        track(instance);
  }
  type = props.children;
  ("string" !== typeof type &&
    "number" !== typeof type &&
    "bigint" !== typeof type) ||
  instance.textContent === "" + type ||
  !0 === props.suppressHydrationWarning ||
  checkForUnmatchedText(instance.textContent, type)
    ? (null != props.popover &&
        (listenToNonDelegatedEvent("beforetoggle", instance),
        listenToNonDelegatedEvent("toggle", instance)),
      null != props.onScroll && listenToNonDelegatedEvent("scroll", instance),
      null != props.onScrollEnd &&
        listenToNonDelegatedEvent("scrollend", instance),
      null != props.onClick && (instance.onclick = noop$1),
      (instance = !0))
    : (instance = !1);
  instance || throwOnHydrationMismatch(fiber);
}
function popToNextHostParent(fiber) {
  for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
    switch (hydrationParentFiber.tag) {
      case 3:
      case 27:
        rootOrSingletonContext = !0;
        return;
      case 5:
      case 13:
        rootOrSingletonContext = !1;
        return;
      default:
        hydrationParentFiber = hydrationParentFiber.return;
    }
}
function popHydrationState(fiber) {
  if (fiber !== hydrationParentFiber) return !1;
  if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = !0), !1;
  var shouldClear = !1,
    JSCompiler_temp;
  if ((JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag)) {
    if ((JSCompiler_temp = 5 === fiber.tag))
      (JSCompiler_temp = fiber.type),
        (JSCompiler_temp =
          !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
          shouldSetTextContent(fiber.type, fiber.memoizedProps));
    JSCompiler_temp = !JSCompiler_temp;
  }
  JSCompiler_temp && (shouldClear = !0);
  shouldClear && nextHydratableInstance && throwOnHydrationMismatch(fiber);
  popToNextHostParent(fiber);
  if (13 === fiber.tag) {
    fiber = fiber.memoizedState;
    fiber = null !== fiber ? fiber.dehydrated : null;
    if (!fiber) throw Error(formatProdErrorMessage(317));
    a: {
      fiber = fiber.nextSibling;
      for (shouldClear = 0; fiber; ) {
        if (8 === fiber.nodeType)
          if (((JSCompiler_temp = fiber.data), "/$" === JSCompiler_temp)) {
            if (0 === shouldClear) {
              nextHydratableInstance = getNextHydratable(fiber.nextSibling);
              break a;
            }
            shouldClear--;
          } else
            ("$" !== JSCompiler_temp &&
              "$!" !== JSCompiler_temp &&
              "$?" !== JSCompiler_temp) ||
              shouldClear++;
        fiber = fiber.nextSibling;
      }
      nextHydratableInstance = null;
    }
  } else
    nextHydratableInstance = hydrationParentFiber
      ? getNextHydratable(fiber.stateNode.nextSibling)
      : null;
  return !0;
}
function resetHydrationState() {
  nextHydratableInstance = hydrationParentFiber = null;
  isHydrating = !1;
}
function queueHydrationError(error) {
  null === hydrationErrors
    ? (hydrationErrors = [error])
    : hydrationErrors.push(error);
}
var SuspenseException = Error(formatProdErrorMessage(460)),
  SuspenseyCommitException = Error(formatProdErrorMessage(474)),
  noopSuspenseyCommitThenable = { then: function () {} };
function isThenableResolved(thenable) {
  thenable = thenable.status;
  return "fulfilled" === thenable || "rejected" === thenable;
}
function noop$3() {}
function trackUsedThenable(thenableState, thenable, index) {
  index = thenableState[index];
  void 0 === index
    ? thenableState.push(thenable)
    : index !== thenable && (thenable.then(noop$3, noop$3), (thenable = index));
  switch (thenable.status) {
    case "fulfilled":
      return thenable.value;
    case "rejected":
      thenableState = thenable.reason;
      if (thenableState === SuspenseException)
        throw Error(formatProdErrorMessage(483));
      throw thenableState;
    default:
      if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
      else {
        thenableState = workInProgressRoot;
        if (null !== thenableState && 100 < thenableState.shellSuspendCounter)
          throw Error(formatProdErrorMessage(482));
        thenableState = thenable;
        thenableState.status = "pending";
        thenableState.then(
          function (fulfilledValue) {
            if ("pending" === thenable.status) {
              var fulfilledThenable = thenable;
              fulfilledThenable.status = "fulfilled";
              fulfilledThenable.value = fulfilledValue;
            }
          },
          function (error) {
            if ("pending" === thenable.status) {
              var rejectedThenable = thenable;
              rejectedThenable.status = "rejected";
              rejectedThenable.reason = error;
            }
          }
        );
      }
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          thenableState = thenable.reason;
          if (thenableState === SuspenseException)
            throw Error(formatProdErrorMessage(483));
          throw thenableState;
      }
      suspendedThenable = thenable;
      throw SuspenseException;
  }
}
var suspendedThenable = null;
function getSuspendedThenable() {
  if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
  var thenable = suspendedThenable;
  suspendedThenable = null;
  return thenable;
}
var thenableState$1 = null,
  thenableIndexCounter$1 = 0;
function unwrapThenable(thenable) {
  var index = thenableIndexCounter$1;
  thenableIndexCounter$1 += 1;
  null === thenableState$1 && (thenableState$1 = []);
  return trackUsedThenable(thenableState$1, thenable, index);
}
function coerceRef(workInProgress, element) {
  element = element.props.ref;
  workInProgress.ref = void 0 !== element ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
    throw Error(formatProdErrorMessage(525));
  returnFiber = Object.prototype.toString.call(newChild);
  throw Error(
    formatProdErrorMessage(
      31,
      "[object Object]" === returnFiber
        ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
        : returnFiber
    )
  );
}
function resolveLazy(lazyType) {
  var init = lazyType._init;
  return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (shouldTrackSideEffects) {
      var deletions = returnFiber.deletions;
      null === deletions
        ? ((returnFiber.deletions = [childToDelete]), (returnFiber.flags |= 16))
        : deletions.push(childToDelete);
    }
  }
  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) return null;
    for (; null !== currentFirstChild; )
      deleteChild(returnFiber, currentFirstChild),
        (currentFirstChild = currentFirstChild.sibling);
    return null;
  }
  function mapRemainingChildren(currentFirstChild) {
    for (var existingChildren = new Map(); null !== currentFirstChild; )
      null !== currentFirstChild.key
        ? existingChildren.set(currentFirstChild.key, currentFirstChild)
        : existingChildren.set(currentFirstChild.index, currentFirstChild),
        (currentFirstChild = currentFirstChild.sibling);
    return existingChildren;
  }
  function useFiber(fiber, pendingProps) {
    fiber = createWorkInProgress(fiber, pendingProps);
    fiber.index = 0;
    fiber.sibling = null;
    return fiber;
  }
  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects)
      return (newFiber.flags |= 1048576), lastPlacedIndex;
    newIndex = newFiber.alternate;
    if (null !== newIndex)
      return (
        (newIndex = newIndex.index),
        newIndex < lastPlacedIndex
          ? ((newFiber.flags |= 33554434), lastPlacedIndex)
          : newIndex
      );
    newFiber.flags |= 33554434;
    return lastPlacedIndex;
  }
  function placeSingleChild(newFiber) {
    shouldTrackSideEffects &&
      null === newFiber.alternate &&
      (newFiber.flags |= 33554434);
    return newFiber;
  }
  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (null === current || 6 !== current.tag)
      return (
        (current = createFiberFromText(textContent, returnFiber.mode, lanes)),
        (current.return = returnFiber),
        current
      );
    current = useFiber(current, textContent);
    current.return = returnFiber;
    return current;
  }
  function updateElement(returnFiber, current, element, lanes) {
    var elementType = element.type;
    if (elementType === REACT_FRAGMENT_TYPE)
      return updateFragment(
        returnFiber,
        current,
        element.props.children,
        lanes,
        element.key
      );
    if (
      null !== current &&
      (current.elementType === elementType ||
        ("object" === typeof elementType &&
          null !== elementType &&
          elementType.$$typeof === REACT_LAZY_TYPE &&
          resolveLazy(elementType) === current.type))
    )
      return (
        (current = useFiber(current, element.props)),
        coerceRef(current, element),
        (current.return = returnFiber),
        current
      );
    current = createFiberFromTypeAndProps(
      element.type,
      element.key,
      element.props,
      null,
      returnFiber.mode,
      lanes
    );
    coerceRef(current, element);
    current.return = returnFiber;
    return current;
  }
  function updatePortal(returnFiber, current, portal, lanes) {
    if (
      null === current ||
      4 !== current.tag ||
      current.stateNode.containerInfo !== portal.containerInfo ||
      current.stateNode.implementation !== portal.implementation
    )
      return (
        (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
        (current.return = returnFiber),
        current
      );
    current = useFiber(current, portal.children || []);
    current.return = returnFiber;
    return current;
  }
  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (null === current || 7 !== current.tag)
      return (
        (current = createFiberFromFragment(
          fragment,
          returnFiber.mode,
          lanes,
          key
        )),
        (current.return = returnFiber),
        current
      );
    current = useFiber(current, fragment);
    current.return = returnFiber;
    return current;
  }
  function createChild(returnFiber, newChild, lanes) {
    if (
      ("string" === typeof newChild && "" !== newChild) ||
      "number" === typeof newChild ||
      "bigint" === typeof newChild
    )
      return (
        (newChild = createFiberFromText(
          "" + newChild,
          returnFiber.mode,
          lanes
        )),
        (newChild.return = returnFiber),
        newChild
      );
    if ("object" === typeof newChild && null !== newChild) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return (
            (lanes = createFiberFromTypeAndProps(
              newChild.type,
              newChild.key,
              newChild.props,
              null,
              returnFiber.mode,
              lanes
            )),
            coerceRef(lanes, newChild),
            (lanes.return = returnFiber),
            lanes
          );
        case REACT_PORTAL_TYPE:
          return (
            (newChild = createFiberFromPortal(
              newChild,
              returnFiber.mode,
              lanes
            )),
            (newChild.return = returnFiber),
            newChild
          );
        case REACT_LAZY_TYPE:
          var init = newChild._init;
          newChild = init(newChild._payload);
          return createChild(returnFiber, newChild, lanes);
      }
      if (isArrayImpl(newChild) || getIteratorFn(newChild))
        return (
          (newChild = createFiberFromFragment(
            newChild,
            returnFiber.mode,
            lanes,
            null
          )),
          (newChild.return = returnFiber),
          newChild
        );
      if ("function" === typeof newChild.then)
        return createChild(returnFiber, unwrapThenable(newChild), lanes);
      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
        return createChild(
          returnFiber,
          readContextDuringReconciliation(returnFiber, newChild),
          lanes
        );
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    var key = null !== oldFiber ? oldFiber.key : null;
    if (
      ("string" === typeof newChild && "" !== newChild) ||
      "number" === typeof newChild ||
      "bigint" === typeof newChild
    )
      return null !== key
        ? null
        : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
    if ("object" === typeof newChild && null !== newChild) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return newChild.key === key
            ? updateElement(returnFiber, oldFiber, newChild, lanes)
            : null;
        case REACT_PORTAL_TYPE:
          return newChild.key === key
            ? updatePortal(returnFiber, oldFiber, newChild, lanes)
            : null;
        case REACT_LAZY_TYPE:
          return (
            (key = newChild._init),
            (newChild = key(newChild._payload)),
            updateSlot(returnFiber, oldFiber, newChild, lanes)
          );
      }
      if (isArrayImpl(newChild) || getIteratorFn(newChild))
        return null !== key
          ? null
          : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      if ("function" === typeof newChild.then)
        return updateSlot(
          returnFiber,
          oldFiber,
          unwrapThenable(newChild),
          lanes
        );
      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
        return updateSlot(
          returnFiber,
          oldFiber,
          readContextDuringReconciliation(returnFiber, newChild),
          lanes
        );
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function updateFromMap(
    existingChildren,
    returnFiber,
    newIdx,
    newChild,
    lanes
  ) {
    if (
      ("string" === typeof newChild && "" !== newChild) ||
      "number" === typeof newChild ||
      "bigint" === typeof newChild
    )
      return (
        (existingChildren = existingChildren.get(newIdx) || null),
        updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
      );
    if ("object" === typeof newChild && null !== newChild) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return (
            (existingChildren =
              existingChildren.get(
                null === newChild.key ? newIdx : newChild.key
              ) || null),
            updateElement(returnFiber, existingChildren, newChild, lanes)
          );
        case REACT_PORTAL_TYPE:
          return (
            (existingChildren =
              existingChildren.get(
                null === newChild.key ? newIdx : newChild.key
              ) || null),
            updatePortal(returnFiber, existingChildren, newChild, lanes)
          );
        case REACT_LAZY_TYPE:
          var init = newChild._init;
          newChild = init(newChild._payload);
          return updateFromMap(
            existingChildren,
            returnFiber,
            newIdx,
            newChild,
            lanes
          );
      }
      if (isArrayImpl(newChild) || getIteratorFn(newChild))
        return (
          (existingChildren = existingChildren.get(newIdx) || null),
          updateFragment(returnFiber, existingChildren, newChild, lanes, null)
        );
      if ("function" === typeof newChild.then)
        return updateFromMap(
          existingChildren,
          returnFiber,
          newIdx,
          unwrapThenable(newChild),
          lanes
        );
      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
        return updateFromMap(
          existingChildren,
          returnFiber,
          newIdx,
          readContextDuringReconciliation(returnFiber, newChild),
          lanes
        );
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function reconcileChildrenArray(
    returnFiber,
    currentFirstChild,
    newChildren,
    lanes
  ) {
    for (
      var resultingFirstChild = null,
        previousNewFiber = null,
        oldFiber = currentFirstChild,
        newIdx = (currentFirstChild = 0),
        nextOldFiber = null;
      null !== oldFiber && newIdx < newChildren.length;
      newIdx++
    ) {
      oldFiber.index > newIdx
        ? ((nextOldFiber = oldFiber), (oldFiber = null))
        : (nextOldFiber = oldFiber.sibling);
      var newFiber = updateSlot(
        returnFiber,
        oldFiber,
        newChildren[newIdx],
        lanes
      );
      if (null === newFiber) {
        null === oldFiber && (oldFiber = nextOldFiber);
        break;
      }
      shouldTrackSideEffects &&
        oldFiber &&
        null === newFiber.alternate &&
        deleteChild(returnFiber, oldFiber);
      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
      null === previousNewFiber
        ? (resultingFirstChild = newFiber)
        : (previousNewFiber.sibling = newFiber);
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }
    if (newIdx === newChildren.length)
      return (
        deleteRemainingChildren(returnFiber, oldFiber),
        isHydrating && pushTreeFork(returnFiber, newIdx),
        resultingFirstChild
      );
    if (null === oldFiber) {
      for (; newIdx < newChildren.length; newIdx++)
        (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
          null !== oldFiber &&
            ((currentFirstChild = placeChild(
              oldFiber,
              currentFirstChild,
              newIdx
            )),
            null === previousNewFiber
              ? (resultingFirstChild = oldFiber)
              : (previousNewFiber.sibling = oldFiber),
            (previousNewFiber = oldFiber));
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    for (
      oldFiber = mapRemainingChildren(oldFiber);
      newIdx < newChildren.length;
      newIdx++
    )
      (nextOldFiber = updateFromMap(
        oldFiber,
        returnFiber,
        newIdx,
        newChildren[newIdx],
        lanes
      )),
        null !== nextOldFiber &&
          (shouldTrackSideEffects &&
            null !== nextOldFiber.alternate &&
            oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ),
          (currentFirstChild = placeChild(
            nextOldFiber,
            currentFirstChild,
            newIdx
          )),
          null === previousNewFiber
            ? (resultingFirstChild = nextOldFiber)
            : (previousNewFiber.sibling = nextOldFiber),
          (previousNewFiber = nextOldFiber));
    shouldTrackSideEffects &&
      oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    isHydrating && pushTreeFork(returnFiber, newIdx);
    return resultingFirstChild;
  }
  function reconcileChildrenIterator(
    returnFiber,
    currentFirstChild,
    newChildren,
    lanes
  ) {
    if (null == newChildren) throw Error(formatProdErrorMessage(151));
    for (
      var resultingFirstChild = null,
        previousNewFiber = null,
        oldFiber = currentFirstChild,
        newIdx = (currentFirstChild = 0),
        nextOldFiber = null,
        step = newChildren.next();
      null !== oldFiber && !step.done;
      newIdx++, step = newChildren.next()
    ) {
      oldFiber.index > newIdx
        ? ((nextOldFiber = oldFiber), (oldFiber = null))
        : (nextOldFiber = oldFiber.sibling);
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
      if (null === newFiber) {
        null === oldFiber && (oldFiber = nextOldFiber);
        break;
      }
      shouldTrackSideEffects &&
        oldFiber &&
        null === newFiber.alternate &&
        deleteChild(returnFiber, oldFiber);
      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
      null === previousNewFiber
        ? (resultingFirstChild = newFiber)
        : (previousNewFiber.sibling = newFiber);
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }
    if (step.done)
      return (
        deleteRemainingChildren(returnFiber, oldFiber),
        isHydrating && pushTreeFork(returnFiber, newIdx),
        resultingFirstChild
      );
    if (null === oldFiber) {
      for (; !step.done; newIdx++, step = newChildren.next())
        (step = createChild(returnFiber, step.value, lanes)),
          null !== step &&
            ((currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
            null === previousNewFiber
              ? (resultingFirstChild = step)
              : (previousNewFiber.sibling = step),
            (previousNewFiber = step));
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    for (
      oldFiber = mapRemainingChildren(oldFiber);
      !step.done;
      newIdx++, step = newChildren.next()
    )
      (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes)),
        null !== step &&
          (shouldTrackSideEffects &&
            null !== step.alternate &&
            oldFiber.delete(null === step.key ? newIdx : step.key),
          (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
          null === previousNewFiber
            ? (resultingFirstChild = step)
            : (previousNewFiber.sibling = step),
          (previousNewFiber = step));
    shouldTrackSideEffects &&
      oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    isHydrating && pushTreeFork(returnFiber, newIdx);
    return resultingFirstChild;
  }
  function reconcileChildFibersImpl(
    returnFiber,
    currentFirstChild,
    newChild,
    lanes
  ) {
    "object" === typeof newChild &&
      null !== newChild &&
      newChild.type === REACT_FRAGMENT_TYPE &&
      null === newChild.key &&
      (newChild = newChild.props.children);
    if ("object" === typeof newChild && null !== newChild) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            for (var key = newChild.key; null !== currentFirstChild; ) {
              if (currentFirstChild.key === key) {
                key = newChild.type;
                if (key === REACT_FRAGMENT_TYPE) {
                  if (7 === currentFirstChild.tag) {
                    deleteRemainingChildren(
                      returnFiber,
                      currentFirstChild.sibling
                    );
                    lanes = useFiber(
                      currentFirstChild,
                      newChild.props.children
                    );
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  }
                } else if (
                  currentFirstChild.elementType === key ||
                  ("object" === typeof key &&
                    null !== key &&
                    key.$$typeof === REACT_LAZY_TYPE &&
                    resolveLazy(key) === currentFirstChild.type)
                ) {
                  deleteRemainingChildren(
                    returnFiber,
                    currentFirstChild.sibling
                  );
                  lanes = useFiber(currentFirstChild, newChild.props);
                  coerceRef(lanes, newChild);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                  break a;
                }
                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }
            newChild.type === REACT_FRAGMENT_TYPE
              ? ((lanes = createFiberFromFragment(
                  newChild.props.children,
                  returnFiber.mode,
                  lanes,
                  newChild.key
                )),
                (lanes.return = returnFiber),
                (returnFiber = lanes))
              : ((lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                )),
                coerceRef(lanes, newChild),
                (lanes.return = returnFiber),
                (returnFiber = lanes));
          }
          return placeSingleChild(returnFiber);
        case REACT_PORTAL_TYPE:
          a: {
            for (key = newChild.key; null !== currentFirstChild; ) {
              if (currentFirstChild.key === key)
                if (
                  4 === currentFirstChild.tag &&
                  currentFirstChild.stateNode.containerInfo ===
                    newChild.containerInfo &&
                  currentFirstChild.stateNode.implementation ===
                    newChild.implementation
                ) {
                  deleteRemainingChildren(
                    returnFiber,
                    currentFirstChild.sibling
                  );
                  lanes = useFiber(currentFirstChild, newChild.children || []);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }
            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
            lanes.return = returnFiber;
            returnFiber = lanes;
          }
          return placeSingleChild(returnFiber);
        case REACT_LAZY_TYPE:
          return (
            (key = newChild._init),
            (newChild = key(newChild._payload)),
            reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            )
          );
      }
      if (isArrayImpl(newChild))
        return reconcileChildrenArray(
          returnFiber,
          currentFirstChild,
          newChild,
          lanes
        );
      if (getIteratorFn(newChild)) {
        key = getIteratorFn(newChild);
        if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
        newChild = key.call(newChild);
        return reconcileChildrenIterator(
          returnFiber,
          currentFirstChild,
          newChild,
          lanes
        );
      }
      if ("function" === typeof newChild.then)
        return reconcileChildFibersImpl(
          returnFiber,
          currentFirstChild,
          unwrapThenable(newChild),
          lanes
        );
      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
        return reconcileChildFibersImpl(
          returnFiber,
          currentFirstChild,
          readContextDuringReconciliation(returnFiber, newChild),
          lanes
        );
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return ("string" === typeof newChild && "" !== newChild) ||
      "number" === typeof newChild ||
      "bigint" === typeof newChild
      ? ((newChild = "" + newChild),
        null !== currentFirstChild && 6 === currentFirstChild.tag
          ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),
            (lanes = useFiber(currentFirstChild, newChild)),
            (lanes.return = returnFiber),
            (returnFiber = lanes))
          : (deleteRemainingChildren(returnFiber, currentFirstChild),
            (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),
            (lanes.return = returnFiber),
            (returnFiber = lanes)),
        placeSingleChild(returnFiber))
      : deleteRemainingChildren(returnFiber, currentFirstChild);
  }
  return function (returnFiber, currentFirstChild, newChild, lanes) {
    try {
      thenableIndexCounter$1 = 0;
      var firstChildFiber = reconcileChildFibersImpl(
        returnFiber,
        currentFirstChild,
        newChild,
        lanes
      );
      thenableState$1 = null;
      return firstChildFiber;
    } catch (x) {
      if (x === SuspenseException) throw x;
      var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
      fiber.lanes = lanes;
      fiber.return = returnFiber;
      return fiber;
    } finally {
    }
  };
}
var reconcileChildFibers = createChildReconciler(!0),
  mountChildFibers = createChildReconciler(!1),
  currentTreeHiddenStackCursor = createCursor(null),
  prevEntangledRenderLanesCursor = createCursor(0);
function pushHiddenContext(fiber, context) {
  fiber = entangledRenderLanes;
  push(prevEntangledRenderLanesCursor, fiber);
  push(currentTreeHiddenStackCursor, context);
  entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
  push(prevEntangledRenderLanesCursor, entangledRenderLanes);
  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
  entangledRenderLanes = prevEntangledRenderLanesCursor.current;
  pop(currentTreeHiddenStackCursor);
  pop(prevEntangledRenderLanesCursor);
}
var suspenseHandlerStackCursor = createCursor(null),
  shellBoundary = null;
function pushPrimaryTreeSuspenseHandler(handler) {
  var current = handler.alternate;
  push(suspenseStackCursor, suspenseStackCursor.current & 1);
  push(suspenseHandlerStackCursor, handler);
  null === shellBoundary &&
    (null === current || null !== currentTreeHiddenStackCursor.current
      ? (shellBoundary = handler)
      : null !== current.memoizedState && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
  if (22 === fiber.tag) {
    if (
      (push(suspenseStackCursor, suspenseStackCursor.current),
      push(suspenseHandlerStackCursor, fiber),
      null === shellBoundary)
    ) {
      var current = fiber.alternate;
      null !== current &&
        null !== current.memoizedState &&
        (shellBoundary = fiber);
    }
  } else reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
  push(suspenseStackCursor, suspenseStackCursor.current);
  push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
  pop(suspenseHandlerStackCursor);
  shellBoundary === fiber && (shellBoundary = null);
  pop(suspenseStackCursor);
}
var suspenseStackCursor = createCursor(0);
function findFirstSuspended(row) {
  for (var node = row; null !== node; ) {
    if (13 === node.tag) {
      var state = node.memoizedState;
      if (
        null !== state &&
        ((state = state.dehydrated),
        null === state || "$?" === state.data || "$!" === state.data)
      )
        return node;
    } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
      if (0 !== (node.flags & 128)) return node;
    } else if (null !== node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === row) break;
    for (; null === node.sibling; ) {
      if (null === node.return || node.return === row) return null;
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  return null;
}
var AbortControllerLocal =
    "undefined" !== typeof AbortController
      ? AbortController
      : function () {
          var listeners = [],
            signal = (this.signal = {
              aborted: !1,
              addEventListener: function (type, listener) {
                listeners.push(listener);
              }
            });
          this.abort = function () {
            signal.aborted = !0;
            listeners.forEach(function (listener) {
              return listener();
            });
          };
        },
  scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
  NormalPriority = Scheduler.unstable_NormalPriority,
  CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
  };
function createCache() {
  return {
    controller: new AbortControllerLocal(),
    data: new Map(),
    refCount: 0
  };
}
function releaseCache(cache) {
  cache.refCount--;
  0 === cache.refCount &&
    scheduleCallback$2(NormalPriority, function () {
      cache.controller.abort();
    });
}
var currentEntangledListeners = null,
  currentEntangledPendingCount = 0,
  currentEntangledLane = 0,
  currentEntangledActionThenable = null;
function entangleAsyncAction(transition, thenable) {
  if (null === currentEntangledListeners) {
    var entangledListeners = (currentEntangledListeners = []);
    currentEntangledPendingCount = 0;
    currentEntangledLane = requestTransitionLane();
    currentEntangledActionThenable = {
      status: "pending",
      value: void 0,
      then: function (resolve) {
        entangledListeners.push(resolve);
      }
    };
  }
  currentEntangledPendingCount++;
  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
  return thenable;
}
function pingEngtangledActionScope() {
  if (
    0 === --currentEntangledPendingCount &&
    null !== currentEntangledListeners
  ) {
    null !== currentEntangledActionThenable &&
      (currentEntangledActionThenable.status = "fulfilled");
    var listeners = currentEntangledListeners;
    currentEntangledListeners = null;
    currentEntangledLane = 0;
    currentEntangledActionThenable = null;
    for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
  }
}
function chainThenableValue(thenable, result) {
  var listeners = [],
    thenableWithOverride = {
      status: "pending",
      value: null,
      reason: null,
      then: function (resolve) {
        listeners.push(resolve);
      }
    };
  thenable.then(
    function () {
      thenableWithOverride.status = "fulfilled";
      thenableWithOverride.value = result;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
    },
    function (error) {
      thenableWithOverride.status = "rejected";
      thenableWithOverride.reason = error;
      for (error = 0; error < listeners.length; error++)
        (0, listeners[error])(void 0);
    }
  );
  return thenableWithOverride;
}
var prevOnStartTransitionFinish = ReactSharedInternals.S;
ReactSharedInternals.S = function (transition, returnValue) {
  "object" === typeof returnValue &&
    null !== returnValue &&
    "function" === typeof returnValue.then &&
    entangleAsyncAction(transition, returnValue);
  null !== prevOnStartTransitionFinish &&
    prevOnStartTransitionFinish(transition, returnValue);
};
var resumedCache = createCursor(null);
function peekCacheFromPool() {
  var cacheResumedFromPreviousRender = resumedCache.current;
  return null !== cacheResumedFromPreviousRender
    ? cacheResumedFromPreviousRender
    : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
  null === prevCachePool
    ? push(resumedCache, resumedCache.current)
    : push(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
  var cacheFromPool = peekCacheFromPool();
  return null === cacheFromPool
    ? null
    : { parent: CacheContext._currentValue, pool: cacheFromPool };
}
var renderLanes = 0,
  currentlyRenderingFiber$1 = null,
  currentHook = null,
  workInProgressHook = null,
  didScheduleRenderPhaseUpdate = !1,
  didScheduleRenderPhaseUpdateDuringThisPass = !1,
  shouldDoubleInvokeUserFnsInHooksDEV = !1,
  localIdCounter = 0,
  thenableIndexCounter = 0,
  thenableState = null,
  globalClientIdCounter = 0;
function throwInvalidHookError() {
  throw Error(formatProdErrorMessage(321));
}
function areHookInputsEqual(nextDeps, prevDeps) {
  if (null === prevDeps) return !1;
  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
    if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
  return !0;
}
function renderWithHooks(
  current,
  workInProgress,
  Component,
  props,
  secondArg,
  nextRenderLanes
) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;
  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = 0;
  ReactSharedInternals.H =
    null === current || null === current.memoizedState
      ? HooksDispatcherOnMount
      : HooksDispatcherOnUpdate;
  shouldDoubleInvokeUserFnsInHooksDEV = !1;
  nextRenderLanes = Component(props, secondArg);
  shouldDoubleInvokeUserFnsInHooksDEV = !1;
  didScheduleRenderPhaseUpdateDuringThisPass &&
    (nextRenderLanes = renderWithHooksAgain(
      workInProgress,
      Component,
      props,
      secondArg
    ));
  finishRenderingHooks(current);
  return nextRenderLanes;
}
function finishRenderingHooks(current) {
  ReactSharedInternals.H = ContextOnlyDispatcher;
  var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
  renderLanes = 0;
  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
  didScheduleRenderPhaseUpdate = !1;
  thenableIndexCounter = 0;
  thenableState = null;
  if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
  null === current ||
    didReceiveUpdate ||
    ((current = current.dependencies),
    null !== current &&
      checkIfContextChanged(current) &&
      (didReceiveUpdate = !0));
}
function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
  currentlyRenderingFiber$1 = workInProgress;
  var numberOfReRenders = 0;
  do {
    didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
    thenableIndexCounter = 0;
    didScheduleRenderPhaseUpdateDuringThisPass = !1;
    if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
    numberOfReRenders += 1;
    workInProgressHook = currentHook = null;
    if (null != workInProgress.updateQueue) {
      var children = workInProgress.updateQueue;
      children.lastEffect = null;
      children.events = null;
      children.stores = null;
      null != children.memoCache && (children.memoCache.index = 0);
    }
    ReactSharedInternals.H = HooksDispatcherOnRerender;
    children = Component(props, secondArg);
  } while (didScheduleRenderPhaseUpdateDuringThisPass);
  return children;
}
function TransitionAwareHostComponent() {
  var dispatcher = ReactSharedInternals.H,
    maybeThenable = dispatcher.useState()[0];
  maybeThenable =
    "function" === typeof maybeThenable.then
      ? useThenable(maybeThenable)
      : maybeThenable;
  dispatcher = dispatcher.useState()[0];
  (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&
    (currentlyRenderingFiber$1.flags |= 1024);
  return maybeThenable;
}
function checkDidRenderIdHook() {
  var didRenderIdHook = 0 !== localIdCounter;
  localIdCounter = 0;
  return didRenderIdHook;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.flags &= -2053;
  current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
  if (didScheduleRenderPhaseUpdate) {
    for (
      workInProgress = workInProgress.memoizedState;
      null !== workInProgress;

    ) {
      var queue = workInProgress.queue;
      null !== queue && (queue.pending = null);
      workInProgress = workInProgress.next;
    }
    didScheduleRenderPhaseUpdate = !1;
  }
  renderLanes = 0;
  workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
  didScheduleRenderPhaseUpdateDuringThisPass = !1;
  thenableIndexCounter = localIdCounter = 0;
  thenableState = null;
}
function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  null === workInProgressHook
    ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
    : (workInProgressHook = workInProgressHook.next = hook);
  return workInProgressHook;
}
function updateWorkInProgressHook() {
  if (null === currentHook) {
    var nextCurrentHook = currentlyRenderingFiber$1.alternate;
    nextCurrentHook =
      null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
  } else nextCurrentHook = currentHook.next;
  var nextWorkInProgressHook =
    null === workInProgressHook
      ? currentlyRenderingFiber$1.memoizedState
      : workInProgressHook.next;
  if (null !== nextWorkInProgressHook)
    (workInProgressHook = nextWorkInProgressHook),
      (currentHook = nextCurrentHook);
  else {
    if (null === nextCurrentHook) {
      if (null === currentlyRenderingFiber$1.alternate)
        throw Error(formatProdErrorMessage(467));
      throw Error(formatProdErrorMessage(310));
    }
    currentHook = nextCurrentHook;
    nextCurrentHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };
    null === workInProgressHook
      ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
          nextCurrentHook)
      : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
  }
  return workInProgressHook;
}
var createFunctionComponentUpdateQueue;
createFunctionComponentUpdateQueue = function () {
  return { lastEffect: null, events: null, stores: null, memoCache: null };
};
function useThenable(thenable) {
  var index = thenableIndexCounter;
  thenableIndexCounter += 1;
  null === thenableState && (thenableState = []);
  thenable = trackUsedThenable(thenableState, thenable, index);
  index = currentlyRenderingFiber$1;
  null ===
    (null === workInProgressHook
      ? index.memoizedState
      : workInProgressHook.next) &&
    ((index = index.alternate),
    (ReactSharedInternals.H =
      null === index || null === index.memoizedState
        ? HooksDispatcherOnMount
        : HooksDispatcherOnUpdate));
  return thenable;
}
function use(usable) {
  if (null !== usable && "object" === typeof usable) {
    if ("function" === typeof usable.then) return useThenable(usable);
    if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
  }
  throw Error(formatProdErrorMessage(438, String(usable)));
}
function useMemoCache(size) {
  var memoCache = null,
    updateQueue = currentlyRenderingFiber$1.updateQueue;
  null !== updateQueue && (memoCache = updateQueue.memoCache);
  if (null == memoCache) {
    var current = currentlyRenderingFiber$1.alternate;
    null !== current &&
      ((current = current.updateQueue),
      null !== current &&
        ((current = current.memoCache),
        null != current &&
          (memoCache = {
            data: current.data.map(function (array) {
              return array.slice();
            }),
            index: 0
          })));
  }
  null == memoCache && (memoCache = { data: [], index: 0 });
  null === updateQueue &&
    ((updateQueue = createFunctionComponentUpdateQueue()),
    (currentlyRenderingFiber$1.updateQueue = updateQueue));
  updateQueue.memoCache = memoCache;
  updateQueue = memoCache.data[memoCache.index];
  if (void 0 === updateQueue)
    for (
      updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;
      current < size;
      current++
    )
      updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
  memoCache.index++;
  return updateQueue;
}
function basicStateReducer(state, action) {
  return "function" === typeof action ? action(state) : action;
}
function updateReducer(reducer) {
  var hook = updateWorkInProgressHook();
  return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
  var queue = hook.queue;
  if (null === queue) throw Error(formatProdErrorMessage(311));
  queue.lastRenderedReducer = reducer;
  var baseQueue = hook.baseQueue,
    pendingQueue = queue.pending;
  if (null !== pendingQueue) {
    if (null !== baseQueue) {
      var baseFirst = baseQueue.next;
      baseQueue.next = pendingQueue.next;
      pendingQueue.next = baseFirst;
    }
    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }
  pendingQueue = hook.baseState;
  if (null === baseQueue) hook.memoizedState = pendingQueue;
  else {
    current = baseQueue.next;
    var newBaseQueueFirst = (baseFirst = null),
      newBaseQueueLast = null,
      update = current,
      didReadFromEntangledAsyncAction$54 = !1;
    do {
      var updateLane = update.lane & -536870913;
      if (
        updateLane !== update.lane
          ? (workInProgressRootRenderLanes & updateLane) === updateLane
          : (renderLanes & updateLane) === updateLane
      ) {
        var revertLane = update.revertLane;
        if (0 === revertLane)
          null !== newBaseQueueLast &&
            (newBaseQueueLast = newBaseQueueLast.next =
              {
                lane: 0,
                revertLane: 0,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }),
            updateLane === currentEntangledLane &&
              (didReadFromEntangledAsyncAction$54 = !0);
        else if ((renderLanes & revertLane) === revertLane) {
          update = update.next;
          revertLane === currentEntangledLane &&
            (didReadFromEntangledAsyncAction$54 = !0);
          continue;
        } else
          (updateLane = {
            lane: 0,
            revertLane: update.revertLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }),
            null === newBaseQueueLast
              ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
                (baseFirst = pendingQueue))
              : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
            (currentlyRenderingFiber$1.lanes |= revertLane),
            (workInProgressRootSkippedLanes |= revertLane);
        updateLane = update.action;
        shouldDoubleInvokeUserFnsInHooksDEV &&
          reducer(pendingQueue, updateLane);
        pendingQueue = update.hasEagerState
          ? update.eagerState
          : reducer(pendingQueue, updateLane);
      } else
        (revertLane = {
          lane: updateLane,
          revertLane: update.revertLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }),
          null === newBaseQueueLast
            ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
              (baseFirst = pendingQueue))
            : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
          (currentlyRenderingFiber$1.lanes |= updateLane),
          (workInProgressRootSkippedLanes |= updateLane);
      update = update.next;
    } while (null !== update && update !== current);
    null === newBaseQueueLast
      ? (baseFirst = pendingQueue)
      : (newBaseQueueLast.next = newBaseQueueFirst);
    if (
      !objectIs(pendingQueue, hook.memoizedState) &&
      ((didReceiveUpdate = !0),
      didReadFromEntangledAsyncAction$54 &&
        ((reducer = currentEntangledActionThenable), null !== reducer))
    )
      throw reducer;
    hook.memoizedState = pendingQueue;
    hook.baseState = baseFirst;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = pendingQueue;
  }
  null === baseQueue && (queue.lanes = 0);
  return [hook.memoizedState, queue.dispatch];
}
function rerenderReducer(reducer) {
  var hook = updateWorkInProgressHook(),
    queue = hook.queue;
  if (null === queue) throw Error(formatProdErrorMessage(311));
  queue.lastRenderedReducer = reducer;
  var dispatch = queue.dispatch,
    lastRenderPhaseUpdate = queue.pending,
    newState = hook.memoizedState;
  if (null !== lastRenderPhaseUpdate) {
    queue.pending = null;
    var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
    do (newState = reducer(newState, update.action)), (update = update.next);
    while (update !== lastRenderPhaseUpdate);
    objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
    hook.memoizedState = newState;
    null === hook.baseQueue && (hook.baseState = newState);
    queue.lastRenderedState = newState;
  }
  return [newState, dispatch];
}
function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber$1,
    hook = updateWorkInProgressHook(),
    isHydrating$jscomp$0 = isHydrating;
  if (isHydrating$jscomp$0) {
    if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));
    getServerSnapshot = getServerSnapshot();
  } else getServerSnapshot = getSnapshot();
  var snapshotChanged = !objectIs(
    (currentHook || hook).memoizedState,
    getServerSnapshot
  );
  snapshotChanged &&
    ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0));
  hook = hook.queue;
  updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
    subscribe
  ]);
  if (
    hook.getSnapshot !== getSnapshot ||
    snapshotChanged ||
    (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)
  ) {
    fiber.flags |= 2048;
    pushEffect(
      9,
      updateStoreInstance.bind(
        null,
        fiber,
        hook,
        getServerSnapshot,
        getSnapshot
      ),
      { destroy: void 0 },
      null
    );
    if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
    isHydrating$jscomp$0 ||
      0 !== (renderLanes & 60) ||
      pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
  }
  return getServerSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
  fiber.flags |= 16384;
  fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
  getSnapshot = currentlyRenderingFiber$1.updateQueue;
  null === getSnapshot
    ? ((getSnapshot = createFunctionComponentUpdateQueue()),
      (currentlyRenderingFiber$1.updateQueue = getSnapshot),
      (getSnapshot.stores = [fiber]))
    : ((renderedSnapshot = getSnapshot.stores),
      null === renderedSnapshot
        ? (getSnapshot.stores = [fiber])
        : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
  inst.value = nextSnapshot;
  inst.getSnapshot = getSnapshot;
  checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
  return subscribe(function () {
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  });
}
function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  inst = inst.value;
  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(inst, nextValue);
  } catch (error) {
    return !0;
  }
}
function forceStoreRerender(fiber) {
  var root = enqueueConcurrentRenderForLane(fiber, 2);
  null !== root && scheduleUpdateOnFiber(root, fiber, 2);
}
function mountStateImpl(initialState) {
  var hook = mountWorkInProgressHook();
  if ("function" === typeof initialState) {
    var initialStateInitializer = initialState;
    initialState = initialStateInitializer();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(!0);
      try {
        initialStateInitializer();
      } finally {
        setIsStrictModeForDevtools(!1);
      }
    }
  }
  hook.memoizedState = hook.baseState = initialState;
  hook.queue = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
  hook.baseState = passthrough;
  return updateReducerImpl(
    hook,
    currentHook,
    "function" === typeof reducer ? reducer : basicStateReducer
  );
}
function dispatchActionState(
  fiber,
  actionQueue,
  setPendingState,
  setState,
  payload
) {
  if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
  fiber = actionQueue.action;
  if (null !== fiber) {
    var actionNode = {
      payload: payload,
      action: fiber,
      next: null,
      isTransition: !0,
      status: "pending",
      value: null,
      reason: null,
      listeners: [],
      then: function (listener) {
        actionNode.listeners.push(listener);
      }
    };
    null !== ReactSharedInternals.T
      ? setPendingState(!0)
      : (actionNode.isTransition = !1);
    setState(actionNode);
    setPendingState = actionQueue.pending;
    null === setPendingState
      ? ((actionNode.next = actionQueue.pending = actionNode),
        runActionStateAction(actionQueue, actionNode))
      : ((actionNode.next = setPendingState.next),
        (actionQueue.pending = setPendingState.next = actionNode));
  }
}
function runActionStateAction(actionQueue, node) {
  var action = node.action,
    payload = node.payload,
    prevState = actionQueue.state;
  if (node.isTransition) {
    var prevTransition = ReactSharedInternals.T,
      currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    try {
      var returnValue = action(prevState, payload),
        onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish &&
        onStartTransitionFinish(currentTransition, returnValue);
      handleActionReturnValue(actionQueue, node, returnValue);
    } catch (error) {
      onActionError(actionQueue, node, error);
    } finally {
      ReactSharedInternals.T = prevTransition;
    }
  } else
    try {
      (prevTransition = action(prevState, payload)),
        handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$60) {
      onActionError(actionQueue, node, error$60);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
  null !== returnValue &&
  "object" === typeof returnValue &&
  "function" === typeof returnValue.then
    ? returnValue.then(
        function (nextState) {
          onActionSuccess(actionQueue, node, nextState);
        },
        function (error) {
          return onActionError(actionQueue, node, error);
        }
      )
    : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
  actionNode.status = "fulfilled";
  actionNode.value = nextState;
  notifyActionListeners(actionNode);
  actionQueue.state = nextState;
  actionNode = actionQueue.pending;
  null !== actionNode &&
    ((nextState = actionNode.next),
    nextState === actionNode
      ? (actionQueue.pending = null)
      : ((nextState = nextState.next),
        (actionNode.next = nextState),
        runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
  var last = actionQueue.pending;
  actionQueue.pending = null;
  if (null !== last) {
    last = last.next;
    do
      (actionNode.status = "rejected"),
        (actionNode.reason = error),
        notifyActionListeners(actionNode),
        (actionNode = actionNode.next);
    while (actionNode !== last);
  }
  actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
  actionNode = actionNode.listeners;
  for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
  return newState;
}
function mountActionState(action, initialStateProp) {
  if (isHydrating) {
    var ssrFormState = workInProgressRoot.formState;
    if (null !== ssrFormState) {
      a: {
        var JSCompiler_inline_result = currentlyRenderingFiber$1;
        if (isHydrating) {
          if (nextHydratableInstance) {
            b: {
              var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
              for (
                var inRootOrSingleton = rootOrSingletonContext;
                8 !== JSCompiler_inline_result$jscomp$0.nodeType;

              ) {
                if (!inRootOrSingleton) {
                  JSCompiler_inline_result$jscomp$0 = null;
                  break b;
                }
                JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                  JSCompiler_inline_result$jscomp$0.nextSibling
                );
                if (null === JSCompiler_inline_result$jscomp$0) {
                  JSCompiler_inline_result$jscomp$0 = null;
                  break b;
                }
              }
              inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
              JSCompiler_inline_result$jscomp$0 =
                "F!" === inRootOrSingleton || "F" === inRootOrSingleton
                  ? JSCompiler_inline_result$jscomp$0
                  : null;
            }
            if (JSCompiler_inline_result$jscomp$0) {
              nextHydratableInstance = getNextHydratable(
                JSCompiler_inline_result$jscomp$0.nextSibling
              );
              JSCompiler_inline_result =
                "F!" === JSCompiler_inline_result$jscomp$0.data;
              break a;
            }
          }
          throwOnHydrationMismatch(JSCompiler_inline_result);
        }
        JSCompiler_inline_result = !1;
      }
      JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
    }
  }
  ssrFormState = mountWorkInProgressHook();
  ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
  JSCompiler_inline_result = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: actionStateReducer,
    lastRenderedState: initialStateProp
  };
  ssrFormState.queue = JSCompiler_inline_result;
  ssrFormState = dispatchSetState.bind(
    null,
    currentlyRenderingFiber$1,
    JSCompiler_inline_result
  );
  JSCompiler_inline_result.dispatch = ssrFormState;
  JSCompiler_inline_result = mountStateImpl(!1);
  inRootOrSingleton = dispatchOptimisticSetState.bind(
    null,
    currentlyRenderingFiber$1,
    !1,
    JSCompiler_inline_result.queue
  );
  JSCompiler_inline_result = mountWorkInProgressHook();
  JSCompiler_inline_result$jscomp$0 = {
    state: initialStateProp,
    dispatch: null,
    action: action,
    pending: null
  };
  JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
  ssrFormState = dispatchActionState.bind(
    null,
    currentlyRenderingFiber$1,
    JSCompiler_inline_result$jscomp$0,
    inRootOrSingleton,
    ssrFormState
  );
  JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
  JSCompiler_inline_result.memoizedState = action;
  return [initialStateProp, ssrFormState, !1];
}
function updateActionState(action) {
  var stateHook = updateWorkInProgressHook();
  return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
  currentStateHook = updateReducerImpl(
    stateHook,
    currentStateHook,
    actionStateReducer
  )[0];
  stateHook = updateReducer(basicStateReducer)[0];
  currentStateHook =
    "object" === typeof currentStateHook &&
    null !== currentStateHook &&
    "function" === typeof currentStateHook.then
      ? useThenable(currentStateHook)
      : currentStateHook;
  var actionQueueHook = updateWorkInProgressHook(),
    actionQueue = actionQueueHook.queue,
    dispatch = actionQueue.dispatch;
  action !== actionQueueHook.memoizedState &&
    ((currentlyRenderingFiber$1.flags |= 2048),
    pushEffect(
      9,
      actionStateActionEffect.bind(null, actionQueue, action),
      { destroy: void 0 },
      null
    ));
  return [currentStateHook, dispatch, stateHook];
}
function actionStateActionEffect(actionQueue, action) {
  actionQueue.action = action;
}
function rerenderActionState(action) {
  var stateHook = updateWorkInProgressHook(),
    currentStateHook = currentHook;
  if (null !== currentStateHook)
    return updateActionStateImpl(stateHook, currentStateHook, action);
  updateWorkInProgressHook();
  stateHook = stateHook.memoizedState;
  currentStateHook = updateWorkInProgressHook();
  var dispatch = currentStateHook.queue.dispatch;
  currentStateHook.memoizedState = action;
  return [stateHook, dispatch, !1];
}
function pushEffect(tag, create, inst, deps) {
  tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };
  create = currentlyRenderingFiber$1.updateQueue;
  null === create &&
    ((create = createFunctionComponentUpdateQueue()),
    (currentlyRenderingFiber$1.updateQueue = create));
  inst = create.lastEffect;
  null === inst
    ? (create.lastEffect = tag.next = tag)
    : ((deps = inst.next),
      (inst.next = tag),
      (tag.next = deps),
      (create.lastEffect = tag));
  return tag;
}
function updateRef() {
  return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(
    1 | hookFlags,
    create,
    { destroy: void 0 },
    void 0 === deps ? null : deps
  );
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  deps = void 0 === deps ? null : deps;
  var inst = hook.memoizedState.inst;
  null !== currentHook &&
  null !== deps &&
  areHookInputsEqual(deps, currentHook.memoizedState.deps)
    ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))
    : ((currentlyRenderingFiber$1.flags |= fiberFlags),
      (hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps)));
}
function mountEffect(create, deps) {
  mountEffectImpl(8390656, 8, create, deps);
}
function updateEffect(create, deps) {
  updateEffectImpl(2048, 8, create, deps);
}
function updateInsertionEffect(create, deps) {
  return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
  return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
  if ("function" === typeof ref) {
    create = create();
    var refCleanup = ref(create);
    return function () {
      "function" === typeof refCleanup ? refCleanup() : ref(null);
    };
  }
  if (null !== ref && void 0 !== ref)
    return (
      (create = create()),
      (ref.current = create),
      function () {
        ref.current = null;
      }
    );
}
function updateImperativeHandle(ref, create, deps) {
  deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
  updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {}
function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  deps = void 0 === deps ? null : deps;
  var prevState = hook.memoizedState;
  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
    return prevState[0];
  hook.memoizedState = [callback, deps];
  return callback;
}
function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  deps = void 0 === deps ? null : deps;
  var prevState = hook.memoizedState;
  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
    return prevState[0];
  prevState = nextCreate();
  if (shouldDoubleInvokeUserFnsInHooksDEV) {
    setIsStrictModeForDevtools(!0);
    try {
      nextCreate();
    } finally {
      setIsStrictModeForDevtools(!1);
    }
  }
  hook.memoizedState = [prevState, deps];
  return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
  if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
    return (hook.memoizedState = value);
  hook.memoizedState = initialValue;
  hook = requestDeferredLane();
  currentlyRenderingFiber$1.lanes |= hook;
  workInProgressRootSkippedLanes |= hook;
  return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
  if (objectIs(value, prevValue)) return value;
  if (null !== currentTreeHiddenStackCursor.current)
    return (
      (hook = mountDeferredValueImpl(hook, value, initialValue)),
      objectIs(hook, prevValue) || (didReceiveUpdate = !0),
      hook
    );
  if (0 === (renderLanes & 42))
    return (didReceiveUpdate = !0), (hook.memoizedState = value);
  hook = requestDeferredLane();
  currentlyRenderingFiber$1.lanes |= hook;
  workInProgressRootSkippedLanes |= hook;
  return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
  var previousPriority = ReactDOMSharedInternals.p;
  ReactDOMSharedInternals.p =
    0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
  var prevTransition = ReactSharedInternals.T,
    currentTransition = {};
  ReactSharedInternals.T = currentTransition;
  dispatchOptimisticSetState(fiber, !1, queue, pendingState);
  try {
    var returnValue = callback(),
      onStartTransitionFinish = ReactSharedInternals.S;
    null !== onStartTransitionFinish &&
      onStartTransitionFinish(currentTransition, returnValue);
    if (
      null !== returnValue &&
      "object" === typeof returnValue &&
      "function" === typeof returnValue.then
    ) {
      var thenableForFinishedState = chainThenableValue(
        returnValue,
        finishedState
      );
      dispatchSetStateInternal(
        fiber,
        queue,
        thenableForFinishedState,
        requestUpdateLane(fiber)
      );
    } else
      dispatchSetStateInternal(
        fiber,
        queue,
        finishedState,
        requestUpdateLane(fiber)
      );
  } catch (error) {
    dispatchSetStateInternal(
      fiber,
      queue,
      { then: function () {}, status: "rejected", reason: error },
      requestUpdateLane()
    );
  } finally {
    (ReactDOMSharedInternals.p = previousPriority),
      (ReactSharedInternals.T = prevTransition);
  }
}
function noop$2() {}
function startHostTransition(formFiber, pendingState, action, formData) {
  if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
  var queue = ensureFormComponentIsStateful(formFiber).queue;
  startTransition(
    formFiber,
    queue,
    pendingState,
    sharedNotPendingObject,
    null === action
      ? noop$2
      : function () {
          requestFormReset$1(formFiber);
          return action(formData);
        }
  );
}
function ensureFormComponentIsStateful(formFiber) {
  var existingStateHook = formFiber.memoizedState;
  if (null !== existingStateHook) return existingStateHook;
  existingStateHook = {
    memoizedState: sharedNotPendingObject,
    baseState: sharedNotPendingObject,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: sharedNotPendingObject
    },
    next: null
  };
  var initialResetState = {};
  existingStateHook.next = {
    memoizedState: initialResetState,
    baseState: initialResetState,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialResetState
    },
    next: null
  };
  formFiber.memoizedState = existingStateHook;
  formFiber = formFiber.alternate;
  null !== formFiber && (formFiber.memoizedState = existingStateHook);
  return existingStateHook;
}
function requestFormReset$1(formFiber) {
  var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
  dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
}
function useHostTransitionStatus() {
  return readContext(HostTransitionContext);
}
function updateId() {
  return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
  return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
  for (var provider = fiber.return; null !== provider; ) {
    switch (provider.tag) {
      case 24:
      case 3:
        var lane = requestUpdateLane();
        fiber = createUpdate(lane);
        var root$63 = enqueueUpdate(provider, fiber, lane);
        null !== root$63 &&
          (scheduleUpdateOnFiber(root$63, provider, lane),
          entangleTransitions(root$63, provider, lane));
        provider = { cache: createCache() };
        fiber.payload = provider;
        return;
    }
    provider = provider.return;
  }
}
function dispatchReducerAction(fiber, queue, action) {
  var lane = requestUpdateLane();
  action = {
    lane: lane,
    revertLane: 0,
    action: action,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  isRenderPhaseUpdate(fiber)
    ? enqueueRenderPhaseUpdate(queue, action)
    : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),
      null !== action &&
        (scheduleUpdateOnFiber(action, fiber, lane),
        entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
  var lane = requestUpdateLane();
  dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
  var update = {
    lane: lane,
    revertLane: 0,
    action: action,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
  else {
    var alternate = fiber.alternate;
    if (
      0 === fiber.lanes &&
      (null === alternate || 0 === alternate.lanes) &&
      ((alternate = queue.lastRenderedReducer), null !== alternate)
    )
      try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = !0;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState))
          return (
            enqueueUpdate$1(fiber, queue, update, 0),
            null === workInProgressRoot && finishQueueingConcurrentUpdates(),
            !1
          );
      } catch (error) {
      } finally {
      }
    action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
    if (null !== action)
      return (
        scheduleUpdateOnFiber(action, fiber, lane),
        entangleTransitionUpdate(action, queue, lane),
        !0
      );
  }
  return !1;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
  action = {
    lane: 2,
    revertLane: requestTransitionLane(),
    action: action,
    hasEagerState: !1,
    eagerState: null,
    next: null
  };
  if (isRenderPhaseUpdate(fiber)) {
    if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
  } else
    (throwIfDuringRender = enqueueConcurrentHookUpdate(
      fiber,
      queue,
      action,
      2
    )),
      null !== throwIfDuringRender &&
        scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
  var alternate = fiber.alternate;
  return (
    fiber === currentlyRenderingFiber$1 ||
    (null !== alternate && alternate === currentlyRenderingFiber$1)
  );
}
function enqueueRenderPhaseUpdate(queue, update) {
  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =
    !0;
  var pending = queue.pending;
  null === pending
    ? (update.next = update)
    : ((update.next = pending.next), (pending.next = update));
  queue.pending = update;
}
function entangleTransitionUpdate(root, queue, lane) {
  if (0 !== (lane & 4194176)) {
    var queueLanes = queue.lanes;
    queueLanes &= root.pendingLanes;
    lane |= queueLanes;
    queue.lanes = lane;
    markRootEntangled(root, lane);
  }
}
var ContextOnlyDispatcher = {
  readContext: readContext,
  use: use,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useInsertionEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useSyncExternalStore: throwInvalidHookError,
  useId: throwInvalidHookError
};
ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
ContextOnlyDispatcher.useFormState = throwInvalidHookError;
ContextOnlyDispatcher.useActionState = throwInvalidHookError;
ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
var HooksDispatcherOnMount = {
  readContext: readContext,
  use: use,
  useCallback: function (callback, deps) {
    mountWorkInProgressHook().memoizedState = [
      callback,
      void 0 === deps ? null : deps
    ];
    return callback;
  },
  useContext: readContext,
  useEffect: mountEffect,
  useImperativeHandle: function (ref, create, deps) {
    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
    mountEffectImpl(
      4194308,
      4,
      imperativeHandleEffect.bind(null, create, ref),
      deps
    );
  },
  useLayoutEffect: function (create, deps) {
    return mountEffectImpl(4194308, 4, create, deps);
  },
  useInsertionEffect: function (create, deps) {
    mountEffectImpl(4, 2, create, deps);
  },
  useMemo: function (nextCreate, deps) {
    var hook = mountWorkInProgressHook();
    deps = void 0 === deps ? null : deps;
    var nextValue = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(!0);
      try {
        nextCreate();
      } finally {
        setIsStrictModeForDevtools(!1);
      }
    }
    hook.memoizedState = [nextValue, deps];
    return nextValue;
  },
  useReducer: function (reducer, initialArg, init) {
    var hook = mountWorkInProgressHook();
    if (void 0 !== init) {
      var initialState = init(initialArg);
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(!0);
        try {
          init(initialArg);
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
    } else initialState = initialArg;
    hook.memoizedState = hook.baseState = initialState;
    reducer = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: reducer,
      lastRenderedState: initialState
    };
    hook.queue = reducer;
    reducer = reducer.dispatch = dispatchReducerAction.bind(
      null,
      currentlyRenderingFiber$1,
      reducer
    );
    return [hook.memoizedState, reducer];
  },
  useRef: function (initialValue) {
    var hook = mountWorkInProgressHook();
    initialValue = { current: initialValue };
    return (hook.memoizedState = initialValue);
  },
  useState: function (initialState) {
    initialState = mountStateImpl(initialState);
    var queue = initialState.queue,
      dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
    queue.dispatch = dispatch;
    return [initialState.memoizedState, dispatch];
  },
  useDebugValue: mountDebugValue,
  useDeferredValue: function (value, initialValue) {
    var hook = mountWorkInProgressHook();
    return mountDeferredValueImpl(hook, value, initialValue);
  },
  useTransition: function () {
    var stateHook = mountStateImpl(!1);
    stateHook = startTransition.bind(
      null,
      currentlyRenderingFiber$1,
      stateHook.queue,
      !0,
      !1
    );
    mountWorkInProgressHook().memoizedState = stateHook;
    return [!1, stateHook];
  },
  useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = mountWorkInProgressHook();
    if (isHydrating) {
      if (void 0 === getServerSnapshot)
        throw Error(formatProdErrorMessage(407));
      getServerSnapshot = getServerSnapshot();
    } else {
      getServerSnapshot = getSnapshot();
      if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
      0 !== (workInProgressRootRenderLanes & 60) ||
        pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
    }
    hook.memoizedState = getServerSnapshot;
    var inst = { value: getServerSnapshot, getSnapshot: getSnapshot };
    hook.queue = inst;
    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
      subscribe
    ]);
    fiber.flags |= 2048;
    pushEffect(
      9,
      updateStoreInstance.bind(
        null,
        fiber,
        inst,
        getServerSnapshot,
        getSnapshot
      ),
      { destroy: void 0 },
      null
    );
    return getServerSnapshot;
  },
  useId: function () {
    var hook = mountWorkInProgressHook(),
      identifierPrefix = workInProgressRoot.identifierPrefix;
    if (isHydrating) {
      var JSCompiler_inline_result = treeContextOverflow;
      var idWithLeadingBit = treeContextId;
      JSCompiler_inline_result =
        (
          idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
        ).toString(32) + JSCompiler_inline_result;
      identifierPrefix =
        ":" + identifierPrefix + "R" + JSCompiler_inline_result;
      JSCompiler_inline_result = localIdCounter++;
      0 < JSCompiler_inline_result &&
        (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
      identifierPrefix += ":";
    } else
      (JSCompiler_inline_result = globalClientIdCounter++),
        (identifierPrefix =
          ":" +
          identifierPrefix +
          "r" +
          JSCompiler_inline_result.toString(32) +
          ":");
    return (hook.memoizedState = identifierPrefix);
  },
  useCacheRefresh: function () {
    return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
      null,
      currentlyRenderingFiber$1
    ));
  }
};
HooksDispatcherOnMount.useMemoCache = useMemoCache;
HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnMount.useFormState = mountActionState;
HooksDispatcherOnMount.useActionState = mountActionState;
HooksDispatcherOnMount.useOptimistic = function (passthrough) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = hook.baseState = passthrough;
  var queue = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: null,
    lastRenderedState: null
  };
  hook.queue = queue;
  hook = dispatchOptimisticSetState.bind(
    null,
    currentlyRenderingFiber$1,
    !0,
    queue
  );
  queue.dispatch = hook;
  return [passthrough, hook];
};
var HooksDispatcherOnUpdate = {
  readContext: readContext,
  use: use,
  useCallback: updateCallback,
  useContext: readContext,
  useEffect: updateEffect,
  useImperativeHandle: updateImperativeHandle,
  useInsertionEffect: updateInsertionEffect,
  useLayoutEffect: updateLayoutEffect,
  useMemo: updateMemo,
  useReducer: updateReducer,
  useRef: updateRef,
  useState: function () {
    return updateReducer(basicStateReducer);
  },
  useDebugValue: mountDebugValue,
  useDeferredValue: function (value, initialValue) {
    var hook = updateWorkInProgressHook();
    return updateDeferredValueImpl(
      hook,
      currentHook.memoizedState,
      value,
      initialValue
    );
  },
  useTransition: function () {
    var booleanOrThenable = updateReducer(basicStateReducer)[0],
      start = updateWorkInProgressHook().memoizedState;
    return [
      "boolean" === typeof booleanOrThenable
        ? booleanOrThenable
        : useThenable(booleanOrThenable),
      start
    ];
  },
  useSyncExternalStore: updateSyncExternalStore,
  useId: updateId
};
HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnUpdate.useFormState = updateActionState;
HooksDispatcherOnUpdate.useActionState = updateActionState;
HooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {
  var hook = updateWorkInProgressHook();
  return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
};
var HooksDispatcherOnRerender = {
  readContext: readContext,
  use: use,
  useCallback: updateCallback,
  useContext: readContext,
  useEffect: updateEffect,
  useImperativeHandle: updateImperativeHandle,
  useInsertionEffect: updateInsertionEffect,
  useLayoutEffect: updateLayoutEffect,
  useMemo: updateMemo,
  useReducer: rerenderReducer,
  useRef: updateRef,
  useState: function () {
    return rerenderReducer(basicStateReducer);
  },
  useDebugValue: mountDebugValue,
  useDeferredValue: function (value, initialValue) {
    var hook = updateWorkInProgressHook();
    return null === currentHook
      ? mountDeferredValueImpl(hook, value, initialValue)
      : updateDeferredValueImpl(
          hook,
          currentHook.memoizedState,
          value,
          initialValue
        );
  },
  useTransition: function () {
    var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
      start = updateWorkInProgressHook().memoizedState;
    return [
      "boolean" === typeof booleanOrThenable
        ? booleanOrThenable
        : useThenable(booleanOrThenable),
      start
    ];
  },
  useSyncExternalStore: updateSyncExternalStore,
  useId: updateId
};
HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
HooksDispatcherOnRerender.useMemoCache = useMemoCache;
HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
HooksDispatcherOnRerender.useFormState = rerenderActionState;
HooksDispatcherOnRerender.useActionState = rerenderActionState;
HooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {
  var hook = updateWorkInProgressHook();
  if (null !== currentHook)
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
  hook.baseState = passthrough;
  return [passthrough, hook.queue.dispatch];
};
function applyDerivedStateFromProps(
  workInProgress,
  ctor,
  getDerivedStateFromProps,
  nextProps
) {
  ctor = workInProgress.memoizedState;
  getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
  getDerivedStateFromProps =
    null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps
      ? ctor
      : assign({}, ctor, getDerivedStateFromProps);
  workInProgress.memoizedState = getDerivedStateFromProps;
  0 === workInProgress.lanes &&
    (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
var classComponentUpdater = {
  isMounted: function (component) {
    return (component = component._reactInternals)
      ? getNearestMountedFiber(component) === component
      : !1;
  },
  enqueueSetState: function (inst, payload, callback) {
    inst = inst._reactInternals;
    var lane = requestUpdateLane(),
      update = createUpdate(lane);
    update.payload = payload;
    void 0 !== callback && null !== callback && (update.callback = callback);
    payload = enqueueUpdate(inst, update, lane);
    null !== payload &&
      (scheduleUpdateOnFiber(payload, inst, lane),
      entangleTransitions(payload, inst, lane));
  },
  enqueueReplaceState: function (inst, payload, callback) {
    inst = inst._reactInternals;
    var lane = requestUpdateLane(),
      update = createUpdate(lane);
    update.tag = 1;
    update.payload = payload;
    void 0 !== callback && null !== callback && (update.callback = callback);
    payload = enqueueUpdate(inst, update, lane);
    null !== payload &&
      (scheduleUpdateOnFiber(payload, inst, lane),
      entangleTransitions(payload, inst, lane));
  },
  enqueueForceUpdate: function (inst, callback) {
    inst = inst._reactInternals;
    var lane = requestUpdateLane(),
      update = createUpdate(lane);
    update.tag = 2;
    void 0 !== callback && null !== callback && (update.callback = callback);
    callback = enqueueUpdate(inst, update, lane);
    null !== callback &&
      (scheduleUpdateOnFiber(callback, inst, lane),
      entangleTransitions(callback, inst, lane));
  }
};
function checkShouldComponentUpdate(
  workInProgress,
  ctor,
  oldProps,
  newProps,
  oldState,
  newState,
  nextContext
) {
  workInProgress = workInProgress.stateNode;
  return "function" === typeof workInProgress.shouldComponentUpdate
    ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
    : ctor.prototype && ctor.prototype.isPureReactComponent
      ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
      : !0;
}
function callComponentWillReceiveProps(
  workInProgress,
  instance,
  newProps,
  nextContext
) {
  workInProgress = instance.state;
  "function" === typeof instance.componentWillReceiveProps &&
    instance.componentWillReceiveProps(newProps, nextContext);
  "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  instance.state !== workInProgress &&
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function resolveClassComponentProps(Component, baseProps) {
  var newProps = baseProps;
  if ("ref" in baseProps) {
    newProps = {};
    for (var propName in baseProps)
      "ref" !== propName && (newProps[propName] = baseProps[propName]);
  }
  if ((Component = Component.defaultProps)) {
    newProps === baseProps && (newProps = assign({}, newProps));
    for (var propName$67 in Component)
      void 0 === newProps[propName$67] &&
        (newProps[propName$67] = Component[propName$67]);
  }
  return newProps;
}
var reportGlobalError =
  "function" === typeof reportError
    ? reportError
    : function (error) {
        if (
          "object" === typeof window &&
          "function" === typeof window.ErrorEvent
        ) {
          var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message:
              "object" === typeof error &&
              null !== error &&
              "string" === typeof error.message
                ? String(error.message)
                : String(error),
            error: error
          });
          if (!window.dispatchEvent(event)) return;
        } else if (
          "object" === typeof process &&
          "function" === typeof process.emit
        ) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
function defaultOnUncaughtError(error) {
  reportGlobalError(error);
}
function defaultOnCaughtError(error) {
  console.error(error);
}
function defaultOnRecoverableError(error) {
  reportGlobalError(error);
}
function logUncaughtError(root, errorInfo) {
  try {
    var onUncaughtError = root.onUncaughtError;
    onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
  } catch (e$68) {
    setTimeout(function () {
      throw e$68;
    });
  }
}
function logCaughtError(root, boundary, errorInfo) {
  try {
    var onCaughtError = root.onCaughtError;
    onCaughtError(errorInfo.value, {
      componentStack: errorInfo.stack,
      errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
    });
  } catch (e$69) {
    setTimeout(function () {
      throw e$69;
    });
  }
}
function createRootErrorUpdate(root, errorInfo, lane) {
  lane = createUpdate(lane);
  lane.tag = 3;
  lane.payload = { element: null };
  lane.callback = function () {
    logUncaughtError(root, errorInfo);
  };
  return lane;
}
function createClassErrorUpdate(lane) {
  lane = createUpdate(lane);
  lane.tag = 3;
  return lane;
}
function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
  if ("function" === typeof getDerivedStateFromError) {
    var error = errorInfo.value;
    update.payload = function () {
      return getDerivedStateFromError(error);
    };
    update.callback = function () {
      logCaughtError(root, fiber, errorInfo);
    };
  }
  var inst = fiber.stateNode;
  null !== inst &&
    "function" === typeof inst.componentDidCatch &&
    (update.callback = function () {
      logCaughtError(root, fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError &&
        (null === legacyErrorBoundariesThatAlreadyFailed
          ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
          : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
}
function throwException(
  root,
  returnFiber,
  sourceFiber,
  value,
  rootRenderLanes
) {
  sourceFiber.flags |= 32768;
  if (
    null !== value &&
    "object" === typeof value &&
    "function" === typeof value.then
  ) {
    returnFiber = sourceFiber.alternate;
    null !== returnFiber &&
      propagateParentContextChanges(
        returnFiber,
        sourceFiber,
        rootRenderLanes,
        !0
      );
    sourceFiber = suspenseHandlerStackCursor.current;
    if (null !== sourceFiber) {
      switch (sourceFiber.tag) {
        case 13:
          return (
            null === shellBoundary
              ? renderDidSuspendDelayIfPossible()
              : null === sourceFiber.alternate &&
                0 === workInProgressRootExitStatus &&
                (workInProgressRootExitStatus = 3),
            (sourceFiber.flags &= -257),
            (sourceFiber.flags |= 65536),
            (sourceFiber.lanes = rootRenderLanes),
            value === noopSuspenseyCommitThenable
              ? (sourceFiber.flags |= 16384)
              : ((returnFiber = sourceFiber.updateQueue),
                null === returnFiber
                  ? (sourceFiber.updateQueue = new Set([value]))
                  : returnFiber.add(value),
                attachPingListener(root, value, rootRenderLanes)),
            !1
          );
        case 22:
          return (
            (sourceFiber.flags |= 65536),
            value === noopSuspenseyCommitThenable
              ? (sourceFiber.flags |= 16384)
              : ((returnFiber = sourceFiber.updateQueue),
                null === returnFiber
                  ? ((returnFiber = {
                      transitions: null,
                      markerInstances: null,
                      retryQueue: new Set([value])
                    }),
                    (sourceFiber.updateQueue = returnFiber))
                  : ((sourceFiber = returnFiber.retryQueue),
                    null === sourceFiber
                      ? (returnFiber.retryQueue = new Set([value]))
                      : sourceFiber.add(value)),
                attachPingListener(root, value, rootRenderLanes)),
            !1
          );
      }
      throw Error(formatProdErrorMessage(435, sourceFiber.tag));
    }
    attachPingListener(root, value, rootRenderLanes);
    renderDidSuspendDelayIfPossible();
    return !1;
  }
  if (isHydrating)
    return (
      (returnFiber = suspenseHandlerStackCursor.current),
      null !== returnFiber
        ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
          (returnFiber.flags |= 65536),
          (returnFiber.lanes = rootRenderLanes),
          value !== HydrationMismatchException &&
            ((root = Error(formatProdErrorMessage(422), { cause: value })),
            queueHydrationError(createCapturedValueAtFiber(root, sourceFiber))))
        : (value !== HydrationMismatchException &&
            ((returnFiber = Error(formatProdErrorMessage(423), {
              cause: value
            })),
            queueHydrationError(
              createCapturedValueAtFiber(returnFiber, sourceFiber)
            )),
          (root = root.current.alternate),
          (root.flags |= 65536),
          (rootRenderLanes &= -rootRenderLanes),
          (root.lanes |= rootRenderLanes),
          (value = createCapturedValueAtFiber(value, sourceFiber)),
          (rootRenderLanes = createRootErrorUpdate(
            root.stateNode,
            value,
            rootRenderLanes
          )),
          enqueueCapturedUpdate(root, rootRenderLanes),
          4 !== workInProgressRootExitStatus &&
            (workInProgressRootExitStatus = 2)),
      !1
    );
  var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
  wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
  null === workInProgressRootConcurrentErrors
    ? (workInProgressRootConcurrentErrors = [wrapperError])
    : workInProgressRootConcurrentErrors.push(wrapperError);
  4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
  if (null === returnFiber) return !0;
  value = createCapturedValueAtFiber(value, sourceFiber);
  sourceFiber = returnFiber;
  do {
    switch (sourceFiber.tag) {
      case 3:
        return (
          (sourceFiber.flags |= 65536),
          (root = rootRenderLanes & -rootRenderLanes),
          (sourceFiber.lanes |= root),
          (root = createRootErrorUpdate(sourceFiber.stateNode, value, root)),
          enqueueCapturedUpdate(sourceFiber, root),
          !1
        );
      case 1:
        if (
          ((returnFiber = sourceFiber.type),
          (wrapperError = sourceFiber.stateNode),
          0 === (sourceFiber.flags & 128) &&
            ("function" === typeof returnFiber.getDerivedStateFromError ||
              (null !== wrapperError &&
                "function" === typeof wrapperError.componentDidCatch &&
                (null === legacyErrorBoundariesThatAlreadyFailed ||
                  !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError)))))
        )
          return (
            (sourceFiber.flags |= 65536),
            (rootRenderLanes &= -rootRenderLanes),
            (sourceFiber.lanes |= rootRenderLanes),
            (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
            initializeClassErrorUpdate(
              rootRenderLanes,
              root,
              sourceFiber,
              value
            ),
            enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
            !1
          );
    }
    sourceFiber = sourceFiber.return;
  } while (null !== sourceFiber);
  return !1;
}
var SelectiveHydrationException = Error(formatProdErrorMessage(461)),
  didReceiveUpdate = !1;
function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  workInProgress.child =
    null === current
      ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
      : reconcileChildFibers(
          workInProgress,
          current.child,
          nextChildren,
          renderLanes
        );
}
function updateForwardRef(
  current,
  workInProgress,
  Component,
  nextProps,
  renderLanes
) {
  Component = Component.render;
  var ref = workInProgress.ref;
  if ("ref" in nextProps) {
    var propsWithoutRef = {};
    for (var key in nextProps)
      "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
  } else propsWithoutRef = nextProps;
  prepareToReadContext(workInProgress);
  nextProps = renderWithHooks(
    current,
    workInProgress,
    Component,
    propsWithoutRef,
    ref,
    renderLanes
  );
  key = checkDidRenderIdHook();
  if (null !== current && !didReceiveUpdate)
    return (
      bailoutHooks(current, workInProgress, renderLanes),
      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
    );
  isHydrating && key && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, nextProps, renderLanes);
  return workInProgress.child;
}
function updateMemoComponent(
  current,
  workInProgress,
  Component,
  nextProps,
  renderLanes
) {
  if (null === current) {
    var type = Component.type;
    if (
      "function" === typeof type &&
      !shouldConstruct(type) &&
      void 0 === type.defaultProps &&
      null === Component.compare
    )
      return (
        (workInProgress.tag = 15),
        (workInProgress.type = type),
        updateSimpleMemoComponent(
          current,
          workInProgress,
          type,
          nextProps,
          renderLanes
        )
      );
    current = createFiberFromTypeAndProps(
      Component.type,
      null,
      nextProps,
      workInProgress,
      workInProgress.mode,
      renderLanes
    );
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return (workInProgress.child = current);
  }
  type = current.child;
  if (!checkScheduledUpdateOrContext(current, renderLanes)) {
    var prevProps = type.memoizedProps;
    Component = Component.compare;
    Component = null !== Component ? Component : shallowEqual;
    if (Component(prevProps, nextProps) && current.ref === workInProgress.ref)
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  workInProgress.flags |= 1;
  current = createWorkInProgress(type, nextProps);
  current.ref = workInProgress.ref;
  current.return = workInProgress;
  return (workInProgress.child = current);
}
function updateSimpleMemoComponent(
  current,
  workInProgress,
  Component,
  nextProps,
  renderLanes
) {
  if (null !== current) {
    var prevProps = current.memoizedProps;
    if (
      shallowEqual(prevProps, nextProps) &&
      current.ref === workInProgress.ref
    )
      if (
        ((didReceiveUpdate = !1),
        (workInProgress.pendingProps = nextProps = prevProps),
        checkScheduledUpdateOrContext(current, renderLanes))
      )
        0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
      else
        return (
          (workInProgress.lanes = current.lanes),
          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
        );
  }
  return updateFunctionComponent(
    current,
    workInProgress,
    Component,
    nextProps,
    renderLanes
  );
}
function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps,
    nextChildren = nextProps.children,
    nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),
    prevState = null !== current ? current.memoizedState : null;
  markRef(current, workInProgress);
  if ("hidden" === nextProps.mode || nextIsDetached) {
    if (0 !== (workInProgress.flags & 128)) {
      nextProps =
        null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
      if (null !== current) {
        nextChildren = workInProgress.child = current.child;
        for (nextIsDetached = 0; null !== nextChildren; )
          (nextIsDetached =
            nextIsDetached | nextChildren.lanes | nextChildren.childLanes),
            (nextChildren = nextChildren.sibling);
        workInProgress.childLanes = nextIsDetached & ~nextProps;
      } else (workInProgress.childLanes = 0), (workInProgress.child = null);
      return deferHiddenOffscreenComponent(
        current,
        workInProgress,
        nextProps,
        renderLanes
      );
    }
    if (0 !== (renderLanes & 536870912))
      (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
        null !== current &&
          pushTransition(
            workInProgress,
            null !== prevState ? prevState.cachePool : null
          ),
        null !== prevState
          ? pushHiddenContext(workInProgress, prevState)
          : reuseHiddenContextOnStack(),
        pushOffscreenSuspenseHandler(workInProgress);
    else
      return (
        (workInProgress.lanes = workInProgress.childLanes = 536870912),
        deferHiddenOffscreenComponent(
          current,
          workInProgress,
          null !== prevState ? prevState.baseLanes | renderLanes : renderLanes,
          renderLanes
        )
      );
  } else
    null !== prevState
      ? (pushTransition(workInProgress, prevState.cachePool),
        pushHiddenContext(workInProgress, prevState),
        reuseSuspenseHandlerOnStack(workInProgress),
        (workInProgress.memoizedState = null))
      : (null !== current && pushTransition(workInProgress, null),
        reuseHiddenContextOnStack(),
        reuseSuspenseHandlerOnStack(workInProgress));
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}
function deferHiddenOffscreenComponent(
  current,
  workInProgress,
  nextBaseLanes,
  renderLanes
) {
  var JSCompiler_inline_result = peekCacheFromPool();
  JSCompiler_inline_result =
    null === JSCompiler_inline_result
      ? null
      : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
  workInProgress.memoizedState = {
    baseLanes: nextBaseLanes,
    cachePool: JSCompiler_inline_result
  };
  null !== current && pushTransition(workInProgress, null);
  reuseHiddenContextOnStack();
  pushOffscreenSuspenseHandler(workInProgress);
  null !== current &&
    propagateParentContextChanges(current, workInProgress, renderLanes, !0);
  return null;
}
function markRef(current, workInProgress) {
  var ref = workInProgress.ref;
  if (null === ref)
    null !== current &&
      null !== current.ref &&
      (workInProgress.flags |= 2097664);
  else {
    if ("function" !== typeof ref && "object" !== typeof ref)
      throw Error(formatProdErrorMessage(284));
    if (null === current || current.ref !== ref)
      workInProgress.flags |= 2097664;
  }
}
function updateFunctionComponent(
  current,
  workInProgress,
  Component,
  nextProps,
  renderLanes
) {
  prepareToReadContext(workInProgress);
  Component = renderWithHooks(
    current,
    workInProgress,
    Component,
    nextProps,
    void 0,
    renderLanes
  );
  nextProps = checkDidRenderIdHook();
  if (null !== current && !didReceiveUpdate)
    return (
      bailoutHooks(current, workInProgress, renderLanes),
      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
    );
  isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, Component, renderLanes);
  return workInProgress.child;
}
function replayFunctionComponent(
  current,
  workInProgress,
  nextProps,
  Component,
  secondArg,
  renderLanes
) {
  prepareToReadContext(workInProgress);
  workInProgress.updateQueue = null;
  nextProps = renderWithHooksAgain(
    workInProgress,
    Component,
    nextProps,
    secondArg
  );
  finishRenderingHooks(current);
  Component = checkDidRenderIdHook();
  if (null !== current && !didReceiveUpdate)
    return (
      bailoutHooks(current, workInProgress, renderLanes),
      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
    );
  isHydrating && Component && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, nextProps, renderLanes);
  return workInProgress.child;
}
function updateClassComponent(
  current,
  workInProgress,
  Component,
  nextProps,
  renderLanes
) {
  prepareToReadContext(workInProgress);
  if (null === workInProgress.stateNode) {
    var context = emptyContextObject,
      contextType = Component.contextType;
    "object" === typeof contextType &&
      null !== contextType &&
      (context = readContext(contextType));
    context = new Component(nextProps, context);
    workInProgress.memoizedState =
      null !== context.state && void 0 !== context.state ? context.state : null;
    context.updater = classComponentUpdater;
    workInProgress.stateNode = context;
    context._reactInternals = workInProgress;
    context = workInProgress.stateNode;
    context.props = nextProps;
    context.state = workInProgress.memoizedState;
    context.refs = {};
    initializeUpdateQueue(workInProgress);
    contextType = Component.contextType;
    context.context =
      "object" === typeof contextType && null !== contextType
        ? readContext(contextType)
        : emptyContextObject;
    context.state = workInProgress.memoizedState;
    contextType = Component.getDerivedStateFromProps;
    "function" === typeof contextType &&
      (applyDerivedStateFromProps(
        workInProgress,
        Component,
        contextType,
        nextProps
      ),
      (context.state = workInProgress.memoizedState));
    "function" === typeof Component.getDerivedStateFromProps ||
      "function" === typeof context.getSnapshotBeforeUpdate ||
      ("function" !== typeof context.UNSAFE_componentWillMount &&
        "function" !== typeof context.componentWillMount) ||
      ((contextType = context.state),
      "function" === typeof context.componentWillMount &&
        context.componentWillMount(),
      "function" === typeof context.UNSAFE_componentWillMount &&
        context.UNSAFE_componentWillMount(),
      contextType !== context.state &&
        classComponentUpdater.enqueueReplaceState(context, context.state, null),
      processUpdateQueue(workInProgress, nextProps, context, renderLanes),
      suspendIfUpdateReadFromEntangledAsyncAction(),
      (context.state = workInProgress.memoizedState));
    "function" === typeof context.componentDidMount &&
      (workInProgress.flags |= 4194308);
    nextProps = !0;
  } else if (null === current) {
    context = workInProgress.stateNode;
    var unresolvedOldProps = workInProgress.memoizedProps,
      oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
    context.props = oldProps;
    var oldContext = context.context,
      contextType$jscomp$0 = Component.contextType;
    contextType = emptyContextObject;
    "object" === typeof contextType$jscomp$0 &&
      null !== contextType$jscomp$0 &&
      (contextType = readContext(contextType$jscomp$0));
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
    contextType$jscomp$0 =
      "function" === typeof getDerivedStateFromProps ||
      "function" === typeof context.getSnapshotBeforeUpdate;
    unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
    contextType$jscomp$0 ||
      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
        "function" !== typeof context.componentWillReceiveProps) ||
      ((unresolvedOldProps || oldContext !== contextType) &&
        callComponentWillReceiveProps(
          workInProgress,
          context,
          nextProps,
          contextType
        ));
    hasForceUpdate = !1;
    var oldState = workInProgress.memoizedState;
    context.state = oldState;
    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
    suspendIfUpdateReadFromEntangledAsyncAction();
    oldContext = workInProgress.memoizedState;
    unresolvedOldProps || oldState !== oldContext || hasForceUpdate
      ? ("function" === typeof getDerivedStateFromProps &&
          (applyDerivedStateFromProps(
            workInProgress,
            Component,
            getDerivedStateFromProps,
            nextProps
          ),
          (oldContext = workInProgress.memoizedState)),
        (oldProps =
          hasForceUpdate ||
          checkShouldComponentUpdate(
            workInProgress,
            Component,
            oldProps,
            nextProps,
            oldState,
            oldContext,
            contextType
          ))
          ? (contextType$jscomp$0 ||
              ("function" !== typeof context.UNSAFE_componentWillMount &&
                "function" !== typeof context.componentWillMount) ||
              ("function" === typeof context.componentWillMount &&
                context.componentWillMount(),
              "function" === typeof context.UNSAFE_componentWillMount &&
                context.UNSAFE_componentWillMount()),
            "function" === typeof context.componentDidMount &&
              (workInProgress.flags |= 4194308))
          : ("function" === typeof context.componentDidMount &&
              (workInProgress.flags |= 4194308),
            (workInProgress.memoizedProps = nextProps),
            (workInProgress.memoizedState = oldContext)),
        (context.props = nextProps),
        (context.state = oldContext),
        (context.context = contextType),
        (nextProps = oldProps))
      : ("function" === typeof context.componentDidMount &&
          (workInProgress.flags |= 4194308),
        (nextProps = !1));
  } else {
    context = workInProgress.stateNode;
    cloneUpdateQueue(current, workInProgress);
    contextType = workInProgress.memoizedProps;
    contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
    context.props = contextType$jscomp$0;
    getDerivedStateFromProps = workInProgress.pendingProps;
    oldState = context.context;
    oldContext = Component.contextType;
    oldProps = emptyContextObject;
    "object" === typeof oldContext &&
      null !== oldContext &&
      (oldProps = readContext(oldContext));
    unresolvedOldProps = Component.getDerivedStateFromProps;
    (oldContext =
      "function" === typeof unresolvedOldProps ||
      "function" === typeof context.getSnapshotBeforeUpdate) ||
      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
        "function" !== typeof context.componentWillReceiveProps) ||
      ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&
        callComponentWillReceiveProps(
          workInProgress,
          context,
          nextProps,
          oldProps
        ));
    hasForceUpdate = !1;
    oldState = workInProgress.memoizedState;
    context.state = oldState;
    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
    suspendIfUpdateReadFromEntangledAsyncAction();
    var newState = workInProgress.memoizedState;
    contextType !== getDerivedStateFromProps ||
    oldState !== newState ||
    hasForceUpdate ||
    (null !== current &&
      null !== current.dependencies &&
      checkIfContextChanged(current.dependencies))
      ? ("function" === typeof unresolvedOldProps &&
          (applyDerivedStateFromProps(
            workInProgress,
            Component,
            unresolvedOldProps,
            nextProps
          ),
          (newState = workInProgress.memoizedState)),
        (contextType$jscomp$0 =
          hasForceUpdate ||
          checkShouldComponentUpdate(
            workInProgress,
            Component,
            contextType$jscomp$0,
            nextProps,
            oldState,
            newState,
            oldProps
          ) ||
          (null !== current &&
            null !== current.dependencies &&
            checkIfContextChanged(current.dependencies)))
          ? (oldContext ||
              ("function" !== typeof context.UNSAFE_componentWillUpdate &&
                "function" !== typeof context.componentWillUpdate) ||
              ("function" === typeof context.componentWillUpdate &&
                context.componentWillUpdate(nextProps, newState, oldProps),
              "function" === typeof context.UNSAFE_componentWillUpdate &&
                context.UNSAFE_componentWillUpdate(
                  nextProps,
                  newState,
                  oldProps
                )),
            "function" === typeof context.componentDidUpdate &&
              (workInProgress.flags |= 4),
            "function" === typeof context.getSnapshotBeforeUpdate &&
              (workInProgress.flags |= 1024))
          : ("function" !== typeof context.componentDidUpdate ||
              (contextType === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 4),
            "function" !== typeof context.getSnapshotBeforeUpdate ||
              (contextType === current.memoizedProps &&
                oldState === current.memoizedState) ||
              (workInProgress.flags |= 1024),
            (workInProgress.memoizedProps = nextProps),
            (workInProgress.memoizedState = newState)),
        (context.props = nextProps),
        (context.state = newState),
        (context.context = oldProps),
        (nextProps = contextType$jscomp$0))
      : ("function" !== typeof context.componentDidUpdate ||
          (contextType === current.memoizedProps &&
            oldState === current.memoizedState) ||
          (workInProgress.flags |= 4),
        "function" !== typeof context.getSnapshotBeforeUpdate ||
          (contextType === current.memoizedProps &&
            oldState === current.memoizedState) ||
          (workInProgress.flags |= 1024),
        (nextProps = !1));
  }
  context = nextProps;
  markRef(current, workInProgress);
  nextProps = 0 !== (workInProgress.flags & 128);
  context || nextProps
    ? ((context = workInProgress.stateNode),
      (Component =
        nextProps && "function" !== typeof Component.getDerivedStateFromError
          ? null
          : context.render()),
      (workInProgress.flags |= 1),
      null !== current && nextProps
        ? ((workInProgress.child = reconcileChildFibers(
            workInProgress,
            current.child,
            null,
            renderLanes
          )),
          (workInProgress.child = reconcileChildFibers(
            workInProgress,
            null,
            Component,
            renderLanes
          )))
        : reconcileChildren(current, workInProgress, Component, renderLanes),
      (workInProgress.memoizedState = context.state),
      (current = workInProgress.child))
    : (current = bailoutOnAlreadyFinishedWork(
        current,
        workInProgress,
        renderLanes
      ));
  return current;
}
function mountHostRootWithoutHydrating(
  current,
  workInProgress,
  nextChildren,
  renderLanes
) {
  resetHydrationState();
  workInProgress.flags |= 256;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}
var SUSPENDED_MARKER = { dehydrated: null, treeContext: null, retryLane: 0 };
function mountSuspenseOffscreenState(renderLanes) {
  return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
}
function getRemainingWorkInPrimaryTree(
  current,
  primaryTreeDidDefer,
  renderLanes
) {
  current = null !== current ? current.childLanes & ~renderLanes : 0;
  primaryTreeDidDefer && (current |= workInProgressDeferredLane);
  return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps,
    showFallback = !1,
    didSuspend = 0 !== (workInProgress.flags & 128),
    JSCompiler_temp;
  (JSCompiler_temp = didSuspend) ||
    (JSCompiler_temp =
      null !== current && null === current.memoizedState
        ? !1
        : 0 !== (suspenseStackCursor.current & 2));
  JSCompiler_temp && ((showFallback = !0), (workInProgress.flags &= -129));
  JSCompiler_temp = 0 !== (workInProgress.flags & 32);
  workInProgress.flags &= -33;
  if (null === current) {
    if (isHydrating) {
      showFallback
        ? pushPrimaryTreeSuspenseHandler(workInProgress)
        : reuseSuspenseHandlerOnStack(workInProgress);
      if (isHydrating) {
        var nextInstance = nextHydratableInstance,
          JSCompiler_temp$jscomp$0;
        if ((JSCompiler_temp$jscomp$0 = nextInstance)) {
          c: {
            JSCompiler_temp$jscomp$0 = nextInstance;
            for (
              nextInstance = rootOrSingletonContext;
              8 !== JSCompiler_temp$jscomp$0.nodeType;

            ) {
              if (!nextInstance) {
                nextInstance = null;
                break c;
              }
              JSCompiler_temp$jscomp$0 = getNextHydratable(
                JSCompiler_temp$jscomp$0.nextSibling
              );
              if (null === JSCompiler_temp$jscomp$0) {
                nextInstance = null;
                break c;
              }
            }
            nextInstance = JSCompiler_temp$jscomp$0;
          }
          null !== nextInstance
            ? ((workInProgress.memoizedState = {
                dehydrated: nextInstance,
                treeContext:
                  null !== treeContextProvider
                    ? { id: treeContextId, overflow: treeContextOverflow }
                    : null,
                retryLane: 536870912
              }),
              (JSCompiler_temp$jscomp$0 = createFiberImplClass(
                18,
                null,
                null,
                0
              )),
              (JSCompiler_temp$jscomp$0.stateNode = nextInstance),
              (JSCompiler_temp$jscomp$0.return = workInProgress),
              (workInProgress.child = JSCompiler_temp$jscomp$0),
              (hydrationParentFiber = workInProgress),
              (nextHydratableInstance = null),
              (JSCompiler_temp$jscomp$0 = !0))
            : (JSCompiler_temp$jscomp$0 = !1);
        }
        JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);
      }
      nextInstance = workInProgress.memoizedState;
      if (
        null !== nextInstance &&
        ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
      )
        return (
          "$!" === nextInstance.data
            ? (workInProgress.lanes = 16)
            : (workInProgress.lanes = 536870912),
          null
        );
      popSuspenseHandler(workInProgress);
    }
    nextInstance = nextProps.children;
    nextProps = nextProps.fallback;
    if (showFallback)
      return (
        reuseSuspenseHandlerOnStack(workInProgress),
        (showFallback = workInProgress.mode),
        (nextInstance = mountWorkInProgressOffscreenFiber(
          { mode: "hidden", children: nextInstance },
          showFallback
        )),
        (nextProps = createFiberFromFragment(
          nextProps,
          showFallback,
          renderLanes,
          null
        )),
        (nextInstance.return = workInProgress),
        (nextProps.return = workInProgress),
        (nextInstance.sibling = nextProps),
        (workInProgress.child = nextInstance),
        (showFallback = workInProgress.child),
        (showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes)),
        (showFallback.childLanes = getRemainingWorkInPrimaryTree(
          current,
          JSCompiler_temp,
          renderLanes
        )),
        (workInProgress.memoizedState = SUSPENDED_MARKER),
        nextProps
      );
    pushPrimaryTreeSuspenseHandler(workInProgress);
    return mountSuspensePrimaryChildren(workInProgress, nextInstance);
  }
  JSCompiler_temp$jscomp$0 = current.memoizedState;
  if (
    null !== JSCompiler_temp$jscomp$0 &&
    ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),
    null !== nextInstance)
  ) {
    if (didSuspend)
      workInProgress.flags & 256
        ? (pushPrimaryTreeSuspenseHandler(workInProgress),
          (workInProgress.flags &= -257),
          (workInProgress = retrySuspenseComponentWithoutHydrating(
            current,
            workInProgress,
            renderLanes
          )))
        : null !== workInProgress.memoizedState
          ? (reuseSuspenseHandlerOnStack(workInProgress),
            (workInProgress.child = current.child),
            (workInProgress.flags |= 128),
            (workInProgress = null))
          : (reuseSuspenseHandlerOnStack(workInProgress),
            (showFallback = nextProps.fallback),
            (nextInstance = workInProgress.mode),
            (nextProps = mountWorkInProgressOffscreenFiber(
              { mode: "visible", children: nextProps.children },
              nextInstance
            )),
            (showFallback = createFiberFromFragment(
              showFallback,
              nextInstance,
              renderLanes,
              null
            )),
            (showFallback.flags |= 2),
            (nextProps.return = workInProgress),
            (showFallback.return = workInProgress),
            (nextProps.sibling = showFallback),
            (workInProgress.child = nextProps),
            reconcileChildFibers(
              workInProgress,
              current.child,
              null,
              renderLanes
            ),
            (nextProps = workInProgress.child),
            (nextProps.memoizedState =
              mountSuspenseOffscreenState(renderLanes)),
            (nextProps.childLanes = getRemainingWorkInPrimaryTree(
              current,
              JSCompiler_temp,
              renderLanes
            )),
            (workInProgress.memoizedState = SUSPENDED_MARKER),
            (workInProgress = showFallback));
    else if (
      (pushPrimaryTreeSuspenseHandler(workInProgress),
      "$!" === nextInstance.data)
    ) {
      JSCompiler_temp =
        nextInstance.nextSibling && nextInstance.nextSibling.dataset;
      if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
      JSCompiler_temp = digest;
      nextProps = Error(formatProdErrorMessage(419));
      nextProps.stack = "";
      nextProps.digest = JSCompiler_temp;
      queueHydrationError({ value: nextProps, source: null, stack: null });
      workInProgress = retrySuspenseComponentWithoutHydrating(
        current,
        workInProgress,
        renderLanes
      );
    } else if (
      (didReceiveUpdate ||
        propagateParentContextChanges(current, workInProgress, renderLanes, !1),
      (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),
      didReceiveUpdate || JSCompiler_temp)
    ) {
      JSCompiler_temp = workInProgressRoot;
      if (null !== JSCompiler_temp) {
        nextProps = renderLanes & -renderLanes;
        if (0 !== (nextProps & 42)) nextProps = 1;
        else
          switch (nextProps) {
            case 2:
              nextProps = 1;
              break;
            case 8:
              nextProps = 4;
              break;
            case 32:
              nextProps = 16;
              break;
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              nextProps = 64;
              break;
            case 268435456:
              nextProps = 134217728;
              break;
            default:
              nextProps = 0;
          }
        nextProps =
          0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))
            ? 0
            : nextProps;
        if (0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane)
          throw (
            ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
            enqueueConcurrentRenderForLane(current, nextProps),
            scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
            SelectiveHydrationException)
          );
      }
      "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
      workInProgress = retrySuspenseComponentWithoutHydrating(
        current,
        workInProgress,
        renderLanes
      );
    } else
      "$?" === nextInstance.data
        ? ((workInProgress.flags |= 128),
          (workInProgress.child = current.child),
          (workInProgress = retryDehydratedSuspenseBoundary.bind(
            null,
            current
          )),
          (nextInstance._reactRetry = workInProgress),
          (workInProgress = null))
        : ((current = JSCompiler_temp$jscomp$0.treeContext),
          (nextHydratableInstance = getNextHydratable(
            nextInstance.nextSibling
          )),
          (hydrationParentFiber = workInProgress),
          (isHydrating = !0),
          (hydrationErrors = null),
          (rootOrSingletonContext = !1),
          null !== current &&
            ((idStack[idStackIndex++] = treeContextId),
            (idStack[idStackIndex++] = treeContextOverflow),
            (idStack[idStackIndex++] = treeContextProvider),
            (treeContextId = current.id),
            (treeContextOverflow = current.overflow),
            (treeContextProvider = workInProgress)),
          (workInProgress = mountSuspensePrimaryChildren(
            workInProgress,
            nextProps.children
          )),
          (workInProgress.flags |= 4096));
    return workInProgress;
  }
  if (showFallback)
    return (
      reuseSuspenseHandlerOnStack(workInProgress),
      (showFallback = nextProps.fallback),
      (nextInstance = workInProgress.mode),
      (JSCompiler_temp$jscomp$0 = current.child),
      (digest = JSCompiler_temp$jscomp$0.sibling),
      (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
        mode: "hidden",
        children: nextProps.children
      })),
      (nextProps.subtreeFlags =
        JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),
      null !== digest
        ? (showFallback = createWorkInProgress(digest, showFallback))
        : ((showFallback = createFiberFromFragment(
            showFallback,
            nextInstance,
            renderLanes,
            null
          )),
          (showFallback.flags |= 2)),
      (showFallback.return = workInProgress),
      (nextProps.return = workInProgress),
      (nextProps.sibling = showFallback),
      (workInProgress.child = nextProps),
      (nextProps = showFallback),
      (showFallback = workInProgress.child),
      (nextInstance = current.child.memoizedState),
      null === nextInstance
        ? (nextInstance = mountSuspenseOffscreenState(renderLanes))
        : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
          null !== JSCompiler_temp$jscomp$0
            ? ((digest = CacheContext._currentValue),
              (JSCompiler_temp$jscomp$0 =
                JSCompiler_temp$jscomp$0.parent !== digest
                  ? { parent: digest, pool: digest }
                  : JSCompiler_temp$jscomp$0))
            : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
          (nextInstance = {
            baseLanes: nextInstance.baseLanes | renderLanes,
            cachePool: JSCompiler_temp$jscomp$0
          })),
      (showFallback.memoizedState = nextInstance),
      (showFallback.childLanes = getRemainingWorkInPrimaryTree(
        current,
        JSCompiler_temp,
        renderLanes
      )),
      (workInProgress.memoizedState = SUSPENDED_MARKER),
      nextProps
    );
  pushPrimaryTreeSuspenseHandler(workInProgress);
  renderLanes = current.child;
  current = renderLanes.sibling;
  renderLanes = createWorkInProgress(renderLanes, {
    mode: "visible",
    children: nextProps.children
  });
  renderLanes.return = workInProgress;
  renderLanes.sibling = null;
  null !== current &&
    ((JSCompiler_temp = workInProgress.deletions),
    null === JSCompiler_temp
      ? ((workInProgress.deletions = [current]), (workInProgress.flags |= 16))
      : JSCompiler_temp.push(current));
  workInProgress.child = renderLanes;
  workInProgress.memoizedState = null;
  return renderLanes;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
  primaryChildren = mountWorkInProgressOffscreenFiber(
    { mode: "visible", children: primaryChildren },
    workInProgress.mode
  );
  primaryChildren.return = workInProgress;
  return (workInProgress.child = primaryChildren);
}
function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
  return createFiberFromOffscreen(offscreenProps, mode, 0, null);
}
function retrySuspenseComponentWithoutHydrating(
  current,
  workInProgress,
  renderLanes
) {
  reconcileChildFibers(workInProgress, current.child, null, renderLanes);
  current = mountSuspensePrimaryChildren(
    workInProgress,
    workInProgress.pendingProps.children
  );
  current.flags |= 2;
  workInProgress.memoizedState = null;
  return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
  fiber.lanes |= renderLanes;
  var alternate = fiber.alternate;
  null !== alternate && (alternate.lanes |= renderLanes);
  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
}
function initSuspenseListRenderState(
  workInProgress,
  isBackwards,
  tail,
  lastContentRow,
  tailMode
) {
  var renderState = workInProgress.memoizedState;
  null === renderState
    ? (workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode
      })
    : ((renderState.isBackwards = isBackwards),
      (renderState.rendering = null),
      (renderState.renderingStartTime = 0),
      (renderState.last = lastContentRow),
      (renderState.tail = tail),
      (renderState.tailMode = tailMode));
}
function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps,
    revealOrder = nextProps.revealOrder,
    tailMode = nextProps.tail;
  reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
  nextProps = suspenseStackCursor.current;
  if (0 !== (nextProps & 2))
    (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
  else {
    if (null !== current && 0 !== (current.flags & 128))
      a: for (current = workInProgress.child; null !== current; ) {
        if (13 === current.tag)
          null !== current.memoizedState &&
            scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
        else if (19 === current.tag)
          scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
        else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling; ) {
          if (null === current.return || current.return === workInProgress)
            break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
    nextProps &= 1;
  }
  push(suspenseStackCursor, nextProps);
  switch (revealOrder) {
    case "forwards":
      renderLanes = workInProgress.child;
      for (revealOrder = null; null !== renderLanes; )
        (current = renderLanes.alternate),
          null !== current &&
            null === findFirstSuspended(current) &&
            (revealOrder = renderLanes),
          (renderLanes = renderLanes.sibling);
      renderLanes = revealOrder;
      null === renderLanes
        ? ((revealOrder = workInProgress.child), (workInProgress.child = null))
        : ((revealOrder = renderLanes.sibling), (renderLanes.sibling = null));
      initSuspenseListRenderState(
        workInProgress,
        !1,
        revealOrder,
        renderLanes,
        tailMode
      );
      break;
    case "backwards":
      renderLanes = null;
      revealOrder = workInProgress.child;
      for (workInProgress.child = null; null !== revealOrder; ) {
        current = revealOrder.alternate;
        if (null !== current && null === findFirstSuspended(current)) {
          workInProgress.child = revealOrder;
          break;
        }
        current = revealOrder.sibling;
        revealOrder.sibling = renderLanes;
        renderLanes = revealOrder;
        revealOrder = current;
      }
      initSuspenseListRenderState(
        workInProgress,
        !0,
        renderLanes,
        null,
        tailMode
      );
      break;
    case "together":
      initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
      break;
    default:
      workInProgress.memoizedState = null;
  }
  return workInProgress.child;
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  null !== current && (workInProgress.dependencies = current.dependencies);
  workInProgressRootSkippedLanes |= workInProgress.lanes;
  if (0 === (renderLanes & workInProgress.childLanes))
    if (null !== current) {
      if (
        (propagateParentContextChanges(
          current,
          workInProgress,
          renderLanes,
          !1
        ),
        0 === (renderLanes & workInProgress.childLanes))
      )
        return null;
    } else return null;
  if (null !== current && workInProgress.child !== current.child)
    throw Error(formatProdErrorMessage(153));
  if (null !== workInProgress.child) {
    current = workInProgress.child;
    renderLanes = createWorkInProgress(current, current.pendingProps);
    workInProgress.child = renderLanes;
    for (renderLanes.return = workInProgress; null !== current.sibling; )
      (current = current.sibling),
        (renderLanes = renderLanes.sibling =
          createWorkInProgress(current, current.pendingProps)),
        (renderLanes.return = workInProgress);
    renderLanes.sibling = null;
  }
  return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes) {
  if (0 !== (current.lanes & renderLanes)) return !0;
  current = current.dependencies;
  return null !== current && checkIfContextChanged(current) ? !0 : !1;
}
function attemptEarlyBailoutIfNoScheduledUpdate(
  current,
  workInProgress,
  renderLanes
) {
  switch (workInProgress.tag) {
    case 3:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
      resetHydrationState();
      break;
    case 27:
    case 5:
      pushHostContext(workInProgress);
      break;
    case 4:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;
    case 10:
      pushProvider(
        workInProgress,
        workInProgress.type,
        workInProgress.memoizedProps.value
      );
      break;
    case 13:
      var state = workInProgress.memoizedState;
      if (null !== state) {
        if (null !== state.dehydrated)
          return (
            pushPrimaryTreeSuspenseHandler(workInProgress),
            (workInProgress.flags |= 128),
            null
          );
        if (0 !== (renderLanes & workInProgress.child.childLanes))
          return updateSuspenseComponent(current, workInProgress, renderLanes);
        pushPrimaryTreeSuspenseHandler(workInProgress);
        current = bailoutOnAlreadyFinishedWork(
          current,
          workInProgress,
          renderLanes
        );
        return null !== current ? current.sibling : null;
      }
      pushPrimaryTreeSuspenseHandler(workInProgress);
      break;
    case 19:
      var didSuspendBefore = 0 !== (current.flags & 128);
      state = 0 !== (renderLanes & workInProgress.childLanes);
      state ||
        (propagateParentContextChanges(
          current,
          workInProgress,
          renderLanes,
          !1
        ),
        (state = 0 !== (renderLanes & workInProgress.childLanes)));
      if (didSuspendBefore) {
        if (state)
          return updateSuspenseListComponent(
            current,
            workInProgress,
            renderLanes
          );
        workInProgress.flags |= 128;
      }
      didSuspendBefore = workInProgress.memoizedState;
      null !== didSuspendBefore &&
        ((didSuspendBefore.rendering = null),
        (didSuspendBefore.tail = null),
        (didSuspendBefore.lastEffect = null));
      push(suspenseStackCursor, suspenseStackCursor.current);
      if (state) break;
      else return null;
    case 22:
    case 23:
      return (
        (workInProgress.lanes = 0),
        updateOffscreenComponent(current, workInProgress, renderLanes)
      );
    case 24:
      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
  }
  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
}
function beginWork(current, workInProgress, renderLanes) {
  if (null !== current)
    if (current.memoizedProps !== workInProgress.pendingProps)
      didReceiveUpdate = !0;
    else {
      if (
        !checkScheduledUpdateOrContext(current, renderLanes) &&
        0 === (workInProgress.flags & 128)
      )
        return (
          (didReceiveUpdate = !1),
          attemptEarlyBailoutIfNoScheduledUpdate(
            current,
            workInProgress,
            renderLanes
          )
        );
      didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
    }
  else
    (didReceiveUpdate = !1),
      isHydrating &&
        0 !== (workInProgress.flags & 1048576) &&
        pushTreeId(workInProgress, treeForkCount, workInProgress.index);
  workInProgress.lanes = 0;
  switch (workInProgress.tag) {
    case 16:
      a: {
        current = workInProgress.pendingProps;
        var lazyComponent = workInProgress.elementType,
          init = lazyComponent._init;
        lazyComponent = init(lazyComponent._payload);
        workInProgress.type = lazyComponent;
        if ("function" === typeof lazyComponent)
          shouldConstruct(lazyComponent)
            ? ((current = resolveClassComponentProps(lazyComponent, current)),
              (workInProgress.tag = 1),
              (workInProgress = updateClassComponent(
                null,
                workInProgress,
                lazyComponent,
                current,
                renderLanes
              )))
            : ((workInProgress.tag = 0),
              (workInProgress = updateFunctionComponent(
                null,
                workInProgress,
                lazyComponent,
                current,
                renderLanes
              )));
        else {
          if (void 0 !== lazyComponent && null !== lazyComponent)
            if (
              ((init = lazyComponent.$$typeof), init === REACT_FORWARD_REF_TYPE)
            ) {
              workInProgress.tag = 11;
              workInProgress = updateForwardRef(
                null,
                workInProgress,
                lazyComponent,
                current,
                renderLanes
              );
              break a;
            } else if (init === REACT_MEMO_TYPE) {
              workInProgress.tag = 14;
              workInProgress = updateMemoComponent(
                null,
                workInProgress,
                lazyComponent,
                current,
                renderLanes
              );
              break a;
            }
          workInProgress =
            getComponentNameFromType(lazyComponent) || lazyComponent;
          throw Error(formatProdErrorMessage(306, workInProgress, ""));
        }
      }
      return workInProgress;
    case 0:
      return updateFunctionComponent(
        current,
        workInProgress,
        workInProgress.type,
        workInProgress.pendingProps,
        renderLanes
      );
    case 1:
      return (
        (lazyComponent = workInProgress.type),
        (init = resolveClassComponentProps(
          lazyComponent,
          workInProgress.pendingProps
        )),
        updateClassComponent(
          current,
          workInProgress,
          lazyComponent,
          init,
          renderLanes
        )
      );
    case 3:
      a: {
        pushHostContainer(
          workInProgress,
          workInProgress.stateNode.containerInfo
        );
        if (null === current) throw Error(formatProdErrorMessage(387));
        var nextProps = workInProgress.pendingProps;
        init = workInProgress.memoizedState;
        lazyComponent = init.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        nextProps = nextState.cache;
        pushProvider(workInProgress, CacheContext, nextProps);
        nextProps !== init.cache &&
          propagateContextChanges(
            workInProgress,
            [CacheContext],
            renderLanes,
            !0
          );
        suspendIfUpdateReadFromEntangledAsyncAction();
        nextProps = nextState.element;
        if (init.isDehydrated)
          if (
            ((init = {
              element: nextProps,
              isDehydrated: !1,
              cache: nextState.cache
            }),
            (workInProgress.updateQueue.baseState = init),
            (workInProgress.memoizedState = init),
            workInProgress.flags & 256)
          ) {
            workInProgress = mountHostRootWithoutHydrating(
              current,
              workInProgress,
              nextProps,
              renderLanes
            );
            break a;
          } else if (nextProps !== lazyComponent) {
            lazyComponent = createCapturedValueAtFiber(
              Error(formatProdErrorMessage(424)),
              workInProgress
            );
            queueHydrationError(lazyComponent);
            workInProgress = mountHostRootWithoutHydrating(
              current,
              workInProgress,
              nextProps,
              renderLanes
            );
            break a;
          } else
            for (
              nextHydratableInstance = getNextHydratable(
                workInProgress.stateNode.containerInfo.firstChild
              ),
                hydrationParentFiber = workInProgress,
                isHydrating = !0,
                hydrationErrors = null,
                rootOrSingletonContext = !0,
                renderLanes = mountChildFibers(
                  workInProgress,
                  null,
                  nextProps,
                  renderLanes
                ),
                workInProgress.child = renderLanes;
              renderLanes;

            )
              (renderLanes.flags = (renderLanes.flags & -3) | 4096),
                (renderLanes = renderLanes.sibling);
        else {
          resetHydrationState();
          if (nextProps === lazyComponent) {
            workInProgress = bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            );
            break a;
          }
          reconcileChildren(current, workInProgress, nextProps, renderLanes);
        }
        workInProgress = workInProgress.child;
      }
      return workInProgress;
    case 26:
      return (
        markRef(current, workInProgress),
        null === current
          ? (renderLanes = getResource(
              workInProgress.type,
              null,
              workInProgress.pendingProps,
              null
            ))
            ? (workInProgress.memoizedState = renderLanes)
            : isHydrating ||
              ((renderLanes = workInProgress.type),
              (current = workInProgress.pendingProps),
              (lazyComponent = getOwnerDocumentFromRootContainer(
                rootInstanceStackCursor.current
              ).createElement(renderLanes)),
              (lazyComponent[internalInstanceKey] = workInProgress),
              (lazyComponent[internalPropsKey] = current),
              setInitialProperties(lazyComponent, renderLanes, current),
              markNodeAsHoistable(lazyComponent),
              (workInProgress.stateNode = lazyComponent))
          : (workInProgress.memoizedState = getResource(
              workInProgress.type,
              current.memoizedProps,
              workInProgress.pendingProps,
              current.memoizedState
            )),
        null
      );
    case 27:
      return (
        pushHostContext(workInProgress),
        null === current &&
          isHydrating &&
          ((lazyComponent = workInProgress.stateNode =
            resolveSingletonInstance(
              workInProgress.type,
              workInProgress.pendingProps,
              rootInstanceStackCursor.current
            )),
          (hydrationParentFiber = workInProgress),
          (rootOrSingletonContext = !0),
          (nextHydratableInstance = getNextHydratable(
            lazyComponent.firstChild
          ))),
        (lazyComponent = workInProgress.pendingProps.children),
        null !== current || isHydrating
          ? reconcileChildren(
              current,
              workInProgress,
              lazyComponent,
              renderLanes
            )
          : (workInProgress.child = reconcileChildFibers(
              workInProgress,
              null,
              lazyComponent,
              renderLanes
            )),
        markRef(current, workInProgress),
        workInProgress.child
      );
    case 5:
      if (null === current && isHydrating) {
        if ((init = lazyComponent = nextHydratableInstance))
          (lazyComponent = canHydrateInstance(
            lazyComponent,
            workInProgress.type,
            workInProgress.pendingProps,
            rootOrSingletonContext
          )),
            null !== lazyComponent
              ? ((workInProgress.stateNode = lazyComponent),
                (hydrationParentFiber = workInProgress),
                (nextHydratableInstance = getNextHydratable(
                  lazyComponent.firstChild
                )),
                (rootOrSingletonContext = !1),
                (init = !0))
              : (init = !1);
        init || throwOnHydrationMismatch(workInProgress);
      }
      pushHostContext(workInProgress);
      init = workInProgress.type;
      nextProps = workInProgress.pendingProps;
      nextState = null !== current ? current.memoizedProps : null;
      lazyComponent = nextProps.children;
      shouldSetTextContent(init, nextProps)
        ? (lazyComponent = null)
        : null !== nextState &&
          shouldSetTextContent(init, nextState) &&
          (workInProgress.flags |= 32);
      null !== workInProgress.memoizedState &&
        ((init = renderWithHooks(
          current,
          workInProgress,
          TransitionAwareHostComponent,
          null,
          null,
          renderLanes
        )),
        (HostTransitionContext._currentValue = init));
      markRef(current, workInProgress);
      reconcileChildren(current, workInProgress, lazyComponent, renderLanes);
      return workInProgress.child;
    case 6:
      if (null === current && isHydrating) {
        if ((current = renderLanes = nextHydratableInstance))
          (renderLanes = canHydrateTextInstance(
            renderLanes,
            workInProgress.pendingProps,
            rootOrSingletonContext
          )),
            null !== renderLanes
              ? ((workInProgress.stateNode = renderLanes),
                (hydrationParentFiber = workInProgress),
                (nextHydratableInstance = null),
                (current = !0))
              : (current = !1);
        current || throwOnHydrationMismatch(workInProgress);
      }
      return null;
    case 13:
      return updateSuspenseComponent(current, workInProgress, renderLanes);
    case 4:
      return (
        pushHostContainer(
          workInProgress,
          workInProgress.stateNode.containerInfo
        ),
        (lazyComponent = workInProgress.pendingProps),
        null === current
          ? (workInProgress.child = reconcileChildFibers(
              workInProgress,
              null,
              lazyComponent,
              renderLanes
            ))
          : reconcileChildren(
              current,
              workInProgress,
              lazyComponent,
              renderLanes
            ),
        workInProgress.child
      );
    case 11:
      return updateForwardRef(
        current,
        workInProgress,
        workInProgress.type,
        workInProgress.pendingProps,
        renderLanes
      );
    case 7:
      return (
        reconcileChildren(
          current,
          workInProgress,
          workInProgress.pendingProps,
          renderLanes
        ),
        workInProgress.child
      );
    case 8:
      return (
        reconcileChildren(
          current,
          workInProgress,
          workInProgress.pendingProps.children,
          renderLanes
        ),
        workInProgress.child
      );
    case 12:
      return (
        reconcileChildren(
          current,
          workInProgress,
          workInProgress.pendingProps.children,
          renderLanes
        ),
        workInProgress.child
      );
    case 10:
      return (
        (lazyComponent = workInProgress.pendingProps),
        pushProvider(workInProgress, workInProgress.type, lazyComponent.value),
        reconcileChildren(
          current,
          workInProgress,
          lazyComponent.children,
          renderLanes
        ),
        workInProgress.child
      );
    case 9:
      return (
        (init = workInProgress.type._context),
        (lazyComponent = workInProgress.pendingProps.children),
        prepareToReadContext(workInProgress),
        (init = readContext(init)),
        (lazyComponent = lazyComponent(init)),
        (workInProgress.flags |= 1),
        reconcileChildren(current, workInProgress, lazyComponent, renderLanes),
        workInProgress.child
      );
    case 14:
      return updateMemoComponent(
        current,
        workInProgress,
        workInProgress.type,
        workInProgress.pendingProps,
        renderLanes
      );
    case 15:
      return updateSimpleMemoComponent(
        current,
        workInProgress,
        workInProgress.type,
        workInProgress.pendingProps,
        renderLanes
      );
    case 19:
      return updateSuspenseListComponent(current, workInProgress, renderLanes);
    case 22:
      return updateOffscreenComponent(current, workInProgress, renderLanes);
    case 24:
      return (
        prepareToReadContext(workInProgress),
        (lazyComponent = readContext(CacheContext)),
        null === current
          ? ((init = peekCacheFromPool()),
            null === init &&
              ((init = workInProgressRoot),
              (nextProps = createCache()),
              (init.pooledCache = nextProps),
              nextProps.refCount++,
              null !== nextProps && (init.pooledCacheLanes |= renderLanes),
              (init = nextProps)),
            (workInProgress.memoizedState = {
              parent: lazyComponent,
              cache: init
            }),
            initializeUpdateQueue(workInProgress),
            pushProvider(workInProgress, CacheContext, init))
          : (0 !== (current.lanes & renderLanes) &&
              (cloneUpdateQueue(current, workInProgress),
              processUpdateQueue(workInProgress, null, null, renderLanes),
              suspendIfUpdateReadFromEntangledAsyncAction()),
            (init = current.memoizedState),
            (nextProps = workInProgress.memoizedState),
            init.parent !== lazyComponent
              ? ((init = { parent: lazyComponent, cache: lazyComponent }),
                (workInProgress.memoizedState = init),
                0 === workInProgress.lanes &&
                  (workInProgress.memoizedState =
                    workInProgress.updateQueue.baseState =
                      init),
                pushProvider(workInProgress, CacheContext, lazyComponent))
              : ((lazyComponent = nextProps.cache),
                pushProvider(workInProgress, CacheContext, lazyComponent),
                lazyComponent !== init.cache &&
                  propagateContextChanges(
                    workInProgress,
                    [CacheContext],
                    renderLanes,
                    !0
                  ))),
        reconcileChildren(
          current,
          workInProgress,
          workInProgress.pendingProps.children,
          renderLanes
        ),
        workInProgress.child
      );
    case 29:
      throw workInProgress.pendingProps;
  }
  throw Error(formatProdErrorMessage(156, workInProgress.tag));
}
var valueCursor = createCursor(null),
  currentlyRenderingFiber = null,
  lastContextDependency = null;
function pushProvider(providerFiber, context, nextValue) {
  push(valueCursor, context._currentValue);
  context._currentValue = nextValue;
}
function popProvider(context) {
  context._currentValue = valueCursor.current;
  pop(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
  for (; null !== parent; ) {
    var alternate = parent.alternate;
    (parent.childLanes & renderLanes) !== renderLanes
      ? ((parent.childLanes |= renderLanes),
        null !== alternate && (alternate.childLanes |= renderLanes))
      : null !== alternate &&
        (alternate.childLanes & renderLanes) !== renderLanes &&
        (alternate.childLanes |= renderLanes);
    if (parent === propagationRoot) break;
    parent = parent.return;
  }
}
function propagateContextChanges(
  workInProgress,
  contexts,
  renderLanes,
  forcePropagateEntireTree
) {
  var fiber = workInProgress.child;
  null !== fiber && (fiber.return = workInProgress);
  for (; null !== fiber; ) {
    var list = fiber.dependencies;
    if (null !== list) {
      var nextFiber = fiber.child;
      list = list.firstContext;
      a: for (; null !== list; ) {
        var dependency = list;
        list = fiber;
        for (var i = 0; i < contexts.length; i++)
          if (dependency.context === contexts[i]) {
            list.lanes |= renderLanes;
            dependency = list.alternate;
            null !== dependency && (dependency.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(
              list.return,
              renderLanes,
              workInProgress
            );
            forcePropagateEntireTree || (nextFiber = null);
            break a;
          }
        list = dependency.next;
      }
    } else if (18 === fiber.tag) {
      nextFiber = fiber.return;
      if (null === nextFiber) throw Error(formatProdErrorMessage(341));
      nextFiber.lanes |= renderLanes;
      list = nextFiber.alternate;
      null !== list && (list.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
      nextFiber = null;
    } else nextFiber = fiber.child;
    if (null !== nextFiber) nextFiber.return = fiber;
    else
      for (nextFiber = fiber; null !== nextFiber; ) {
        if (nextFiber === workInProgress) {
          nextFiber = null;
          break;
        }
        fiber = nextFiber.sibling;
        if (null !== fiber) {
          fiber.return = nextFiber.return;
          nextFiber = fiber;
          break;
        }
        nextFiber = nextFiber.return;
      }
    fiber = nextFiber;
  }
}
function propagateParentContextChanges(
  current,
  workInProgress,
  renderLanes,
  forcePropagateEntireTree
) {
  current = null;
  for (
    var parent = workInProgress, isInsidePropagationBailout = !1;
    null !== parent;

  ) {
    if (!isInsidePropagationBailout)
      if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
      else if (0 !== (parent.flags & 262144)) break;
    if (10 === parent.tag) {
      var currentParent = parent.alternate;
      if (null === currentParent) throw Error(formatProdErrorMessage(387));
      currentParent = currentParent.memoizedProps;
      if (null !== currentParent) {
        var context = parent.type;
        objectIs(parent.pendingProps.value, currentParent.value) ||
          (null !== current ? current.push(context) : (current = [context]));
      }
    } else if (parent === hostTransitionProviderCursor.current) {
      currentParent = parent.alternate;
      if (null === currentParent) throw Error(formatProdErrorMessage(387));
      currentParent.memoizedState.memoizedState !==
        parent.memoizedState.memoizedState &&
        (null !== current
          ? current.push(HostTransitionContext)
          : (current = [HostTransitionContext]));
    }
    parent = parent.return;
  }
  null !== current &&
    propagateContextChanges(
      workInProgress,
      current,
      renderLanes,
      forcePropagateEntireTree
    );
  workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
  for (
    currentDependencies = currentDependencies.firstContext;
    null !== currentDependencies;

  ) {
    if (
      !objectIs(
        currentDependencies.context._currentValue,
        currentDependencies.memoizedValue
      )
    )
      return !0;
    currentDependencies = currentDependencies.next;
  }
  return !1;
}
function prepareToReadContext(workInProgress) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  workInProgress = workInProgress.dependencies;
  null !== workInProgress && (workInProgress.firstContext = null);
}
function readContext(context) {
  return readContextForConsumer(currentlyRenderingFiber, context);
}
function readContextDuringReconciliation(consumer, context) {
  null === currentlyRenderingFiber && prepareToReadContext(consumer);
  return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
  var value = context._currentValue;
  context = { context: context, memoizedValue: value, next: null };
  if (null === lastContextDependency) {
    if (null === consumer) throw Error(formatProdErrorMessage(308));
    lastContextDependency = context;
    consumer.dependencies = { lanes: 0, firstContext: context };
    consumer.flags |= 524288;
  } else lastContextDependency = lastContextDependency.next = context;
  return value;
}
var hasForceUpdate = !1;
function initializeUpdateQueue(fiber) {
  fiber.updateQueue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: { pending: null, lanes: 0, hiddenCallbacks: null },
    callbacks: null
  };
}
function cloneUpdateQueue(current, workInProgress) {
  current = current.updateQueue;
  workInProgress.updateQueue === current &&
    (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      callbacks: null
    });
}
function createUpdate(lane) {
  return { lane: lane, tag: 0, payload: null, callback: null, next: null };
}
function enqueueUpdate(fiber, update, lane) {
  var updateQueue = fiber.updateQueue;
  if (null === updateQueue) return null;
  updateQueue = updateQueue.shared;
  if (0 !== (executionContext & 2)) {
    var pending = updateQueue.pending;
    null === pending
      ? (update.next = update)
      : ((update.next = pending.next), (pending.next = update));
    updateQueue.pending = update;
    update = getRootForUpdatedFiber(fiber);
    markUpdateLaneFromFiberToRoot(fiber, null, lane);
    return update;
  }
  enqueueUpdate$1(fiber, updateQueue, update, lane);
  return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root, fiber, lane) {
  fiber = fiber.updateQueue;
  if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {
    var queueLanes = fiber.lanes;
    queueLanes &= root.pendingLanes;
    lane |= queueLanes;
    fiber.lanes = lane;
    markRootEntangled(root, lane);
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  var queue = workInProgress.updateQueue,
    current = workInProgress.alternate;
  if (
    null !== current &&
    ((current = current.updateQueue), queue === current)
  ) {
    var newFirst = null,
      newLast = null;
    queue = queue.firstBaseUpdate;
    if (null !== queue) {
      do {
        var clone = {
          lane: queue.lane,
          tag: queue.tag,
          payload: queue.payload,
          callback: null,
          next: null
        };
        null === newLast
          ? (newFirst = newLast = clone)
          : (newLast = newLast.next = clone);
        queue = queue.next;
      } while (null !== queue);
      null === newLast
        ? (newFirst = newLast = capturedUpdate)
        : (newLast = newLast.next = capturedUpdate);
    } else newFirst = newLast = capturedUpdate;
    queue = {
      baseState: current.baseState,
      firstBaseUpdate: newFirst,
      lastBaseUpdate: newLast,
      shared: current.shared,
      callbacks: current.callbacks
    };
    workInProgress.updateQueue = queue;
    return;
  }
  workInProgress = queue.lastBaseUpdate;
  null === workInProgress
    ? (queue.firstBaseUpdate = capturedUpdate)
    : (workInProgress.next = capturedUpdate);
  queue.lastBaseUpdate = capturedUpdate;
}
var didReadFromEntangledAsyncAction = !1;
function suspendIfUpdateReadFromEntangledAsyncAction() {
  if (didReadFromEntangledAsyncAction) {
    var entangledActionThenable = currentEntangledActionThenable;
    if (null !== entangledActionThenable) throw entangledActionThenable;
  }
}
function processUpdateQueue(
  workInProgress$jscomp$0,
  props,
  instance$jscomp$0,
  renderLanes
) {
  didReadFromEntangledAsyncAction = !1;
  var queue = workInProgress$jscomp$0.updateQueue;
  hasForceUpdate = !1;
  var firstBaseUpdate = queue.firstBaseUpdate,
    lastBaseUpdate = queue.lastBaseUpdate,
    pendingQueue = queue.shared.pending;
  if (null !== pendingQueue) {
    queue.shared.pending = null;
    var lastPendingUpdate = pendingQueue,
      firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null;
    null === lastBaseUpdate
      ? (firstBaseUpdate = firstPendingUpdate)
      : (lastBaseUpdate.next = firstPendingUpdate);
    lastBaseUpdate = lastPendingUpdate;
    var current = workInProgress$jscomp$0.alternate;
    null !== current &&
      ((current = current.updateQueue),
      (pendingQueue = current.lastBaseUpdate),
      pendingQueue !== lastBaseUpdate &&
        (null === pendingQueue
          ? (current.firstBaseUpdate = firstPendingUpdate)
          : (pendingQueue.next = firstPendingUpdate),
        (current.lastBaseUpdate = lastPendingUpdate)));
  }
  if (null !== firstBaseUpdate) {
    var newState = queue.baseState;
    lastBaseUpdate = 0;
    current = firstPendingUpdate = lastPendingUpdate = null;
    pendingQueue = firstBaseUpdate;
    do {
      var updateLane = pendingQueue.lane & -536870913,
        isHiddenUpdate = updateLane !== pendingQueue.lane;
      if (
        isHiddenUpdate
          ? (workInProgressRootRenderLanes & updateLane) === updateLane
          : (renderLanes & updateLane) === updateLane
      ) {
        0 !== updateLane &&
          updateLane === currentEntangledLane &&
          (didReadFromEntangledAsyncAction = !0);
        null !== current &&
          (current = current.next =
            {
              lane: 0,
              tag: pendingQueue.tag,
              payload: pendingQueue.payload,
              callback: null,
              next: null
            });
        a: {
          var workInProgress = workInProgress$jscomp$0,
            update = pendingQueue;
          updateLane = props;
          var instance = instance$jscomp$0;
          switch (update.tag) {
            case 1:
              workInProgress = update.payload;
              if ("function" === typeof workInProgress) {
                newState = workInProgress.call(instance, newState, updateLane);
                break a;
              }
              newState = workInProgress;
              break a;
            case 3:
              workInProgress.flags = (workInProgress.flags & -65537) | 128;
            case 0:
              workInProgress = update.payload;
              updateLane =
                "function" === typeof workInProgress
                  ? workInProgress.call(instance, newState, updateLane)
                  : workInProgress;
              if (null === updateLane || void 0 === updateLane) break a;
              newState = assign({}, newState, updateLane);
              break a;
            case 2:
              hasForceUpdate = !0;
          }
        }
        updateLane = pendingQueue.callback;
        null !== updateLane &&
          ((workInProgress$jscomp$0.flags |= 64),
          isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),
          (isHiddenUpdate = queue.callbacks),
          null === isHiddenUpdate
            ? (queue.callbacks = [updateLane])
            : isHiddenUpdate.push(updateLane));
      } else
        (isHiddenUpdate = {
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }),
          null === current
            ? ((firstPendingUpdate = current = isHiddenUpdate),
              (lastPendingUpdate = newState))
            : (current = current.next = isHiddenUpdate),
          (lastBaseUpdate |= updateLane);
      pendingQueue = pendingQueue.next;
      if (null === pendingQueue)
        if (((pendingQueue = queue.shared.pending), null === pendingQueue))
          break;
        else
          (isHiddenUpdate = pendingQueue),
            (pendingQueue = isHiddenUpdate.next),
            (isHiddenUpdate.next = null),
            (queue.lastBaseUpdate = isHiddenUpdate),
            (queue.shared.pending = null);
    } while (1);
    null === current && (lastPendingUpdate = newState);
    queue.baseState = lastPendingUpdate;
    queue.firstBaseUpdate = firstPendingUpdate;
    queue.lastBaseUpdate = current;
    null === firstBaseUpdate && (queue.shared.lanes = 0);
    workInProgressRootSkippedLanes |= lastBaseUpdate;
    workInProgress$jscomp$0.lanes = lastBaseUpdate;
    workInProgress$jscomp$0.memoizedState = newState;
  }
}
function callCallback(callback, context) {
  if ("function" !== typeof callback)
    throw Error(formatProdErrorMessage(191, callback));
  callback.call(context);
}
function commitCallbacks(updateQueue, context) {
  var callbacks = updateQueue.callbacks;
  if (null !== callbacks)
    for (
      updateQueue.callbacks = null, updateQueue = 0;
      updateQueue < callbacks.length;
      updateQueue++
    )
      callCallback(callbacks[updateQueue], context);
}
function commitHookEffectListMount(flags, finishedWork) {
  try {
    var updateQueue = finishedWork.updateQueue,
      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== lastEffect) {
      var firstEffect = lastEffect.next;
      updateQueue = firstEffect;
      do {
        if ((updateQueue.tag & flags) === flags) {
          lastEffect = void 0;
          var create = updateQueue.create,
            inst = updateQueue.inst;
          lastEffect = create();
          inst.destroy = lastEffect;
        }
        updateQueue = updateQueue.next;
      } while (updateQueue !== firstEffect);
    }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitHookEffectListUnmount(
  flags,
  finishedWork,
  nearestMountedAncestor$jscomp$0
) {
  try {
    var updateQueue = finishedWork.updateQueue,
      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
    if (null !== lastEffect) {
      var firstEffect = lastEffect.next;
      updateQueue = firstEffect;
      do {
        if ((updateQueue.tag & flags) === flags) {
          var inst = updateQueue.inst,
            destroy = inst.destroy;
          if (void 0 !== destroy) {
            inst.destroy = void 0;
            lastEffect = finishedWork;
            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
            try {
              destroy();
            } catch (error) {
              captureCommitPhaseError(
                lastEffect,
                nearestMountedAncestor,
                error
              );
            }
          }
        }
        updateQueue = updateQueue.next;
      } while (updateQueue !== firstEffect);
    }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitClassCallbacks(finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  if (null !== updateQueue) {
    var instance = finishedWork.stateNode;
    try {
      commitCallbacks(updateQueue, instance);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
}
function safelyCallComponentWillUnmount(
  current,
  nearestMountedAncestor,
  instance
) {
  instance.props = resolveClassComponentProps(
    current.type,
    current.memoizedProps
  );
  instance.state = current.memoizedState;
  try {
    instance.componentWillUnmount();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}
function safelyAttachRef(current, nearestMountedAncestor) {
  try {
    var ref = current.ref;
    if (null !== ref) {
      var instance = current.stateNode;
      switch (current.tag) {
        case 26:
        case 27:
        case 5:
          var instanceToUse = instance;
          break;
        default:
          instanceToUse = instance;
      }
      "function" === typeof ref
        ? (current.refCleanup = ref(instanceToUse))
        : (ref.current = instanceToUse);
    }
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}
function safelyDetachRef(current, nearestMountedAncestor) {
  var ref = current.ref,
    refCleanup = current.refCleanup;
  if (null !== ref)
    if ("function" === typeof refCleanup)
      try {
        refCleanup();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      } finally {
        (current.refCleanup = null),
          (current = current.alternate),
          null != current && (current.refCleanup = null);
      }
    else if ("function" === typeof ref)
      try {
        ref(null);
      } catch (error$112) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$112);
      }
    else ref.current = null;
}
function commitHostMount(finishedWork) {
  var type = finishedWork.type,
    props = finishedWork.memoizedProps,
    instance = finishedWork.stateNode;
  try {
    a: switch (type) {
      case "button":
      case "input":
      case "select":
      case "textarea":
        props.autoFocus && instance.focus();
        break a;
      case "img":
        props.src
          ? (instance.src = props.src)
          : props.srcSet && (instance.srcset = props.srcSet);
    }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitHostUpdate(finishedWork, newProps, oldProps) {
  try {
    var domElement = finishedWork.stateNode;
    updateProperties(domElement, finishedWork.type, oldProps, newProps);
    domElement[internalPropsKey] = newProps;
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function isHostParent(fiber) {
  return (
    5 === fiber.tag ||
    3 === fiber.tag ||
    26 === fiber.tag ||
    27 === fiber.tag ||
    4 === fiber.tag
  );
}
function getHostSibling(fiber) {
  a: for (;;) {
    for (; null === fiber.sibling; ) {
      if (null === fiber.return || isHostParent(fiber.return)) return null;
      fiber = fiber.return;
    }
    fiber.sibling.return = fiber.return;
    for (
      fiber = fiber.sibling;
      5 !== fiber.tag &&
      6 !== fiber.tag &&
      27 !== fiber.tag &&
      18 !== fiber.tag;

    ) {
      if (fiber.flags & 2) continue a;
      if (null === fiber.child || 4 === fiber.tag) continue a;
      else (fiber.child.return = fiber), (fiber = fiber.child);
    }
    if (!(fiber.flags & 2)) return fiber.stateNode;
  }
}
function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  if (5 === tag || 6 === tag)
    (node = node.stateNode),
      before
        ? 8 === parent.nodeType
          ? parent.parentNode.insertBefore(node, before)
          : parent.insertBefore(node, before)
        : (8 === parent.nodeType
            ? ((before = parent.parentNode), before.insertBefore(node, parent))
            : ((before = parent), before.appendChild(node)),
          (parent = parent._reactRootContainer),
          (null !== parent && void 0 !== parent) ||
            null !== before.onclick ||
            (before.onclick = noop$1));
  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
    for (
      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
        node = node.sibling;
      null !== node;

    )
      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
        (node = node.sibling);
}
function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  if (5 === tag || 6 === tag)
    (node = node.stateNode),
      before ? parent.insertBefore(node, before) : parent.appendChild(node);
  else if (4 !== tag && 27 !== tag && ((node = node.child), null !== node))
    for (
      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
      null !== node;

    )
      insertOrAppendPlacementNode(node, before, parent), (node = node.sibling);
}
var offscreenSubtreeIsHidden = !1,
  offscreenSubtreeWasHidden = !1,
  needsFormReset = !1,
  PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
  nextEffect = null,
  shouldFireAfterActiveInstanceBlur = !1;
function commitBeforeMutationEffects(root, firstChild) {
  root = root.containerInfo;
  eventsEnabled = _enabled;
  root = getActiveElementDeep(root);
  if (hasSelectionCapabilities(root)) {
    if ("selectionStart" in root)
      var JSCompiler_temp = {
        start: root.selectionStart,
        end: root.selectionEnd
      };
    else
      a: {
        JSCompiler_temp =
          ((JSCompiler_temp = root.ownerDocument) &&
            JSCompiler_temp.defaultView) ||
          window;
        var selection =
          JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
        if (selection && 0 !== selection.rangeCount) {
          JSCompiler_temp = selection.anchorNode;
          var anchorOffset = selection.anchorOffset,
            focusNode = selection.focusNode;
          selection = selection.focusOffset;
          try {
            JSCompiler_temp.nodeType, focusNode.nodeType;
          } catch (e$20) {
            JSCompiler_temp = null;
            break a;
          }
          var length = 0,
            start = -1,
            end = -1,
            indexWithinAnchor = 0,
            indexWithinFocus = 0,
            node = root,
            parentNode = null;
          b: for (;;) {
            for (var next; ; ) {
              node !== JSCompiler_temp ||
                (0 !== anchorOffset && 3 !== node.nodeType) ||
                (start = length + anchorOffset);
              node !== focusNode ||
                (0 !== selection && 3 !== node.nodeType) ||
                (end = length + selection);
              3 === node.nodeType && (length += node.nodeValue.length);
              if (null === (next = node.firstChild)) break;
              parentNode = node;
              node = next;
            }
            for (;;) {
              if (node === root) break b;
              parentNode === JSCompiler_temp &&
                ++indexWithinAnchor === anchorOffset &&
                (start = length);
              parentNode === focusNode &&
                ++indexWithinFocus === selection &&
                (end = length);
              if (null !== (next = node.nextSibling)) break;
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          JSCompiler_temp =
            -1 === start || -1 === end ? null : { start: start, end: end };
        } else JSCompiler_temp = null;
      }
    JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
  } else JSCompiler_temp = null;
  selectionInformation = { focusedElem: root, selectionRange: JSCompiler_temp };
  _enabled = !1;
  for (nextEffect = firstChild; null !== nextEffect; )
    if (
      ((firstChild = nextEffect),
      (root = firstChild.child),
      0 !== (firstChild.subtreeFlags & 1028) && null !== root)
    )
      (root.return = firstChild), (nextEffect = root);
    else
      for (; null !== nextEffect; ) {
        firstChild = nextEffect;
        focusNode = firstChild.alternate;
        root = firstChild.flags;
        switch (firstChild.tag) {
          case 0:
            break;
          case 11:
          case 15:
            break;
          case 1:
            if (0 !== (root & 1024) && null !== focusNode) {
              root = void 0;
              JSCompiler_temp = firstChild;
              anchorOffset = focusNode.memoizedProps;
              focusNode = focusNode.memoizedState;
              selection = JSCompiler_temp.stateNode;
              try {
                var resolvedPrevProps = resolveClassComponentProps(
                  JSCompiler_temp.type,
                  anchorOffset,
                  JSCompiler_temp.elementType === JSCompiler_temp.type
                );
                root = selection.getSnapshotBeforeUpdate(
                  resolvedPrevProps,
                  focusNode
                );
                selection.__reactInternalSnapshotBeforeUpdate = root;
              } catch (error) {
                captureCommitPhaseError(
                  JSCompiler_temp,
                  JSCompiler_temp.return,
                  error
                );
              }
            }
            break;
          case 3:
            if (0 !== (root & 1024))
              if (
                ((root = firstChild.stateNode.containerInfo),
                (JSCompiler_temp = root.nodeType),
                9 === JSCompiler_temp)
              )
                clearContainerSparingly(root);
              else if (1 === JSCompiler_temp)
                switch (root.nodeName) {
                  case "HEAD":
                  case "HTML":
                  case "BODY":
                    clearContainerSparingly(root);
                    break;
                  default:
                    root.textContent = "";
                }
            break;
          case 5:
          case 26:
          case 27:
          case 6:
          case 4:
          case 17:
            break;
          default:
            if (0 !== (root & 1024)) throw Error(formatProdErrorMessage(163));
        }
        root = firstChild.sibling;
        if (null !== root) {
          root.return = firstChild.return;
          nextEffect = root;
          break;
        }
        nextEffect = firstChild.return;
      }
  resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
  shouldFireAfterActiveInstanceBlur = !1;
  return resolvedPrevProps;
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
  var flags = finishedWork.flags;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      flags & 4 && commitHookEffectListMount(5, finishedWork);
      break;
    case 1:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      if (flags & 4)
        if (((finishedRoot = finishedWork.stateNode), null === current))
          try {
            finishedRoot.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        else {
          var prevProps = resolveClassComponentProps(
            finishedWork.type,
            current.memoizedProps
          );
          current = current.memoizedState;
          try {
            finishedRoot.componentDidUpdate(
              prevProps,
              current,
              finishedRoot.__reactInternalSnapshotBeforeUpdate
            );
          } catch (error$111) {
            captureCommitPhaseError(
              finishedWork,
              finishedWork.return,
              error$111
            );
          }
        }
      flags & 64 && commitClassCallbacks(finishedWork);
      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
      break;
    case 3:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      if (flags & 64 && ((flags = finishedWork.updateQueue), null !== flags)) {
        finishedRoot = null;
        if (null !== finishedWork.child)
          switch (finishedWork.child.tag) {
            case 27:
            case 5:
              finishedRoot = finishedWork.child.stateNode;
              break;
            case 1:
              finishedRoot = finishedWork.child.stateNode;
          }
        try {
          commitCallbacks(flags, finishedRoot);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      break;
    case 26:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
      break;
    case 27:
    case 5:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      null === current && flags & 4 && commitHostMount(finishedWork);
      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
      break;
    case 12:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      break;
    case 13:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
      break;
    case 22:
      prevProps =
        null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
      if (!prevProps) {
        current =
          (null !== current && null !== current.memoizedState) ||
          offscreenSubtreeWasHidden;
        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
          prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
        offscreenSubtreeIsHidden = prevProps;
        (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden
          ? recursivelyTraverseReappearLayoutEffects(
              finishedRoot,
              finishedWork,
              0 !== (finishedWork.subtreeFlags & 8772)
            )
          : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
      }
      flags & 512 &&
        ("manual" === finishedWork.memoizedProps.mode
          ? safelyAttachRef(finishedWork, finishedWork.return)
          : safelyDetachRef(finishedWork, finishedWork.return));
      break;
    default:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
  }
}
function detachFiberAfterEffects(fiber) {
  var alternate = fiber.alternate;
  null !== alternate &&
    ((fiber.alternate = null), detachFiberAfterEffects(alternate));
  fiber.child = null;
  fiber.deletions = null;
  fiber.sibling = null;
  5 === fiber.tag &&
    ((alternate = fiber.stateNode),
    null !== alternate && detachDeletedInstance(alternate));
  fiber.stateNode = null;
  fiber.return = null;
  fiber.dependencies = null;
  fiber.memoizedProps = null;
  fiber.memoizedState = null;
  fiber.pendingProps = null;
  fiber.stateNode = null;
  fiber.updateQueue = null;
}
var hostParent = null,
  hostParentIsContainer = !1;
function recursivelyTraverseDeletionEffects(
  finishedRoot,
  nearestMountedAncestor,
  parent
) {
  for (parent = parent.child; null !== parent; )
    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent),
      (parent = parent.sibling);
}
function commitDeletionEffectsOnFiber(
  finishedRoot,
  nearestMountedAncestor,
  deletedFiber
) {
  if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
    try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
  switch (deletedFiber.tag) {
    case 26:
      offscreenSubtreeWasHidden ||
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      deletedFiber.memoizedState
        ? deletedFiber.memoizedState.count--
        : deletedFiber.stateNode &&
          ((deletedFiber = deletedFiber.stateNode),
          deletedFiber.parentNode.removeChild(deletedFiber));
      break;
    case 27:
      offscreenSubtreeWasHidden ||
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      var prevHostParent = hostParent,
        prevHostParentIsContainer = hostParentIsContainer;
      hostParent = deletedFiber.stateNode;
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      deletedFiber = deletedFiber.stateNode;
      for (
        nearestMountedAncestor = deletedFiber.attributes;
        nearestMountedAncestor.length;

      )
        deletedFiber.removeAttributeNode(nearestMountedAncestor[0]);
      detachDeletedInstance(deletedFiber);
      hostParent = prevHostParent;
      hostParentIsContainer = prevHostParentIsContainer;
      break;
    case 5:
      offscreenSubtreeWasHidden ||
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
    case 6:
      prevHostParentIsContainer = hostParent;
      var prevHostParentIsContainer$119 = hostParentIsContainer;
      hostParent = null;
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      hostParent = prevHostParentIsContainer;
      hostParentIsContainer = prevHostParentIsContainer$119;
      if (null !== hostParent)
        if (hostParentIsContainer)
          try {
            (finishedRoot = hostParent),
              (prevHostParent = deletedFiber.stateNode),
              8 === finishedRoot.nodeType
                ? finishedRoot.parentNode.removeChild(prevHostParent)
                : finishedRoot.removeChild(prevHostParent);
          } catch (error) {
            captureCommitPhaseError(
              deletedFiber,
              nearestMountedAncestor,
              error
            );
          }
        else
          try {
            hostParent.removeChild(deletedFiber.stateNode);
          } catch (error) {
            captureCommitPhaseError(
              deletedFiber,
              nearestMountedAncestor,
              error
            );
          }
      break;
    case 18:
      null !== hostParent &&
        (hostParentIsContainer
          ? ((nearestMountedAncestor = hostParent),
            (deletedFiber = deletedFiber.stateNode),
            8 === nearestMountedAncestor.nodeType
              ? clearSuspenseBoundary(
                  nearestMountedAncestor.parentNode,
                  deletedFiber
                )
              : 1 === nearestMountedAncestor.nodeType &&
                clearSuspenseBoundary(nearestMountedAncestor, deletedFiber),
            retryIfBlockedOn(nearestMountedAncestor))
          : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
      break;
    case 4:
      prevHostParent = hostParent;
      prevHostParentIsContainer = hostParentIsContainer;
      hostParent = deletedFiber.stateNode.containerInfo;
      hostParentIsContainer = !0;
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      hostParent = prevHostParent;
      hostParentIsContainer = prevHostParentIsContainer;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      offscreenSubtreeWasHidden ||
        commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
      offscreenSubtreeWasHidden ||
        commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      break;
    case 1:
      offscreenSubtreeWasHidden ||
        (safelyDetachRef(deletedFiber, nearestMountedAncestor),
        (prevHostParent = deletedFiber.stateNode),
        "function" === typeof prevHostParent.componentWillUnmount &&
          safelyCallComponentWillUnmount(
            deletedFiber,
            nearestMountedAncestor,
            prevHostParent
          ));
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      break;
    case 21:
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      break;
    case 22:
      offscreenSubtreeWasHidden ||
        safelyDetachRef(deletedFiber, nearestMountedAncestor);
      offscreenSubtreeWasHidden =
        (prevHostParent = offscreenSubtreeWasHidden) ||
        null !== deletedFiber.memoizedState;
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
      offscreenSubtreeWasHidden = prevHostParent;
      break;
    default:
      recursivelyTraverseDeletionEffects(
        finishedRoot,
        nearestMountedAncestor,
        deletedFiber
      );
  }
}
function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (
    null === finishedWork.memoizedState &&
    ((finishedRoot = finishedWork.alternate),
    null !== finishedRoot &&
      ((finishedRoot = finishedRoot.memoizedState),
      null !== finishedRoot &&
        ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
  )
    try {
      retryIfBlockedOn(finishedRoot);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function getRetryCache(finishedWork) {
  switch (finishedWork.tag) {
    case 13:
    case 19:
      var retryCache = finishedWork.stateNode;
      null === retryCache &&
        (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
      return retryCache;
    case 22:
      return (
        (finishedWork = finishedWork.stateNode),
        (retryCache = finishedWork._retryCache),
        null === retryCache &&
          (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
        retryCache
      );
    default:
      throw Error(formatProdErrorMessage(435, finishedWork.tag));
  }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
  var retryCache = getRetryCache(finishedWork);
  wakeables.forEach(function (wakeable) {
    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
    retryCache.has(wakeable) ||
      (retryCache.add(wakeable), wakeable.then(retry, retry));
  });
}
function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
  var deletions = parentFiber.deletions;
  if (null !== deletions)
    for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i],
        root = root$jscomp$0,
        returnFiber = parentFiber,
        parent = returnFiber;
      a: for (; null !== parent; ) {
        switch (parent.tag) {
          case 27:
          case 5:
            hostParent = parent.stateNode;
            hostParentIsContainer = !1;
            break a;
          case 3:
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = !0;
            break a;
          case 4:
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = !0;
            break a;
        }
        parent = parent.return;
      }
      if (null === hostParent) throw Error(formatProdErrorMessage(160));
      commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
      hostParent = null;
      hostParentIsContainer = !1;
      root = childToDelete.alternate;
      null !== root && (root.return = null);
      childToDelete.return = null;
    }
  if (parentFiber.subtreeFlags & 13878)
    for (parentFiber = parentFiber.child; null !== parentFiber; )
      commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
        (parentFiber = parentFiber.sibling);
}
var currentHoistableRoot = null;
function commitMutationEffectsOnFiber(finishedWork, root) {
  var current = finishedWork.alternate,
    flags = finishedWork.flags;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 4 &&
        (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
        commitHookEffectListMount(3, finishedWork),
        commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
      break;
    case 1:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 &&
        (offscreenSubtreeWasHidden ||
          null === current ||
          safelyDetachRef(current, current.return));
      flags & 64 &&
        offscreenSubtreeIsHidden &&
        ((finishedWork = finishedWork.updateQueue),
        null !== finishedWork &&
          ((flags = finishedWork.callbacks),
          null !== flags &&
            ((current = finishedWork.shared.hiddenCallbacks),
            (finishedWork.shared.hiddenCallbacks =
              null === current ? flags : current.concat(flags)))));
      break;
    case 26:
      var hoistableRoot = currentHoistableRoot;
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 &&
        (offscreenSubtreeWasHidden ||
          null === current ||
          safelyDetachRef(current, current.return));
      if (flags & 4) {
        var currentResource = null !== current ? current.memoizedState : null;
        flags = finishedWork.memoizedState;
        if (null === current)
          if (null === flags)
            if (null === finishedWork.stateNode) {
              a: {
                flags = finishedWork.type;
                current = finishedWork.memoizedProps;
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                b: switch (flags) {
                  case "title":
                    currentResource =
                      hoistableRoot.getElementsByTagName("title")[0];
                    if (
                      !currentResource ||
                      currentResource[internalHoistableMarker] ||
                      currentResource[internalInstanceKey] ||
                      "http://www.w3.org/2000/svg" ===
                        currentResource.namespaceURI ||
                      currentResource.hasAttribute("itemprop")
                    )
                      (currentResource = hoistableRoot.createElement(flags)),
                        hoistableRoot.head.insertBefore(
                          currentResource,
                          hoistableRoot.querySelector("head > title")
                        );
                    setInitialProperties(currentResource, flags, current);
                    currentResource[internalInstanceKey] = finishedWork;
                    markNodeAsHoistable(currentResource);
                    flags = currentResource;
                    break a;
                  case "link":
                    var maybeNodes = getHydratableHoistableCache(
                      "link",
                      "href",
                      hoistableRoot
                    ).get(flags + (current.href || ""));
                    if (maybeNodes)
                      for (var i = 0; i < maybeNodes.length; i++)
                        if (
                          ((currentResource = maybeNodes[i]),
                          currentResource.getAttribute("href") ===
                            (null == current.href ? null : current.href) &&
                            currentResource.getAttribute("rel") ===
                              (null == current.rel ? null : current.rel) &&
                            currentResource.getAttribute("title") ===
                              (null == current.title ? null : current.title) &&
                            currentResource.getAttribute("crossorigin") ===
                              (null == current.crossOrigin
                                ? null
                                : current.crossOrigin))
                        ) {
                          maybeNodes.splice(i, 1);
                          break b;
                        }
                    currentResource = hoistableRoot.createElement(flags);
                    setInitialProperties(currentResource, flags, current);
                    hoistableRoot.head.appendChild(currentResource);
                    break;
                  case "meta":
                    if (
                      (maybeNodes = getHydratableHoistableCache(
                        "meta",
                        "content",
                        hoistableRoot
                      ).get(flags + (current.content || "")))
                    )
                      for (i = 0; i < maybeNodes.length; i++)
                        if (
                          ((currentResource = maybeNodes[i]),
                          currentResource.getAttribute("content") ===
                            (null == current.content
                              ? null
                              : "" + current.content) &&
                            currentResource.getAttribute("name") ===
                              (null == current.name ? null : current.name) &&
                            currentResource.getAttribute("property") ===
                              (null == current.property
                                ? null
                                : current.property) &&
                            currentResource.getAttribute("http-equiv") ===
                              (null == current.httpEquiv
                                ? null
                                : current.httpEquiv) &&
                            currentResource.getAttribute("charset") ===
                              (null == current.charSet
                                ? null
                                : current.charSet))
                        ) {
                          maybeNodes.splice(i, 1);
                          break b;
                        }
                    currentResource = hoistableRoot.createElement(flags);
                    setInitialProperties(currentResource, flags, current);
                    hoistableRoot.head.appendChild(currentResource);
                    break;
                  default:
                    throw Error(formatProdErrorMessage(468, flags));
                }
                currentResource[internalInstanceKey] = finishedWork;
                markNodeAsHoistable(currentResource);
                flags = currentResource;
              }
              finishedWork.stateNode = flags;
            } else
              mountHoistable(
                hoistableRoot,
                finishedWork.type,
                finishedWork.stateNode
              );
          else
            finishedWork.stateNode = acquireResource(
              hoistableRoot,
              flags,
              finishedWork.memoizedProps
            );
        else
          currentResource !== flags
            ? (null === currentResource
                ? null !== current.stateNode &&
                  ((current = current.stateNode),
                  current.parentNode.removeChild(current))
                : currentResource.count--,
              null === flags
                ? mountHoistable(
                    hoistableRoot,
                    finishedWork.type,
                    finishedWork.stateNode
                  )
                : acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  ))
            : null === flags &&
              null !== finishedWork.stateNode &&
              commitHostUpdate(
                finishedWork,
                finishedWork.memoizedProps,
                current.memoizedProps
              );
      }
      break;
    case 27:
      if (flags & 4 && null === finishedWork.alternate) {
        hoistableRoot = finishedWork.stateNode;
        currentResource = finishedWork.memoizedProps;
        try {
          for (var node = hoistableRoot.firstChild; node; ) {
            var nextNode = node.nextSibling,
              nodeName = node.nodeName;
            node[internalHoistableMarker] ||
              "HEAD" === nodeName ||
              "BODY" === nodeName ||
              "SCRIPT" === nodeName ||
              "STYLE" === nodeName ||
              ("LINK" === nodeName &&
                "stylesheet" === node.rel.toLowerCase()) ||
              hoistableRoot.removeChild(node);
            node = nextNode;
          }
          for (
            var type = finishedWork.type, attributes = hoistableRoot.attributes;
            attributes.length;

          )
            hoistableRoot.removeAttributeNode(attributes[0]);
          setInitialProperties(hoistableRoot, type, currentResource);
          hoistableRoot[internalInstanceKey] = finishedWork;
          hoistableRoot[internalPropsKey] = currentResource;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
    case 5:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 &&
        (offscreenSubtreeWasHidden ||
          null === current ||
          safelyDetachRef(current, current.return));
      if (finishedWork.flags & 32) {
        hoistableRoot = finishedWork.stateNode;
        try {
          setTextContent(hoistableRoot, "");
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      flags & 4 &&
        null != finishedWork.stateNode &&
        ((hoistableRoot = finishedWork.memoizedProps),
        commitHostUpdate(
          finishedWork,
          hoistableRoot,
          null !== current ? current.memoizedProps : hoistableRoot
        ));
      flags & 1024 && (needsFormReset = !0);
      break;
    case 6:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      if (flags & 4) {
        if (null === finishedWork.stateNode)
          throw Error(formatProdErrorMessage(162));
        flags = finishedWork.memoizedProps;
        current = finishedWork.stateNode;
        try {
          current.nodeValue = flags;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      break;
    case 3:
      tagCaches = null;
      hoistableRoot = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(root.containerInfo);
      recursivelyTraverseMutationEffects(root, finishedWork);
      currentHoistableRoot = hoistableRoot;
      commitReconciliationEffects(finishedWork);
      if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
        try {
          retryIfBlockedOn(root.containerInfo);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      needsFormReset &&
        ((needsFormReset = !1), recursivelyResetForms(finishedWork));
      break;
    case 4:
      flags = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(
        finishedWork.stateNode.containerInfo
      );
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      currentHoistableRoot = flags;
      break;
    case 12:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      break;
    case 13:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      finishedWork.child.flags & 8192 &&
        (null !== finishedWork.memoizedState) !==
          (null !== current && null !== current.memoizedState) &&
        (globalMostRecentFallbackTime = now());
      flags & 4 &&
        ((flags = finishedWork.updateQueue),
        null !== flags &&
          ((finishedWork.updateQueue = null),
          attachSuspenseRetryListeners(finishedWork, flags)));
      break;
    case 22:
      flags & 512 &&
        (offscreenSubtreeWasHidden ||
          null === current ||
          safelyDetachRef(current, current.return));
      node = null !== finishedWork.memoizedState;
      nextNode = null !== current && null !== current.memoizedState;
      nodeName = offscreenSubtreeIsHidden;
      type = offscreenSubtreeWasHidden;
      offscreenSubtreeIsHidden = nodeName || node;
      offscreenSubtreeWasHidden = type || nextNode;
      recursivelyTraverseMutationEffects(root, finishedWork);
      offscreenSubtreeWasHidden = type;
      offscreenSubtreeIsHidden = nodeName;
      commitReconciliationEffects(finishedWork);
      root = finishedWork.stateNode;
      root._current = finishedWork;
      root._visibility &= -3;
      root._visibility |= root._pendingVisibility & 2;
      if (
        flags & 8192 &&
        ((root._visibility = node
          ? root._visibility & -2
          : root._visibility | 1),
        node &&
          ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),
          null === current ||
            nextNode ||
            root ||
            recursivelyTraverseDisappearLayoutEffects(finishedWork)),
        null === finishedWork.memoizedProps ||
          "manual" !== finishedWork.memoizedProps.mode)
      )
        a: for (current = null, root = finishedWork; ; ) {
          if (5 === root.tag || 26 === root.tag || 27 === root.tag) {
            if (null === current) {
              nextNode = current = root;
              try {
                if (((hoistableRoot = nextNode.stateNode), node))
                  (currentResource = hoistableRoot.style),
                    "function" === typeof currentResource.setProperty
                      ? currentResource.setProperty(
                          "display",
                          "none",
                          "important"
                        )
                      : (currentResource.display = "none");
                else {
                  maybeNodes = nextNode.stateNode;
                  i = nextNode.memoizedProps.style;
                  var display =
                    void 0 !== i && null !== i && i.hasOwnProperty("display")
                      ? i.display
                      : null;
                  maybeNodes.style.display =
                    null == display || "boolean" === typeof display
                      ? ""
                      : ("" + display).trim();
                }
              } catch (error) {
                captureCommitPhaseError(nextNode, nextNode.return, error);
              }
            }
          } else if (6 === root.tag) {
            if (null === current) {
              nextNode = root;
              try {
                nextNode.stateNode.nodeValue = node
                  ? ""
                  : nextNode.memoizedProps;
              } catch (error) {
                captureCommitPhaseError(nextNode, nextNode.return, error);
              }
            }
          } else if (
            ((22 !== root.tag && 23 !== root.tag) ||
              null === root.memoizedState ||
              root === finishedWork) &&
            null !== root.child
          ) {
            root.child.return = root;
            root = root.child;
            continue;
          }
          if (root === finishedWork) break a;
          for (; null === root.sibling; ) {
            if (null === root.return || root.return === finishedWork) break a;
            current === root && (current = null);
            root = root.return;
          }
          current === root && (current = null);
          root.sibling.return = root.return;
          root = root.sibling;
        }
      flags & 4 &&
        ((flags = finishedWork.updateQueue),
        null !== flags &&
          ((current = flags.retryQueue),
          null !== current &&
            ((flags.retryQueue = null),
            attachSuspenseRetryListeners(finishedWork, current))));
      break;
    case 19:
      recursivelyTraverseMutationEffects(root, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 4 &&
        ((flags = finishedWork.updateQueue),
        null !== flags &&
          ((finishedWork.updateQueue = null),
          attachSuspenseRetryListeners(finishedWork, flags)));
      break;
    case 21:
      break;
    default:
      recursivelyTraverseMutationEffects(root, finishedWork),
        commitReconciliationEffects(finishedWork);
  }
}
function commitReconciliationEffects(finishedWork) {
  var flags = finishedWork.flags;
  if (flags & 2) {
    try {
      if (27 !== finishedWork.tag) {
        a: {
          for (var parent = finishedWork.return; null !== parent; ) {
            if (isHostParent(parent)) {
              var JSCompiler_inline_result = parent;
              break a;
            }
            parent = parent.return;
          }
          throw Error(formatProdErrorMessage(160));
        }
        switch (JSCompiler_inline_result.tag) {
          case 27:
            var parent$jscomp$0 = JSCompiler_inline_result.stateNode,
              before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
            break;
          case 5:
            var parent$113 = JSCompiler_inline_result.stateNode;
            JSCompiler_inline_result.flags & 32 &&
              (setTextContent(parent$113, ""),
              (JSCompiler_inline_result.flags &= -33));
            var before$114 = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before$114, parent$113);
            break;
          case 3:
          case 4:
            var parent$115 = JSCompiler_inline_result.stateNode.containerInfo,
              before$116 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(
              finishedWork,
              before$116,
              parent$115
            );
            break;
          default:
            throw Error(formatProdErrorMessage(161));
        }
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
    finishedWork.flags &= -3;
  }
  flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyResetForms(parentFiber) {
  if (parentFiber.subtreeFlags & 1024)
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      var fiber = parentFiber;
      recursivelyResetForms(fiber);
      5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
      parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseLayoutEffects(root, parentFiber) {
  if (parentFiber.subtreeFlags & 8772)
    for (parentFiber = parentFiber.child; null !== parentFiber; )
      commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
        (parentFiber = parentFiber.sibling);
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
    var finishedWork = parentFiber;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 1:
        safelyDetachRef(finishedWork, finishedWork.return);
        var instance = finishedWork.stateNode;
        "function" === typeof instance.componentWillUnmount &&
          safelyCallComponentWillUnmount(
            finishedWork,
            finishedWork.return,
            instance
          );
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 26:
      case 27:
      case 5:
        safelyDetachRef(finishedWork, finishedWork.return);
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 22:
        safelyDetachRef(finishedWork, finishedWork.return);
        null === finishedWork.memoizedState &&
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      default:
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
    }
    parentFiber = parentFiber.sibling;
  }
}
function recursivelyTraverseReappearLayoutEffects(
  finishedRoot$jscomp$0,
  parentFiber,
  includeWorkInProgressEffects
) {
  includeWorkInProgressEffects =
    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
    var current = parentFiber.alternate,
      finishedRoot = finishedRoot$jscomp$0,
      finishedWork = parentFiber,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
        commitHookEffectListMount(4, finishedWork);
        break;
      case 1:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
        current = finishedWork;
        finishedRoot = current.stateNode;
        if ("function" === typeof finishedRoot.componentDidMount)
          try {
            finishedRoot.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(current, current.return, error);
          }
        current = finishedWork;
        finishedRoot = current.updateQueue;
        if (null !== finishedRoot) {
          var instance = current.stateNode;
          try {
            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
            if (null !== hiddenCallbacks)
              for (
                finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;
                finishedRoot < hiddenCallbacks.length;
                finishedRoot++
              )
                callCallback(hiddenCallbacks[finishedRoot], instance);
          } catch (error) {
            captureCommitPhaseError(current, current.return, error);
          }
        }
        includeWorkInProgressEffects &&
          flags & 64 &&
          commitClassCallbacks(finishedWork);
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 26:
      case 27:
      case 5:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
        includeWorkInProgressEffects &&
          null === current &&
          flags & 4 &&
          commitHostMount(finishedWork);
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 12:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
        break;
      case 13:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
        includeWorkInProgressEffects &&
          flags & 4 &&
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        break;
      case 22:
        null === finishedWork.memoizedState &&
          recursivelyTraverseReappearLayoutEffects(
            finishedRoot,
            finishedWork,
            includeWorkInProgressEffects
          );
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      default:
        recursivelyTraverseReappearLayoutEffects(
          finishedRoot,
          finishedWork,
          includeWorkInProgressEffects
        );
    }
    parentFiber = parentFiber.sibling;
  }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
  var previousCache = null;
  null !== current &&
    null !== current.memoizedState &&
    null !== current.memoizedState.cachePool &&
    (previousCache = current.memoizedState.cachePool.pool);
  current = null;
  null !== finishedWork.memoizedState &&
    null !== finishedWork.memoizedState.cachePool &&
    (current = finishedWork.memoizedState.cachePool.pool);
  current !== previousCache &&
    (null != current && current.refCount++,
    null != previousCache && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
  current = null;
  null !== finishedWork.alternate &&
    (current = finishedWork.alternate.memoizedState.cache);
  finishedWork = finishedWork.memoizedState.cache;
  finishedWork !== current &&
    (finishedWork.refCount++, null != current && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(
  root,
  parentFiber,
  committedLanes,
  committedTransitions
) {
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child; null !== parentFiber; )
      commitPassiveMountOnFiber(
        root,
        parentFiber,
        committedLanes,
        committedTransitions
      ),
        (parentFiber = parentFiber.sibling);
}
function commitPassiveMountOnFiber(
  finishedRoot,
  finishedWork,
  committedLanes,
  committedTransitions
) {
  var flags = finishedWork.flags;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraversePassiveMountEffects(
        finishedRoot,
        finishedWork,
        committedLanes,
        committedTransitions
      );
      flags & 2048 && commitHookEffectListMount(9, finishedWork);
      break;
    case 3:
      recursivelyTraversePassiveMountEffects(
        finishedRoot,
        finishedWork,
        committedLanes,
        committedTransitions
      );
      flags & 2048 &&
        ((finishedRoot = null),
        null !== finishedWork.alternate &&
          (finishedRoot = finishedWork.alternate.memoizedState.cache),
        (finishedWork = finishedWork.memoizedState.cache),
        finishedWork !== finishedRoot &&
          (finishedWork.refCount++,
          null != finishedRoot && releaseCache(finishedRoot)));
      break;
    case 12:
      if (flags & 2048) {
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
        finishedRoot = finishedWork.stateNode;
        try {
          var _finishedWork$memoize2 = finishedWork.memoizedProps,
            id = _finishedWork$memoize2.id,
            onPostCommit = _finishedWork$memoize2.onPostCommit;
          "function" === typeof onPostCommit &&
            onPostCommit(
              id,
              null === finishedWork.alternate ? "mount" : "update",
              finishedRoot.passiveEffectDuration,
              -0
            );
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      } else
        recursivelyTraversePassiveMountEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        );
      break;
    case 23:
      break;
    case 22:
      _finishedWork$memoize2 = finishedWork.stateNode;
      null !== finishedWork.memoizedState
        ? _finishedWork$memoize2._visibility & 4
          ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            )
          : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
        : _finishedWork$memoize2._visibility & 4
          ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            )
          : ((_finishedWork$memoize2._visibility |= 4),
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              0 !== (finishedWork.subtreeFlags & 10256)
            ));
      flags & 2048 &&
        commitOffscreenPassiveMountEffects(
          finishedWork.alternate,
          finishedWork
        );
      break;
    case 24:
      recursivelyTraversePassiveMountEffects(
        finishedRoot,
        finishedWork,
        committedLanes,
        committedTransitions
      );
      flags & 2048 &&
        commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
      break;
    default:
      recursivelyTraversePassiveMountEffects(
        finishedRoot,
        finishedWork,
        committedLanes,
        committedTransitions
      );
  }
}
function recursivelyTraverseReconnectPassiveEffects(
  finishedRoot$jscomp$0,
  parentFiber,
  committedLanes$jscomp$0,
  committedTransitions$jscomp$0,
  includeWorkInProgressEffects
) {
  includeWorkInProgressEffects =
    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
    var finishedRoot = finishedRoot$jscomp$0,
      finishedWork = parentFiber,
      committedLanes = committedLanes$jscomp$0,
      committedTransitions = committedTransitions$jscomp$0,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseReconnectPassiveEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions,
          includeWorkInProgressEffects
        );
        commitHookEffectListMount(8, finishedWork);
        break;
      case 23:
        break;
      case 22:
        var instance = finishedWork.stateNode;
        null !== finishedWork.memoizedState
          ? instance._visibility & 4
            ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              )
            : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              )
          : ((instance._visibility |= 4),
            recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              includeWorkInProgressEffects
            ));
        includeWorkInProgressEffects &&
          flags & 2048 &&
          commitOffscreenPassiveMountEffects(
            finishedWork.alternate,
            finishedWork
          );
        break;
      case 24:
        recursivelyTraverseReconnectPassiveEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions,
          includeWorkInProgressEffects
        );
        includeWorkInProgressEffects &&
          flags & 2048 &&
          commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
        break;
      default:
        recursivelyTraverseReconnectPassiveEffects(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions,
          includeWorkInProgressEffects
        );
    }
    parentFiber = parentFiber.sibling;
  }
}
function recursivelyTraverseAtomicPassiveEffects(
  finishedRoot$jscomp$0,
  parentFiber
) {
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 22:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 &&
            commitOffscreenPassiveMountEffects(
              finishedWork.alternate,
              finishedWork
            );
          break;
        case 24:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 &&
            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
}
var suspenseyCommitFlag = 8192;
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
  if (parentFiber.subtreeFlags & suspenseyCommitFlag)
    for (parentFiber = parentFiber.child; null !== parentFiber; )
      accumulateSuspenseyCommitOnFiber(parentFiber),
        (parentFiber = parentFiber.sibling);
}
function accumulateSuspenseyCommitOnFiber(fiber) {
  switch (fiber.tag) {
    case 26:
      recursivelyAccumulateSuspenseyCommit(fiber);
      fiber.flags & suspenseyCommitFlag &&
        null !== fiber.memoizedState &&
        suspendResource(
          currentHoistableRoot,
          fiber.memoizedState,
          fiber.memoizedProps
        );
      break;
    case 5:
      recursivelyAccumulateSuspenseyCommit(fiber);
      break;
    case 3:
    case 4:
      var previousHoistableRoot = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
      recursivelyAccumulateSuspenseyCommit(fiber);
      currentHoistableRoot = previousHoistableRoot;
      break;
    case 22:
      null === fiber.memoizedState &&
        ((previousHoistableRoot = fiber.alternate),
        null !== previousHoistableRoot &&
        null !== previousHoistableRoot.memoizedState
          ? ((previousHoistableRoot = suspenseyCommitFlag),
            (suspenseyCommitFlag = 16777216),
            recursivelyAccumulateSuspenseyCommit(fiber),
            (suspenseyCommitFlag = previousHoistableRoot))
          : recursivelyAccumulateSuspenseyCommit(fiber));
      break;
    default:
      recursivelyAccumulateSuspenseyCommit(fiber);
  }
}
function detachAlternateSiblings(parentFiber) {
  var previousFiber = parentFiber.alternate;
  if (
    null !== previousFiber &&
    ((parentFiber = previousFiber.child), null !== parentFiber)
  ) {
    previousFiber.child = null;
    do
      (previousFiber = parentFiber.sibling),
        (parentFiber.sibling = null),
        (parentFiber = previousFiber);
    while (null !== parentFiber);
  }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
  var deletions = parentFiber.deletions;
  if (0 !== (parentFiber.flags & 16)) {
    if (null !== deletions)
      for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
          childToDelete,
          parentFiber
        );
      }
    detachAlternateSiblings(parentFiber);
  }
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child; null !== parentFiber; )
      commitPassiveUnmountOnFiber(parentFiber),
        (parentFiber = parentFiber.sibling);
}
function commitPassiveUnmountOnFiber(finishedWork) {
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      finishedWork.flags & 2048 &&
        commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
      break;
    case 3:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    case 12:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    case 22:
      var instance = finishedWork.stateNode;
      null !== finishedWork.memoizedState &&
      instance._visibility & 4 &&
      (null === finishedWork.return || 13 !== finishedWork.return.tag)
        ? ((instance._visibility &= -5),
          recursivelyTraverseDisconnectPassiveEffects(finishedWork))
        : recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    default:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
  }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
  var deletions = parentFiber.deletions;
  if (0 !== (parentFiber.flags & 16)) {
    if (null !== deletions)
      for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
          childToDelete,
          parentFiber
        );
      }
    detachAlternateSiblings(parentFiber);
  }
  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
    deletions = parentFiber;
    switch (deletions.tag) {
      case 0:
      case 11:
      case 15:
        commitHookEffectListUnmount(8, deletions, deletions.return);
        recursivelyTraverseDisconnectPassiveEffects(deletions);
        break;
      case 22:
        i = deletions.stateNode;
        i._visibility & 4 &&
          ((i._visibility &= -5),
          recursivelyTraverseDisconnectPassiveEffects(deletions));
        break;
      default:
        recursivelyTraverseDisconnectPassiveEffects(deletions);
    }
    parentFiber = parentFiber.sibling;
  }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
  deletedSubtreeRoot,
  nearestMountedAncestor
) {
  for (; null !== nextEffect; ) {
    var fiber = nextEffect;
    switch (fiber.tag) {
      case 0:
      case 11:
      case 15:
        commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
        break;
      case 23:
      case 22:
        if (
          null !== fiber.memoizedState &&
          null !== fiber.memoizedState.cachePool
        ) {
          var cache = fiber.memoizedState.cachePool.pool;
          null != cache && cache.refCount++;
        }
        break;
      case 24:
        releaseCache(fiber.memoizedState.cache);
    }
    cache = fiber.child;
    if (null !== cache) (cache.return = fiber), (nextEffect = cache);
    else
      a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
        cache = nextEffect;
        var sibling = cache.sibling,
          returnFiber = cache.return;
        detachFiberAfterEffects(cache);
        if (cache === fiber) {
          nextEffect = null;
          break a;
        }
        if (null !== sibling) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          break a;
        }
        nextEffect = returnFiber;
      }
  }
}
function FiberNode(tag, pendingProps, key, mode) {
  this.tag = tag;
  this.key = key;
  this.sibling =
    this.child =
    this.return =
    this.stateNode =
    this.type =
    this.elementType =
      null;
  this.index = 0;
  this.refCleanup = this.ref = null;
  this.pendingProps = pendingProps;
  this.dependencies =
    this.memoizedState =
    this.updateQueue =
    this.memoizedProps =
      null;
  this.mode = mode;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
  return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component) {
  Component = Component.prototype;
  return !(!Component || !Component.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;
  null === workInProgress
    ? ((workInProgress = createFiberImplClass(
        current.tag,
        pendingProps,
        current.key,
        current.mode
      )),
      (workInProgress.elementType = current.elementType),
      (workInProgress.type = current.type),
      (workInProgress.stateNode = current.stateNode),
      (workInProgress.alternate = current),
      (current.alternate = workInProgress))
    : ((workInProgress.pendingProps = pendingProps),
      (workInProgress.type = current.type),
      (workInProgress.flags = 0),
      (workInProgress.subtreeFlags = 0),
      (workInProgress.deletions = null));
  workInProgress.flags = current.flags & 31457280;
  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;
  pendingProps = current.dependencies;
  workInProgress.dependencies =
    null === pendingProps
      ? null
      : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;
  workInProgress.refCleanup = current.refCleanup;
  return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
  workInProgress.flags &= 31457282;
  var current = workInProgress.alternate;
  null === current
    ? ((workInProgress.childLanes = 0),
      (workInProgress.lanes = renderLanes),
      (workInProgress.child = null),
      (workInProgress.subtreeFlags = 0),
      (workInProgress.memoizedProps = null),
      (workInProgress.memoizedState = null),
      (workInProgress.updateQueue = null),
      (workInProgress.dependencies = null),
      (workInProgress.stateNode = null))
    : ((workInProgress.childLanes = current.childLanes),
      (workInProgress.lanes = current.lanes),
      (workInProgress.child = current.child),
      (workInProgress.subtreeFlags = 0),
      (workInProgress.deletions = null),
      (workInProgress.memoizedProps = current.memoizedProps),
      (workInProgress.memoizedState = current.memoizedState),
      (workInProgress.updateQueue = current.updateQueue),
      (workInProgress.type = current.type),
      (renderLanes = current.dependencies),
      (workInProgress.dependencies =
        null === renderLanes
          ? null
          : {
              lanes: renderLanes.lanes,
              firstContext: renderLanes.firstContext
            }));
  return workInProgress;
}
function createFiberFromTypeAndProps(
  type,
  key,
  pendingProps,
  owner,
  mode,
  lanes
) {
  var fiberTag = 0;
  owner = type;
  if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
  else if ("string" === typeof type)
    fiberTag = isHostHoistableType(
      type,
      pendingProps,
      contextStackCursor.current
    )
      ? 26
      : "html" === type || "head" === type || "body" === type
        ? 27
        : 5;
  else
    a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 24;
        break;
      case REACT_PROFILER_TYPE:
        return (
          (type = createFiberImplClass(12, pendingProps, key, mode | 2)),
          (type.elementType = REACT_PROFILER_TYPE),
          (type.lanes = lanes),
          type
        );
      case REACT_SUSPENSE_TYPE:
        return (
          (type = createFiberImplClass(13, pendingProps, key, mode)),
          (type.elementType = REACT_SUSPENSE_TYPE),
          (type.lanes = lanes),
          type
        );
      case REACT_SUSPENSE_LIST_TYPE:
        return (
          (type = createFiberImplClass(19, pendingProps, key, mode)),
          (type.elementType = REACT_SUSPENSE_LIST_TYPE),
          (type.lanes = lanes),
          type
        );
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type)
          switch (type.$$typeof) {
            case REACT_PROVIDER_TYPE:
            case REACT_CONTEXT_TYPE:
              fiberTag = 10;
              break a;
            case REACT_CONSUMER_TYPE:
              fiberTag = 9;
              break a;
            case REACT_FORWARD_REF_TYPE:
              fiberTag = 11;
              break a;
            case REACT_MEMO_TYPE:
              fiberTag = 14;
              break a;
            case REACT_LAZY_TYPE:
              fiberTag = 16;
              owner = null;
              break a;
          }
        fiberTag = 29;
        pendingProps = Error(
          formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
        );
        owner = null;
    }
  key = createFiberImplClass(fiberTag, pendingProps, key, mode);
  key.elementType = type;
  key.type = owner;
  key.lanes = lanes;
  return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  elements = createFiberImplClass(7, elements, key, mode);
  elements.lanes = lanes;
  return elements;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  pendingProps = createFiberImplClass(22, pendingProps, key, mode);
  pendingProps.elementType = REACT_OFFSCREEN_TYPE;
  pendingProps.lanes = lanes;
  var primaryChildInstance = {
    _visibility: 1,
    _pendingVisibility: 1,
    _pendingMarkers: null,
    _retryCache: null,
    _transitions: null,
    _current: null,
    detach: function () {
      var fiber = primaryChildInstance._current;
      if (null === fiber) throw Error(formatProdErrorMessage(456));
      if (0 === (primaryChildInstance._pendingVisibility & 2)) {
        var root = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root &&
          ((primaryChildInstance._pendingVisibility |= 2),
          scheduleUpdateOnFiber(root, fiber, 2));
      }
    },
    attach: function () {
      var fiber = primaryChildInstance._current;
      if (null === fiber) throw Error(formatProdErrorMessage(456));
      if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
        var root = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root &&
          ((primaryChildInstance._pendingVisibility &= -3),
          scheduleUpdateOnFiber(root, fiber, 2));
      }
    }
  };
  pendingProps.stateNode = primaryChildInstance;
  return pendingProps;
}
function createFiberFromText(content, mode, lanes) {
  content = createFiberImplClass(6, content, null, mode);
  content.lanes = lanes;
  return content;
}
function createFiberFromPortal(portal, mode, lanes) {
  mode = createFiberImplClass(
    4,
    null !== portal.children ? portal.children : [],
    portal.key,
    mode
  );
  mode.lanes = lanes;
  mode.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    implementation: portal.implementation
  };
  return mode;
}
function markUpdate(workInProgress) {
  workInProgress.flags |= 4;
}
function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
  if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
    workInProgress.flags &= -16777217;
  else if (((workInProgress.flags |= 16777216), !preloadResource(resource))) {
    resource = suspenseHandlerStackCursor.current;
    if (
      null !== resource &&
      ((workInProgressRootRenderLanes & 4194176) ===
      workInProgressRootRenderLanes
        ? null !== shellBoundary
        : ((workInProgressRootRenderLanes & 62914560) !==
            workInProgressRootRenderLanes &&
            0 === (workInProgressRootRenderLanes & 536870912)) ||
          resource !== shellBoundary)
    )
      throw (
        ((suspendedThenable = noopSuspenseyCommitThenable),
        SuspenseyCommitException)
      );
    workInProgress.flags |= 8192;
  }
}
function scheduleRetryEffect(workInProgress, retryQueue) {
  null !== retryQueue && (workInProgress.flags |= 4);
  workInProgress.flags & 16384 &&
    ((retryQueue =
      22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
    (workInProgress.lanes |= retryQueue),
    (workInProgressSuspendedRetryLanes |= retryQueue));
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (!isHydrating)
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback; )
          null !== hasRenderedATailFallback.alternate &&
            (lastTailNode = hasRenderedATailFallback),
            (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
        null === lastTailNode
          ? (renderState.tail = null)
          : (lastTailNode.sibling = null);
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$131 = null; null !== lastTailNode; )
          null !== lastTailNode.alternate && (lastTailNode$131 = lastTailNode),
            (lastTailNode = lastTailNode.sibling);
        null === lastTailNode$131
          ? hasRenderedATailFallback || null === renderState.tail
            ? (renderState.tail = null)
            : (renderState.tail.sibling = null)
          : (lastTailNode$131.sibling = null);
    }
}
function bubbleProperties(completedWork) {
  var didBailout =
      null !== completedWork.alternate &&
      completedWork.alternate.child === completedWork.child,
    newChildLanes = 0,
    subtreeFlags = 0;
  if (didBailout)
    for (var child$132 = completedWork.child; null !== child$132; )
      (newChildLanes |= child$132.lanes | child$132.childLanes),
        (subtreeFlags |= child$132.subtreeFlags & 31457280),
        (subtreeFlags |= child$132.flags & 31457280),
        (child$132.return = completedWork),
        (child$132 = child$132.sibling);
  else
    for (child$132 = completedWork.child; null !== child$132; )
      (newChildLanes |= child$132.lanes | child$132.childLanes),
        (subtreeFlags |= child$132.subtreeFlags),
        (subtreeFlags |= child$132.flags),
        (child$132.return = completedWork),
        (child$132 = child$132.sibling);
  completedWork.subtreeFlags |= subtreeFlags;
  completedWork.childLanes = newChildLanes;
  return didBailout;
}
function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps;
  popTreeContext(workInProgress);
  switch (workInProgress.tag) {
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return bubbleProperties(workInProgress), null;
    case 1:
      return bubbleProperties(workInProgress), null;
    case 3:
      renderLanes = workInProgress.stateNode;
      newProps = null;
      null !== current && (newProps = current.memoizedState.cache);
      workInProgress.memoizedState.cache !== newProps &&
        (workInProgress.flags |= 2048);
      popProvider(CacheContext);
      popHostContainer();
      renderLanes.pendingContext &&
        ((renderLanes.context = renderLanes.pendingContext),
        (renderLanes.pendingContext = null));
      if (null === current || null === current.child)
        popHydrationState(workInProgress)
          ? markUpdate(workInProgress)
          : null === current ||
            (current.memoizedState.isDehydrated &&
              0 === (workInProgress.flags & 256)) ||
            ((workInProgress.flags |= 1024),
            null !== hydrationErrors &&
              (queueRecoverableErrors(hydrationErrors),
              (hydrationErrors = null)));
      bubbleProperties(workInProgress);
      return null;
    case 26:
      return (
        (renderLanes = workInProgress.memoizedState),
        null === current
          ? (markUpdate(workInProgress),
            null !== renderLanes
              ? (bubbleProperties(workInProgress),
                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
              : (bubbleProperties(workInProgress),
                (workInProgress.flags &= -16777217)))
          : renderLanes
            ? renderLanes !== current.memoizedState
              ? (markUpdate(workInProgress),
                bubbleProperties(workInProgress),
                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
              : (bubbleProperties(workInProgress),
                (workInProgress.flags &= -16777217))
            : (current.memoizedProps !== newProps && markUpdate(workInProgress),
              bubbleProperties(workInProgress),
              (workInProgress.flags &= -16777217)),
        null
      );
    case 27:
      popHostContext(workInProgress);
      renderLanes = rootInstanceStackCursor.current;
      var type = workInProgress.type;
      if (null !== current && null != workInProgress.stateNode)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if (!newProps) {
          if (null === workInProgress.stateNode)
            throw Error(formatProdErrorMessage(166));
          bubbleProperties(workInProgress);
          return null;
        }
        current = contextStackCursor.current;
        popHydrationState(workInProgress)
          ? prepareToHydrateHostInstance(workInProgress, current)
          : ((current = resolveSingletonInstance(type, newProps, renderLanes)),
            (workInProgress.stateNode = current),
            markUpdate(workInProgress));
      }
      bubbleProperties(workInProgress);
      return null;
    case 5:
      popHostContext(workInProgress);
      renderLanes = workInProgress.type;
      if (null !== current && null != workInProgress.stateNode)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if (!newProps) {
          if (null === workInProgress.stateNode)
            throw Error(formatProdErrorMessage(166));
          bubbleProperties(workInProgress);
          return null;
        }
        current = contextStackCursor.current;
        if (popHydrationState(workInProgress))
          prepareToHydrateHostInstance(workInProgress, current);
        else {
          type = getOwnerDocumentFromRootContainer(
            rootInstanceStackCursor.current
          );
          switch (current) {
            case 1:
              current = type.createElementNS(
                "http://www.w3.org/2000/svg",
                renderLanes
              );
              break;
            case 2:
              current = type.createElementNS(
                "http://www.w3.org/1998/Math/MathML",
                renderLanes
              );
              break;
            default:
              switch (renderLanes) {
                case "svg":
                  current = type.createElementNS(
                    "http://www.w3.org/2000/svg",
                    renderLanes
                  );
                  break;
                case "math":
                  current = type.createElementNS(
                    "http://www.w3.org/1998/Math/MathML",
                    renderLanes
                  );
                  break;
                case "script":
                  current = type.createElement("div");
                  current.innerHTML = "<script>\x3c/script>";
                  current = current.removeChild(current.firstChild);
                  break;
                case "select":
                  current =
                    "string" === typeof newProps.is
                      ? type.createElement("select", { is: newProps.is })
                      : type.createElement("select");
                  newProps.multiple
                    ? (current.multiple = !0)
                    : newProps.size && (current.size = newProps.size);
                  break;
                default:
                  current =
                    "string" === typeof newProps.is
                      ? type.createElement(renderLanes, { is: newProps.is })
                      : type.createElement(renderLanes);
              }
          }
          current[internalInstanceKey] = workInProgress;
          current[internalPropsKey] = newProps;
          a: for (type = workInProgress.child; null !== type; ) {
            if (5 === type.tag || 6 === type.tag)
              current.appendChild(type.stateNode);
            else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
              type.child.return = type;
              type = type.child;
              continue;
            }
            if (type === workInProgress) break a;
            for (; null === type.sibling; ) {
              if (null === type.return || type.return === workInProgress)
                break a;
              type = type.return;
            }
            type.sibling.return = type.return;
            type = type.sibling;
          }
          workInProgress.stateNode = current;
          a: switch (
            (setInitialProperties(current, renderLanes, newProps), renderLanes)
          ) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              current = !!newProps.autoFocus;
              break a;
            case "img":
              current = !0;
              break a;
            default:
              current = !1;
          }
          current && markUpdate(workInProgress);
        }
      }
      bubbleProperties(workInProgress);
      workInProgress.flags &= -16777217;
      return null;
    case 6:
      if (current && null != workInProgress.stateNode)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if ("string" !== typeof newProps && null === workInProgress.stateNode)
          throw Error(formatProdErrorMessage(166));
        current = rootInstanceStackCursor.current;
        if (popHydrationState(workInProgress)) {
          current = workInProgress.stateNode;
          renderLanes = workInProgress.memoizedProps;
          newProps = null;
          type = hydrationParentFiber;
          if (null !== type)
            switch (type.tag) {
              case 27:
              case 5:
                newProps = type.memoizedProps;
            }
          current[internalInstanceKey] = workInProgress;
          current =
            current.nodeValue === renderLanes ||
            (null !== newProps && !0 === newProps.suppressHydrationWarning) ||
            checkForUnmatchedText(current.nodeValue, renderLanes)
              ? !0
              : !1;
          current || throwOnHydrationMismatch(workInProgress);
        } else
          (current =
            getOwnerDocumentFromRootContainer(current).createTextNode(
              newProps
            )),
            (current[internalInstanceKey] = workInProgress),
            (workInProgress.stateNode = current);
      }
      bubbleProperties(workInProgress);
      return null;
    case 13:
      newProps = workInProgress.memoizedState;
      if (
        null === current ||
        (null !== current.memoizedState &&
          null !== current.memoizedState.dehydrated)
      ) {
        type = popHydrationState(workInProgress);
        if (null !== newProps && null !== newProps.dehydrated) {
          if (null === current) {
            if (!type) throw Error(formatProdErrorMessage(318));
            type = workInProgress.memoizedState;
            type = null !== type ? type.dehydrated : null;
            if (!type) throw Error(formatProdErrorMessage(317));
            type[internalInstanceKey] = workInProgress;
          } else
            resetHydrationState(),
              0 === (workInProgress.flags & 128) &&
                (workInProgress.memoizedState = null),
              (workInProgress.flags |= 4);
          bubbleProperties(workInProgress);
          type = !1;
        } else
          null !== hydrationErrors &&
            (queueRecoverableErrors(hydrationErrors), (hydrationErrors = null)),
            (type = !0);
        if (!type) {
          if (workInProgress.flags & 256)
            return popSuspenseHandler(workInProgress), workInProgress;
          popSuspenseHandler(workInProgress);
          return null;
        }
      }
      popSuspenseHandler(workInProgress);
      if (0 !== (workInProgress.flags & 128))
        return (workInProgress.lanes = renderLanes), workInProgress;
      renderLanes = null !== newProps;
      current = null !== current && null !== current.memoizedState;
      if (renderLanes) {
        newProps = workInProgress.child;
        type = null;
        null !== newProps.alternate &&
          null !== newProps.alternate.memoizedState &&
          null !== newProps.alternate.memoizedState.cachePool &&
          (type = newProps.alternate.memoizedState.cachePool.pool);
        var cache$144 = null;
        null !== newProps.memoizedState &&
          null !== newProps.memoizedState.cachePool &&
          (cache$144 = newProps.memoizedState.cachePool.pool);
        cache$144 !== type && (newProps.flags |= 2048);
      }
      renderLanes !== current &&
        renderLanes &&
        (workInProgress.child.flags |= 8192);
      scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
      bubbleProperties(workInProgress);
      return null;
    case 4:
      return (
        popHostContainer(),
        null === current &&
          listenToAllSupportedEvents(workInProgress.stateNode.containerInfo),
        bubbleProperties(workInProgress),
        null
      );
    case 10:
      return (
        popProvider(workInProgress.type), bubbleProperties(workInProgress), null
      );
    case 19:
      pop(suspenseStackCursor);
      type = workInProgress.memoizedState;
      if (null === type) return bubbleProperties(workInProgress), null;
      newProps = 0 !== (workInProgress.flags & 128);
      cache$144 = type.rendering;
      if (null === cache$144)
        if (newProps) cutOffTailIfNeeded(type, !1);
        else {
          if (
            0 !== workInProgressRootExitStatus ||
            (null !== current && 0 !== (current.flags & 128))
          )
            for (current = workInProgress.child; null !== current; ) {
              cache$144 = findFirstSuspended(current);
              if (null !== cache$144) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, !1);
                current = cache$144.updateQueue;
                workInProgress.updateQueue = current;
                scheduleRetryEffect(workInProgress, current);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes; )
                  resetWorkInProgress(renderLanes, current),
                    (renderLanes = renderLanes.sibling);
                push(
                  suspenseStackCursor,
                  (suspenseStackCursor.current & 1) | 2
                );
                return workInProgress.child;
              }
              current = current.sibling;
            }
          null !== type.tail &&
            now() > workInProgressRootRenderTargetTime &&
            ((workInProgress.flags |= 128),
            (newProps = !0),
            cutOffTailIfNeeded(type, !1),
            (workInProgress.lanes = 4194304));
        }
      else {
        if (!newProps)
          if (((current = findFirstSuspended(cache$144)), null !== current)) {
            if (
              ((workInProgress.flags |= 128),
              (newProps = !0),
              (current = current.updateQueue),
              (workInProgress.updateQueue = current),
              scheduleRetryEffect(workInProgress, current),
              cutOffTailIfNeeded(type, !0),
              null === type.tail &&
                "hidden" === type.tailMode &&
                !cache$144.alternate &&
                !isHydrating)
            )
              return bubbleProperties(workInProgress), null;
          } else
            2 * now() - type.renderingStartTime >
              workInProgressRootRenderTargetTime &&
              536870912 !== renderLanes &&
              ((workInProgress.flags |= 128),
              (newProps = !0),
              cutOffTailIfNeeded(type, !1),
              (workInProgress.lanes = 4194304));
        type.isBackwards
          ? ((cache$144.sibling = workInProgress.child),
            (workInProgress.child = cache$144))
          : ((current = type.last),
            null !== current
              ? (current.sibling = cache$144)
              : (workInProgress.child = cache$144),
            (type.last = cache$144));
      }
      if (null !== type.tail)
        return (
          (workInProgress = type.tail),
          (type.rendering = workInProgress),
          (type.tail = workInProgress.sibling),
          (type.renderingStartTime = now()),
          (workInProgress.sibling = null),
          (current = suspenseStackCursor.current),
          push(suspenseStackCursor, newProps ? (current & 1) | 2 : current & 1),
          workInProgress
        );
      bubbleProperties(workInProgress);
      return null;
    case 22:
    case 23:
      return (
        popSuspenseHandler(workInProgress),
        popHiddenContext(),
        (newProps = null !== workInProgress.memoizedState),
        null !== current
          ? (null !== current.memoizedState) !== newProps &&
            (workInProgress.flags |= 8192)
          : newProps && (workInProgress.flags |= 8192),
        newProps
          ? 0 !== (renderLanes & 536870912) &&
            0 === (workInProgress.flags & 128) &&
            (bubbleProperties(workInProgress),
            workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192))
          : bubbleProperties(workInProgress),
        (renderLanes = workInProgress.updateQueue),
        null !== renderLanes &&
          scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
        (renderLanes = null),
        null !== current &&
          null !== current.memoizedState &&
          null !== current.memoizedState.cachePool &&
          (renderLanes = current.memoizedState.cachePool.pool),
        (newProps = null),
        null !== workInProgress.memoizedState &&
          null !== workInProgress.memoizedState.cachePool &&
          (newProps = workInProgress.memoizedState.cachePool.pool),
        newProps !== renderLanes && (workInProgress.flags |= 2048),
        null !== current && pop(resumedCache),
        null
      );
    case 24:
      return (
        (renderLanes = null),
        null !== current && (renderLanes = current.memoizedState.cache),
        workInProgress.memoizedState.cache !== renderLanes &&
          (workInProgress.flags |= 2048),
        popProvider(CacheContext),
        bubbleProperties(workInProgress),
        null
      );
    case 25:
      return null;
  }
  throw Error(formatProdErrorMessage(156, workInProgress.tag));
}
function unwindWork(current, workInProgress) {
  popTreeContext(workInProgress);
  switch (workInProgress.tag) {
    case 1:
      return (
        (current = workInProgress.flags),
        current & 65536
          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
          : null
      );
    case 3:
      return (
        popProvider(CacheContext),
        popHostContainer(),
        (current = workInProgress.flags),
        0 !== (current & 65536) && 0 === (current & 128)
          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
          : null
      );
    case 26:
    case 27:
    case 5:
      return popHostContext(workInProgress), null;
    case 13:
      popSuspenseHandler(workInProgress);
      current = workInProgress.memoizedState;
      if (null !== current && null !== current.dehydrated) {
        if (null === workInProgress.alternate)
          throw Error(formatProdErrorMessage(340));
        resetHydrationState();
      }
      current = workInProgress.flags;
      return current & 65536
        ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
        : null;
    case 19:
      return pop(suspenseStackCursor), null;
    case 4:
      return popHostContainer(), null;
    case 10:
      return popProvider(workInProgress.type), null;
    case 22:
    case 23:
      return (
        popSuspenseHandler(workInProgress),
        popHiddenContext(),
        null !== current && pop(resumedCache),
        (current = workInProgress.flags),
        current & 65536
          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
          : null
      );
    case 24:
      return popProvider(CacheContext), null;
    case 25:
      return null;
    default:
      return null;
  }
}
function unwindInterruptedWork(current, interruptedWork) {
  popTreeContext(interruptedWork);
  switch (interruptedWork.tag) {
    case 3:
      popProvider(CacheContext);
      popHostContainer();
      break;
    case 26:
    case 27:
    case 5:
      popHostContext(interruptedWork);
      break;
    case 4:
      popHostContainer();
      break;
    case 13:
      popSuspenseHandler(interruptedWork);
      break;
    case 19:
      pop(suspenseStackCursor);
      break;
    case 10:
      popProvider(interruptedWork.type);
      break;
    case 22:
    case 23:
      popSuspenseHandler(interruptedWork);
      popHiddenContext();
      null !== current && pop(resumedCache);
      break;
    case 24:
      popProvider(CacheContext);
  }
}
var DefaultAsyncDispatcher = {
    getCacheForType: function (resourceType) {
      var cache = readContext(CacheContext),
        cacheForType = cache.data.get(resourceType);
      void 0 === cacheForType &&
        ((cacheForType = resourceType()),
        cache.data.set(resourceType, cacheForType));
      return cacheForType;
    }
  },
  PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
  executionContext = 0,
  workInProgressRoot = null,
  workInProgress = null,
  workInProgressRootRenderLanes = 0,
  workInProgressSuspendedReason = 0,
  workInProgressThrownValue = null,
  workInProgressRootDidSkipSuspendedSiblings = !1,
  workInProgressRootIsPrerendering = !1,
  workInProgressRootDidAttachPingListener = !1,
  entangledRenderLanes = 0,
  workInProgressRootExitStatus = 0,
  workInProgressRootSkippedLanes = 0,
  workInProgressRootInterleavedUpdatedLanes = 0,
  workInProgressRootPingedLanes = 0,
  workInProgressDeferredLane = 0,
  workInProgressSuspendedRetryLanes = 0,
  workInProgressRootConcurrentErrors = null,
  workInProgressRootRecoverableErrors = null,
  workInProgressRootDidIncludeRecursiveRenderUpdate = !1,
  globalMostRecentFallbackTime = 0,
  workInProgressRootRenderTargetTime = Infinity,
  workInProgressTransitions = null,
  legacyErrorBoundariesThatAlreadyFailed = null,
  rootDoesHavePassiveEffects = !1,
  rootWithPendingPassiveEffects = null,
  pendingPassiveEffectsLanes = 0,
  pendingPassiveEffectsRemainingLanes = 0,
  pendingPassiveTransitions = null,
  nestedUpdateCount = 0,
  rootWithNestedUpdates = null;
function requestUpdateLane() {
  if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
    return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
  if (null !== ReactSharedInternals.T) {
    var actionScopeLane = currentEntangledLane;
    return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
  }
  return resolveUpdatePriority();
}
function requestDeferredLane() {
  0 === workInProgressDeferredLane &&
    (workInProgressDeferredLane =
      0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
        ? claimNextTransitionLane()
        : 536870912);
  var suspenseHandler = suspenseHandlerStackCursor.current;
  null !== suspenseHandler && (suspenseHandler.flags |= 32);
  return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root, fiber, lane) {
  if (
    (root === workInProgressRoot && 2 === workInProgressSuspendedReason) ||
    null !== root.cancelPendingCommit
  )
    prepareFreshStack(root, 0),
      markRootSuspended(
        root,
        workInProgressRootRenderLanes,
        workInProgressDeferredLane,
        !1
      );
  markRootUpdated$1(root, lane);
  if (0 === (executionContext & 2) || root !== workInProgressRoot)
    root === workInProgressRoot &&
      (0 === (executionContext & 2) &&
        (workInProgressRootInterleavedUpdatedLanes |= lane),
      4 === workInProgressRootExitStatus &&
        markRootSuspended(
          root,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          !1
        )),
      ensureRootIsScheduled(root);
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
  var shouldTimeSlice =
      (!forceSync &&
        0 === (lanes & 60) &&
        0 === (lanes & root$jscomp$0.expiredLanes)) ||
      checkIfRootIsPrerendering(root$jscomp$0, lanes),
    exitStatus = shouldTimeSlice
      ? renderRootConcurrent(root$jscomp$0, lanes)
      : renderRootSync(root$jscomp$0, lanes, !0),
    renderWasConcurrent = shouldTimeSlice;
  do {
    if (0 === exitStatus) {
      workInProgressRootIsPrerendering &&
        !shouldTimeSlice &&
        markRootSuspended(root$jscomp$0, lanes, 0, !1);
      break;
    } else if (6 === exitStatus)
      markRootSuspended(
        root$jscomp$0,
        lanes,
        0,
        !workInProgressRootDidSkipSuspendedSiblings
      );
    else {
      forceSync = root$jscomp$0.current.alternate;
      if (
        renderWasConcurrent &&
        !isRenderConsistentWithExternalStores(forceSync)
      ) {
        exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
        renderWasConcurrent = !1;
        continue;
      }
      if (2 === exitStatus) {
        renderWasConcurrent = lanes;
        if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
          var JSCompiler_inline_result = 0;
        else
          (JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913),
            (JSCompiler_inline_result =
              0 !== JSCompiler_inline_result
                ? JSCompiler_inline_result
                : JSCompiler_inline_result & 536870912
                  ? 536870912
                  : 0);
        if (0 !== JSCompiler_inline_result) {
          lanes = JSCompiler_inline_result;
          a: {
            var root = root$jscomp$0;
            exitStatus = workInProgressRootConcurrentErrors;
            var wasRootDehydrated = root.current.memoizedState.isDehydrated;
            wasRootDehydrated &&
              (prepareFreshStack(root, JSCompiler_inline_result).flags |= 256);
            JSCompiler_inline_result = renderRootSync(
              root,
              JSCompiler_inline_result,
              !1
            );
            if (2 !== JSCompiler_inline_result) {
              if (
                workInProgressRootDidAttachPingListener &&
                !wasRootDehydrated
              ) {
                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                workInProgressRootInterleavedUpdatedLanes |=
                  renderWasConcurrent;
                exitStatus = 4;
                break a;
              }
              renderWasConcurrent = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = exitStatus;
              null !== renderWasConcurrent &&
                queueRecoverableErrors(renderWasConcurrent);
            }
            exitStatus = JSCompiler_inline_result;
          }
          renderWasConcurrent = !1;
          if (2 !== exitStatus) continue;
        }
      }
      if (1 === exitStatus) {
        prepareFreshStack(root$jscomp$0, 0);
        markRootSuspended(root$jscomp$0, lanes, 0, !0);
        break;
      }
      a: {
        shouldTimeSlice = root$jscomp$0;
        switch (exitStatus) {
          case 0:
          case 1:
            throw Error(formatProdErrorMessage(345));
          case 4:
            if ((lanes & 4194176) === lanes) {
              markRootSuspended(
                shouldTimeSlice,
                lanes,
                workInProgressDeferredLane,
                !workInProgressRootDidSkipSuspendedSiblings
              );
              break a;
            }
            break;
          case 2:
            workInProgressRootRecoverableErrors = null;
            break;
          case 3:
          case 5:
            break;
          default:
            throw Error(formatProdErrorMessage(329));
        }
        shouldTimeSlice.finishedWork = forceSync;
        shouldTimeSlice.finishedLanes = lanes;
        if (
          (lanes & 62914560) === lanes &&
          ((renderWasConcurrent = globalMostRecentFallbackTime + 300 - now()),
          10 < renderWasConcurrent)
        ) {
          markRootSuspended(
            shouldTimeSlice,
            lanes,
            workInProgressDeferredLane,
            !workInProgressRootDidSkipSuspendedSiblings
          );
          if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
          shouldTimeSlice.timeoutHandle = scheduleTimeout(
            commitRootWhenReady.bind(
              null,
              shouldTimeSlice,
              forceSync,
              workInProgressRootRecoverableErrors,
              workInProgressTransitions,
              workInProgressRootDidIncludeRecursiveRenderUpdate,
              lanes,
              workInProgressDeferredLane,
              workInProgressRootInterleavedUpdatedLanes,
              workInProgressSuspendedRetryLanes,
              workInProgressRootDidSkipSuspendedSiblings,
              2,
              -0,
              0
            ),
            renderWasConcurrent
          );
          break a;
        }
        commitRootWhenReady(
          shouldTimeSlice,
          forceSync,
          workInProgressRootRecoverableErrors,
          workInProgressTransitions,
          workInProgressRootDidIncludeRecursiveRenderUpdate,
          lanes,
          workInProgressDeferredLane,
          workInProgressRootInterleavedUpdatedLanes,
          workInProgressSuspendedRetryLanes,
          workInProgressRootDidSkipSuspendedSiblings,
          0,
          -0,
          0
        );
      }
    }
    break;
  } while (1);
  ensureRootIsScheduled(root$jscomp$0);
}
function queueRecoverableErrors(errors) {
  null === workInProgressRootRecoverableErrors
    ? (workInProgressRootRecoverableErrors = errors)
    : workInProgressRootRecoverableErrors.push.apply(
        workInProgressRootRecoverableErrors,
        errors
      );
}
function commitRootWhenReady(
  root,
  finishedWork,
  recoverableErrors,
  transitions,
  didIncludeRenderPhaseUpdate,
  lanes,
  spawnedLane,
  updatedLanes,
  suspendedRetryLanes,
  didSkipSuspendedSiblings,
  suspendedCommitReason,
  completedRenderStartTime,
  completedRenderEndTime
) {
  var subtreeFlags = finishedWork.subtreeFlags;
  if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))
    if (
      ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
      accumulateSuspenseyCommitOnFiber(finishedWork),
      (finishedWork = waitForCommitToBeReady()),
      null !== finishedWork)
    ) {
      root.cancelPendingCommit = finishedWork(
        commitRoot.bind(
          null,
          root,
          recoverableErrors,
          transitions,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes,
          1,
          completedRenderStartTime,
          completedRenderEndTime
        )
      );
      markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);
      return;
    }
  commitRoot(
    root,
    recoverableErrors,
    transitions,
    didIncludeRenderPhaseUpdate,
    spawnedLane,
    updatedLanes,
    suspendedRetryLanes,
    suspendedCommitReason,
    completedRenderStartTime,
    completedRenderEndTime
  );
}
function isRenderConsistentWithExternalStores(finishedWork) {
  for (var node = finishedWork; ; ) {
    var tag = node.tag;
    if (
      (0 === tag || 11 === tag || 15 === tag) &&
      node.flags & 16384 &&
      ((tag = node.updateQueue),
      null !== tag && ((tag = tag.stores), null !== tag))
    )
      for (var i = 0; i < tag.length; i++) {
        var check = tag[i],
          getSnapshot = check.getSnapshot;
        check = check.value;
        try {
          if (!objectIs(getSnapshot(), check)) return !1;
        } catch (error) {
          return !1;
        }
      }
    tag = node.child;
    if (node.subtreeFlags & 16384 && null !== tag)
      (tag.return = node), (node = tag);
    else {
      if (node === finishedWork) break;
      for (; null === node.sibling; ) {
        if (null === node.return || node.return === finishedWork) return !0;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  return !0;
}
function markRootSuspended(
  root,
  suspendedLanes,
  spawnedLane,
  didAttemptEntireTree
) {
  suspendedLanes &= ~workInProgressRootPingedLanes;
  suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes;
  didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
  didAttemptEntireTree = root.expirationTimes;
  for (var lanes = suspendedLanes; 0 < lanes; ) {
    var index$6 = 31 - clz32(lanes),
      lane = 1 << index$6;
    didAttemptEntireTree[index$6] = -1;
    lanes &= ~lane;
  }
  0 !== spawnedLane &&
    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
}
function flushSyncWork$1() {
  return 0 === (executionContext & 6)
    ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)
    : !0;
}
function resetWorkInProgressStack() {
  if (null !== workInProgress) {
    if (0 === workInProgressSuspendedReason)
      var interruptedWork = workInProgress.return;
    else
      (interruptedWork = workInProgress),
        (lastContextDependency = currentlyRenderingFiber = null),
        resetHooksOnUnwind(interruptedWork),
        (thenableState$1 = null),
        (thenableIndexCounter$1 = 0),
        (interruptedWork = workInProgress);
    for (; null !== interruptedWork; )
      unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
        (interruptedWork = interruptedWork.return);
    workInProgress = null;
  }
}
function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = 0;
  var timeoutHandle = root.timeoutHandle;
  -1 !== timeoutHandle &&
    ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));
  timeoutHandle = root.cancelPendingCommit;
  null !== timeoutHandle &&
    ((root.cancelPendingCommit = null), timeoutHandle());
  resetWorkInProgressStack();
  workInProgressRoot = root;
  workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
  workInProgressRootRenderLanes = lanes;
  workInProgressSuspendedReason = 0;
  workInProgressThrownValue = null;
  workInProgressRootDidSkipSuspendedSiblings = !1;
  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
  workInProgressRootDidAttachPingListener = !1;
  workInProgressSuspendedRetryLanes =
    workInProgressDeferredLane =
    workInProgressRootPingedLanes =
    workInProgressRootInterleavedUpdatedLanes =
    workInProgressRootSkippedLanes =
    workInProgressRootExitStatus =
      0;
  workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
    null;
  workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
  0 !== (lanes & 8) && (lanes |= lanes & 32);
  var allEntangledLanes = root.entangledLanes;
  if (0 !== allEntangledLanes)
    for (
      root = root.entanglements, allEntangledLanes &= lanes;
      0 < allEntangledLanes;

    ) {
      var index$4 = 31 - clz32(allEntangledLanes),
        lane = 1 << index$4;
      lanes |= root[index$4];
      allEntangledLanes &= ~lane;
    }
  entangledRenderLanes = lanes;
  finishQueueingConcurrentUpdates();
  return timeoutHandle;
}
function handleThrow(root, thrownValue) {
  currentlyRenderingFiber$1 = null;
  ReactSharedInternals.H = ContextOnlyDispatcher;
  thrownValue === SuspenseException
    ? ((thrownValue = getSuspendedThenable()),
      (workInProgressSuspendedReason = 3))
    : thrownValue === SuspenseyCommitException
      ? ((thrownValue = getSuspendedThenable()),
        (workInProgressSuspendedReason = 4))
      : (workInProgressSuspendedReason =
          thrownValue === SelectiveHydrationException
            ? 8
            : null !== thrownValue &&
                "object" === typeof thrownValue &&
                "function" === typeof thrownValue.then
              ? 6
              : 1);
  workInProgressThrownValue = thrownValue;
  null === workInProgress &&
    ((workInProgressRootExitStatus = 1),
    logUncaughtError(
      root,
      createCapturedValueAtFiber(thrownValue, root.current)
    ));
}
function pushDispatcher() {
  var prevDispatcher = ReactSharedInternals.H;
  ReactSharedInternals.H = ContextOnlyDispatcher;
  return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
  var prevAsyncDispatcher = ReactSharedInternals.A;
  ReactSharedInternals.A = DefaultAsyncDispatcher;
  return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
  workInProgressRootExitStatus = 4;
  workInProgressRootDidSkipSuspendedSiblings ||
    ((workInProgressRootRenderLanes & 4194176) !==
      workInProgressRootRenderLanes &&
      null !== suspenseHandlerStackCursor.current) ||
    (workInProgressRootIsPrerendering = !0);
  (0 === (workInProgressRootSkippedLanes & 134217727) &&
    0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
    null === workInProgressRoot ||
    markRootSuspended(
      workInProgressRoot,
      workInProgressRootRenderLanes,
      workInProgressDeferredLane,
      !1
    );
}
function renderRootSync(root, lanes, shouldYieldForPrerendering) {
  var prevExecutionContext = executionContext;
  executionContext |= 2;
  var prevDispatcher = pushDispatcher(),
    prevAsyncDispatcher = pushAsyncDispatcher();
  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes)
    (workInProgressTransitions = null), prepareFreshStack(root, lanes);
  lanes = !1;
  var exitStatus = workInProgressRootExitStatus;
  a: do
    try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        var unitOfWork = workInProgress,
          thrownValue = workInProgressThrownValue;
        switch (workInProgressSuspendedReason) {
          case 8:
            resetWorkInProgressStack();
            exitStatus = 6;
            break a;
          case 3:
          case 2:
          case 6:
            null === suspenseHandlerStackCursor.current && (lanes = !0);
            var reason = workInProgressSuspendedReason;
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            if (
              shouldYieldForPrerendering &&
              workInProgressRootIsPrerendering
            ) {
              exitStatus = 0;
              break a;
            }
            break;
          default:
            (reason = workInProgressSuspendedReason),
              (workInProgressSuspendedReason = 0),
              (workInProgressThrownValue = null),
              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
        }
      }
      workLoopSync();
      exitStatus = workInProgressRootExitStatus;
      break;
    } catch (thrownValue$164) {
      handleThrow(root, thrownValue$164);
    }
  while (1);
  lanes && root.shellSuspendCounter++;
  lastContextDependency = currentlyRenderingFiber = null;
  executionContext = prevExecutionContext;
  ReactSharedInternals.H = prevDispatcher;
  ReactSharedInternals.A = prevAsyncDispatcher;
  null === workInProgress &&
    ((workInProgressRoot = null),
    (workInProgressRootRenderLanes = 0),
    finishQueueingConcurrentUpdates());
  return exitStatus;
}
function workLoopSync() {
  for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= 2;
  var prevDispatcher = pushDispatcher(),
    prevAsyncDispatcher = pushAsyncDispatcher();
  workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes
    ? ((workInProgressTransitions = null),
      (workInProgressRootRenderTargetTime = now() + 500),
      prepareFreshStack(root, lanes))
    : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
        root,
        lanes
      ));
  a: do
    try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        lanes = workInProgress;
        var thrownValue = workInProgressThrownValue;
        b: switch (workInProgressSuspendedReason) {
          case 1:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
            break;
          case 2:
            if (isThenableResolved(thrownValue)) {
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              replaySuspendedUnitOfWork(lanes);
              break;
            }
            lanes = function () {
              2 === workInProgressSuspendedReason &&
                workInProgressRoot === root &&
                (workInProgressSuspendedReason = 7);
              ensureRootIsScheduled(root);
            };
            thrownValue.then(lanes, lanes);
            break a;
          case 3:
            workInProgressSuspendedReason = 7;
            break a;
          case 4:
            workInProgressSuspendedReason = 5;
            break a;
          case 7:
            isThenableResolved(thrownValue)
              ? ((workInProgressSuspendedReason = 0),
                (workInProgressThrownValue = null),
                replaySuspendedUnitOfWork(lanes))
              : ((workInProgressSuspendedReason = 0),
                (workInProgressThrownValue = null),
                throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
            break;
          case 5:
            var resource = null;
            switch (workInProgress.tag) {
              case 26:
                resource = workInProgress.memoizedState;
              case 5:
              case 27:
                var hostFiber = workInProgress;
                if (resource ? preloadResource(resource) : 1) {
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  var sibling = hostFiber.sibling;
                  if (null !== sibling) workInProgress = sibling;
                  else {
                    var returnFiber = hostFiber.return;
                    null !== returnFiber
                      ? ((workInProgress = returnFiber),
                        completeUnitOfWork(returnFiber))
                      : (workInProgress = null);
                  }
                  break b;
                }
            }
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
            break;
          case 6:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
            break;
          case 8:
            resetWorkInProgressStack();
            workInProgressRootExitStatus = 6;
            break a;
          default:
            throw Error(formatProdErrorMessage(462));
        }
      }
      workLoopConcurrent();
      break;
    } catch (thrownValue$166) {
      handleThrow(root, thrownValue$166);
    }
  while (1);
  lastContextDependency = currentlyRenderingFiber = null;
  ReactSharedInternals.H = prevDispatcher;
  ReactSharedInternals.A = prevAsyncDispatcher;
  executionContext = prevExecutionContext;
  if (null !== workInProgress) return 0;
  workInProgressRoot = null;
  workInProgressRootRenderLanes = 0;
  finishQueueingConcurrentUpdates();
  return workInProgressRootExitStatus;
}
function workLoopConcurrent() {
  for (; null !== workInProgress && !shouldYield(); )
    performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
  var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
  unitOfWork.memoizedProps = unitOfWork.pendingProps;
  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
}
function replaySuspendedUnitOfWork(unitOfWork) {
  var next = unitOfWork;
  var current = next.alternate;
  switch (next.tag) {
    case 15:
    case 0:
      next = replayFunctionComponent(
        current,
        next,
        next.pendingProps,
        next.type,
        void 0,
        workInProgressRootRenderLanes
      );
      break;
    case 11:
      next = replayFunctionComponent(
        current,
        next,
        next.pendingProps,
        next.type.render,
        next.ref,
        workInProgressRootRenderLanes
      );
      break;
    case 5:
      resetHooksOnUnwind(next);
    default:
      unwindInterruptedWork(current, next),
        (next = workInProgress =
          resetWorkInProgress(next, entangledRenderLanes)),
        (next = beginWork(current, next, entangledRenderLanes));
  }
  unitOfWork.memoizedProps = unitOfWork.pendingProps;
  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
}
function throwAndUnwindWorkLoop(
  root,
  unitOfWork,
  thrownValue,
  suspendedReason
) {
  lastContextDependency = currentlyRenderingFiber = null;
  resetHooksOnUnwind(unitOfWork);
  thenableState$1 = null;
  thenableIndexCounter$1 = 0;
  var returnFiber = unitOfWork.return;
  try {
    if (
      throwException(
        root,
        returnFiber,
        unitOfWork,
        thrownValue,
        workInProgressRootRenderLanes
      )
    ) {
      workInProgressRootExitStatus = 1;
      logUncaughtError(
        root,
        createCapturedValueAtFiber(thrownValue, root.current)
      );
      workInProgress = null;
      return;
    }
  } catch (error) {
    if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
    workInProgressRootExitStatus = 1;
    logUncaughtError(
      root,
      createCapturedValueAtFiber(thrownValue, root.current)
    );
    workInProgress = null;
    return;
  }
  if (unitOfWork.flags & 32768) {
    if (isHydrating || 1 === suspendedReason) root = !0;
    else if (
      workInProgressRootIsPrerendering ||
      0 !== (workInProgressRootRenderLanes & 536870912)
    )
      root = !1;
    else if (
      ((workInProgressRootDidSkipSuspendedSiblings = root = !0),
      2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
    )
      (suspendedReason = suspenseHandlerStackCursor.current),
        null !== suspendedReason &&
          13 === suspendedReason.tag &&
          (suspendedReason.flags |= 16384);
    unwindUnitOfWork(unitOfWork, root);
  } else completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
  var completedWork = unitOfWork;
  do {
    if (0 !== (completedWork.flags & 32768)) {
      unwindUnitOfWork(
        completedWork,
        workInProgressRootDidSkipSuspendedSiblings
      );
      return;
    }
    unitOfWork = completedWork.return;
    var next = completeWork(
      completedWork.alternate,
      completedWork,
      entangledRenderLanes
    );
    if (null !== next) {
      workInProgress = next;
      return;
    }
    completedWork = completedWork.sibling;
    if (null !== completedWork) {
      workInProgress = completedWork;
      return;
    }
    workInProgress = completedWork = unitOfWork;
  } while (null !== completedWork);
  0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
  do {
    var next = unwindWork(unitOfWork.alternate, unitOfWork);
    if (null !== next) {
      next.flags &= 32767;
      workInProgress = next;
      return;
    }
    next = unitOfWork.return;
    null !== next &&
      ((next.flags |= 32768), (next.subtreeFlags = 0), (next.deletions = null));
    if (
      !skipSiblings &&
      ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
    ) {
      workInProgress = unitOfWork;
      return;
    }
    workInProgress = unitOfWork = next;
  } while (null !== unitOfWork);
  workInProgressRootExitStatus = 6;
  workInProgress = null;
}
function commitRoot(
  root,
  recoverableErrors,
  transitions,
  didIncludeRenderPhaseUpdate,
  spawnedLane,
  updatedLanes,
  suspendedRetryLanes,
  suspendedCommitReason,
  completedRenderStartTime,
  completedRenderEndTime
) {
  var prevTransition = ReactSharedInternals.T,
    previousUpdateLanePriority = ReactDOMSharedInternals.p;
  try {
    (ReactDOMSharedInternals.p = 2),
      (ReactSharedInternals.T = null),
      commitRootImpl(
        root,
        recoverableErrors,
        transitions,
        didIncludeRenderPhaseUpdate,
        previousUpdateLanePriority,
        spawnedLane,
        updatedLanes,
        suspendedRetryLanes,
        suspendedCommitReason,
        completedRenderStartTime,
        completedRenderEndTime
      );
  } finally {
    (ReactSharedInternals.T = prevTransition),
      (ReactDOMSharedInternals.p = previousUpdateLanePriority);
  }
}
function commitRootImpl(
  root,
  recoverableErrors,
  transitions,
  didIncludeRenderPhaseUpdate,
  renderPriorityLevel,
  spawnedLane,
  updatedLanes,
  suspendedRetryLanes
) {
  do flushPassiveEffects();
  while (null !== rootWithPendingPassiveEffects);
  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
  var finishedWork = root.finishedWork;
  didIncludeRenderPhaseUpdate = root.finishedLanes;
  if (null === finishedWork) return null;
  root.finishedWork = null;
  root.finishedLanes = 0;
  if (finishedWork === root.current) throw Error(formatProdErrorMessage(177));
  root.callbackNode = null;
  root.callbackPriority = 0;
  root.cancelPendingCommit = null;
  var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
  remainingLanes |= concurrentlyUpdatedLanes;
  markRootFinished(
    root,
    didIncludeRenderPhaseUpdate,
    remainingLanes,
    spawnedLane,
    updatedLanes,
    suspendedRetryLanes
  );
  root === workInProgressRoot &&
    ((workInProgress = workInProgressRoot = null),
    (workInProgressRootRenderLanes = 0));
  (0 === (finishedWork.subtreeFlags & 10256) &&
    0 === (finishedWork.flags & 10256)) ||
    rootDoesHavePassiveEffects ||
    ((rootDoesHavePassiveEffects = !0),
    (pendingPassiveEffectsRemainingLanes = remainingLanes),
    (pendingPassiveTransitions = transitions),
    scheduleCallback$1(NormalPriority$1, function () {
      flushPassiveEffects(!0);
      return null;
    }));
  transitions = 0 !== (finishedWork.flags & 15990);
  0 !== (finishedWork.subtreeFlags & 15990) || transitions
    ? ((transitions = ReactSharedInternals.T),
      (ReactSharedInternals.T = null),
      (spawnedLane = ReactDOMSharedInternals.p),
      (ReactDOMSharedInternals.p = 2),
      (updatedLanes = executionContext),
      (executionContext |= 4),
      commitBeforeMutationEffects(root, finishedWork),
      commitMutationEffectsOnFiber(finishedWork, root),
      restoreSelection(selectionInformation, root.containerInfo),
      (_enabled = !!eventsEnabled),
      (selectionInformation = eventsEnabled = null),
      (root.current = finishedWork),
      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork),
      requestPaint(),
      (executionContext = updatedLanes),
      (ReactDOMSharedInternals.p = spawnedLane),
      (ReactSharedInternals.T = transitions))
    : (root.current = finishedWork);
  rootDoesHavePassiveEffects
    ? ((rootDoesHavePassiveEffects = !1),
      (rootWithPendingPassiveEffects = root),
      (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))
    : releaseRootPooledCache(root, remainingLanes);
  remainingLanes = root.pendingLanes;
  0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
  ensureRootIsScheduled(root);
  if (null !== recoverableErrors)
    for (
      renderPriorityLevel = root.onRecoverableError, finishedWork = 0;
      finishedWork < recoverableErrors.length;
      finishedWork++
    )
      (remainingLanes = recoverableErrors[finishedWork]),
        renderPriorityLevel(remainingLanes.value, {
          componentStack: remainingLanes.stack
        });
  0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
  remainingLanes = root.pendingLanes;
  0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42)
    ? root === rootWithNestedUpdates
      ? nestedUpdateCount++
      : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
    : (nestedUpdateCount = 0);
  flushSyncWorkAcrossRoots_impl(0, !1);
  return null;
}
function releaseRootPooledCache(root, remainingLanes) {
  0 === (root.pooledCacheLanes &= remainingLanes) &&
    ((remainingLanes = root.pooledCache),
    null != remainingLanes &&
      ((root.pooledCache = null), releaseCache(remainingLanes)));
}
function flushPassiveEffects() {
  if (null !== rootWithPendingPassiveEffects) {
    var root$170 = rootWithPendingPassiveEffects,
      remainingLanes = pendingPassiveEffectsRemainingLanes;
    pendingPassiveEffectsRemainingLanes = 0;
    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
      prevTransition = ReactSharedInternals.T,
      previousPriority = ReactDOMSharedInternals.p;
    try {
      ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
      ReactSharedInternals.T = null;
      if (null === rootWithPendingPassiveEffects)
        var JSCompiler_inline_result = !1;
      else {
        renderPriority = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects,
          lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = 0;
        if (0 !== (executionContext & 6))
          throw Error(formatProdErrorMessage(331));
        var prevExecutionContext = executionContext;
        executionContext |= 4;
        commitPassiveUnmountOnFiber(root.current);
        commitPassiveMountOnFiber(root, root.current, lanes, renderPriority);
        executionContext = prevExecutionContext;
        flushSyncWorkAcrossRoots_impl(0, !1);
        if (
          injectedHook &&
          "function" === typeof injectedHook.onPostCommitFiberRoot
        )
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
          } catch (err) {}
        JSCompiler_inline_result = !0;
      }
      return JSCompiler_inline_result;
    } finally {
      (ReactDOMSharedInternals.p = previousPriority),
        (ReactSharedInternals.T = prevTransition),
        releaseRootPooledCache(root$170, remainingLanes);
    }
  }
  return !1;
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
  sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
  rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
  null !== rootFiber &&
    (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
  if (3 === sourceFiber.tag)
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
  else
    for (; null !== nearestMountedAncestor; ) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(
          nearestMountedAncestor,
          sourceFiber,
          error
        );
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if (
          "function" ===
            typeof nearestMountedAncestor.type.getDerivedStateFromError ||
          ("function" === typeof instance.componentDidCatch &&
            (null === legacyErrorBoundariesThatAlreadyFailed ||
              !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
        ) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          error = createClassErrorUpdate(2);
          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
          null !== instance &&
            (initializeClassErrorUpdate(
              error,
              instance,
              nearestMountedAncestor,
              sourceFiber
            ),
            markRootUpdated$1(instance, 2),
            ensureRootIsScheduled(instance));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root, wakeable, lanes) {
  var pingCache = root.pingCache;
  if (null === pingCache) {
    pingCache = root.pingCache = new PossiblyWeakMap();
    var threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else
    (threadIDs = pingCache.get(wakeable)),
      void 0 === threadIDs &&
        ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
  threadIDs.has(lanes) ||
    ((workInProgressRootDidAttachPingListener = !0),
    threadIDs.add(lanes),
    (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
    wakeable.then(root, root));
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;
  null !== pingCache && pingCache.delete(wakeable);
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
  root.warmLanes &= ~pingedLanes;
  workInProgressRoot === root &&
    (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
    (4 === workInProgressRootExitStatus ||
    (3 === workInProgressRootExitStatus &&
      (workInProgressRootRenderLanes & 62914560) ===
        workInProgressRootRenderLanes &&
      300 > now() - globalMostRecentFallbackTime)
      ? 0 === (executionContext & 2) && prepareFreshStack(root, 0)
      : (workInProgressRootPingedLanes |= pingedLanes),
    workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
      (workInProgressSuspendedRetryLanes = 0));
  ensureRootIsScheduled(root);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
  0 === retryLane && (retryLane = claimNextRetryLane());
  boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
  null !== boundaryFiber &&
    (markRootUpdated$1(boundaryFiber, retryLane),
    ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState,
    retryLane = 0;
  null !== suspenseState && (retryLane = suspenseState.retryLane);
  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = 0;
  switch (boundaryFiber.tag) {
    case 13:
      var retryCache = boundaryFiber.stateNode;
      var suspenseState = boundaryFiber.memoizedState;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      break;
    case 19:
      retryCache = boundaryFiber.stateNode;
      break;
    case 22:
      retryCache = boundaryFiber.stateNode._retryCache;
      break;
    default:
      throw Error(formatProdErrorMessage(314));
  }
  null !== retryCache && retryCache.delete(wakeable);
  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback$1(priorityLevel, callback) {
  return scheduleCallback$3(priorityLevel, callback);
}
var firstScheduledRoot = null,
  lastScheduledRoot = null,
  didScheduleMicrotask = !1,
  mightHavePendingSyncWork = !1,
  isFlushingWork = !1,
  currentEventTransitionLane = 0;
function ensureRootIsScheduled(root) {
  root !== lastScheduledRoot &&
    null === root.next &&
    (null === lastScheduledRoot
      ? (firstScheduledRoot = lastScheduledRoot = root)
      : (lastScheduledRoot = lastScheduledRoot.next = root));
  mightHavePendingSyncWork = !0;
  didScheduleMicrotask ||
    ((didScheduleMicrotask = !0),
    scheduleImmediateTask(processRootScheduleInMicrotask));
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
  if (!isFlushingWork && mightHavePendingSyncWork) {
    isFlushingWork = !0;
    do {
      var didPerformSomeWork = !1;
      for (var root$172 = firstScheduledRoot; null !== root$172; ) {
        if (!onlyLegacy)
          if (0 !== syncTransitionLanes) {
            var pendingLanes = root$172.pendingLanes;
            if (0 === pendingLanes) var JSCompiler_inline_result = 0;
            else {
              var suspendedLanes = root$172.suspendedLanes,
                pingedLanes = root$172.pingedLanes;
              JSCompiler_inline_result =
                (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
              JSCompiler_inline_result &=
                pendingLanes & ~(suspendedLanes & ~pingedLanes);
              JSCompiler_inline_result =
                JSCompiler_inline_result & 201326677
                  ? (JSCompiler_inline_result & 201326677) | 1
                  : JSCompiler_inline_result
                    ? JSCompiler_inline_result | 2
                    : 0;
            }
            0 !== JSCompiler_inline_result &&
              ((didPerformSomeWork = !0),
              performSyncWorkOnRoot(root$172, JSCompiler_inline_result));
          } else
            (JSCompiler_inline_result = workInProgressRootRenderLanes),
              (JSCompiler_inline_result = getNextLanes(
                root$172,
                root$172 === workInProgressRoot ? JSCompiler_inline_result : 0
              )),
              0 === (JSCompiler_inline_result & 3) ||
                checkIfRootIsPrerendering(root$172, JSCompiler_inline_result) ||
                ((didPerformSomeWork = !0),
                performSyncWorkOnRoot(root$172, JSCompiler_inline_result));
        root$172 = root$172.next;
      }
    } while (didPerformSomeWork);
    isFlushingWork = !1;
  }
}
function processRootScheduleInMicrotask() {
  mightHavePendingSyncWork = didScheduleMicrotask = !1;
  var syncTransitionLanes = 0;
  0 !== currentEventTransitionLane &&
    (shouldAttemptEagerTransition() &&
      (syncTransitionLanes = currentEventTransitionLane),
    (currentEventTransitionLane = 0));
  for (
    var currentTime = now(), prev = null, root = firstScheduledRoot;
    null !== root;

  ) {
    var next = root.next,
      nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
    if (0 === nextLanes)
      (root.next = null),
        null === prev ? (firstScheduledRoot = next) : (prev.next = next),
        null === next && (lastScheduledRoot = prev);
    else if (
      ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
    )
      mightHavePendingSyncWork = !0;
    root = next;
  }
  flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);
}
function scheduleTaskForRootDuringMicrotask(root, currentTime) {
  for (
    var suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      expirationTimes = root.expirationTimes,
      lanes = root.pendingLanes & -62914561;
    0 < lanes;

  ) {
    var index$5 = 31 - clz32(lanes),
      lane = 1 << index$5,
      expirationTime = expirationTimes[index$5];
    if (-1 === expirationTime) {
      if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
        expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
    } else expirationTime <= currentTime && (root.expiredLanes |= lane);
    lanes &= ~lane;
  }
  currentTime = workInProgressRoot;
  suspendedLanes = workInProgressRootRenderLanes;
  suspendedLanes = getNextLanes(
    root,
    root === currentTime ? suspendedLanes : 0
  );
  pingedLanes = root.callbackNode;
  if (
    0 === suspendedLanes ||
    (root === currentTime && 2 === workInProgressSuspendedReason) ||
    null !== root.cancelPendingCommit
  )
    return (
      null !== pingedLanes &&
        null !== pingedLanes &&
        cancelCallback$1(pingedLanes),
      (root.callbackNode = null),
      (root.callbackPriority = 0)
    );
  if (
    0 === (suspendedLanes & 3) ||
    checkIfRootIsPrerendering(root, suspendedLanes)
  ) {
    currentTime = suspendedLanes & -suspendedLanes;
    if (currentTime === root.callbackPriority) return currentTime;
    null !== pingedLanes && cancelCallback$1(pingedLanes);
    switch (lanesToEventPriority(suspendedLanes)) {
      case 2:
      case 8:
        suspendedLanes = UserBlockingPriority;
        break;
      case 32:
        suspendedLanes = NormalPriority$1;
        break;
      case 268435456:
        suspendedLanes = IdlePriority;
        break;
      default:
        suspendedLanes = NormalPriority$1;
    }
    pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
    suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
    root.callbackPriority = currentTime;
    root.callbackNode = suspendedLanes;
    return currentTime;
  }
  null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
  root.callbackPriority = 2;
  root.callbackNode = null;
  return 2;
}
function performWorkOnRootViaSchedulerTask(root, didTimeout) {
  var originalCallbackNode = root.callbackNode;
  if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
    return null;
  var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
  workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
    root,
    root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
  );
  if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
  performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
  scheduleTaskForRootDuringMicrotask(root, now());
  return null != root.callbackNode && root.callbackNode === originalCallbackNode
    ? performWorkOnRootViaSchedulerTask.bind(null, root)
    : null;
}
function performSyncWorkOnRoot(root, lanes) {
  if (flushPassiveEffects()) return null;
  performWorkOnRoot(root, lanes, !0);
}
function scheduleImmediateTask(cb) {
  scheduleMicrotask(function () {
    0 !== (executionContext & 6)
      ? scheduleCallback$3(ImmediatePriority, cb)
      : cb();
  });
}
function requestTransitionLane() {
  0 === currentEventTransitionLane &&
    (currentEventTransitionLane = claimNextTransitionLane());
  return currentEventTransitionLane;
}
function coerceFormActionProp(actionProp) {
  return null == actionProp ||
    "symbol" === typeof actionProp ||
    "boolean" === typeof actionProp
    ? null
    : "function" === typeof actionProp
      ? actionProp
      : sanitizeURL("" + actionProp);
}
function createFormDataWithSubmitter(form, submitter) {
  var temp = submitter.ownerDocument.createElement("input");
  temp.name = submitter.name;
  temp.value = submitter.value;
  form.id && temp.setAttribute("form", form.id);
  submitter.parentNode.insertBefore(temp, submitter);
  form = new FormData(form);
  temp.parentNode.removeChild(temp);
  return form;
}
function extractEvents$1(
  dispatchQueue,
  domEventName,
  maybeTargetInst,
  nativeEvent,
  nativeEventTarget
) {
  if (
    "submit" === domEventName &&
    maybeTargetInst &&
    maybeTargetInst.stateNode === nativeEventTarget
  ) {
    var action = coerceFormActionProp(
        (nativeEventTarget[internalPropsKey] || null).action
      ),
      submitter = nativeEvent.submitter;
    submitter &&
      ((domEventName = (domEventName = submitter[internalPropsKey] || null)
        ? coerceFormActionProp(domEventName.formAction)
        : submitter.getAttribute("formAction")),
      null !== domEventName && ((action = domEventName), (submitter = null)));
    var event = new SyntheticEvent(
      "action",
      "action",
      null,
      nativeEvent,
      nativeEventTarget
    );
    dispatchQueue.push({
      event: event,
      listeners: [
        {
          instance: null,
          listener: function () {
            if (nativeEvent.defaultPrevented) {
              if (0 !== currentEventTransitionLane) {
                var formData = submitter
                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
                  : new FormData(nativeEventTarget);
                startHostTransition(
                  maybeTargetInst,
                  {
                    pending: !0,
                    data: formData,
                    method: nativeEventTarget.method,
                    action: action
                  },
                  null,
                  formData
                );
              }
            } else
              "function" === typeof action &&
                (event.preventDefault(),
                (formData = submitter
                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
                  : new FormData(nativeEventTarget)),
                startHostTransition(
                  maybeTargetInst,
                  {
                    pending: !0,
                    data: formData,
                    method: nativeEventTarget.method,
                    action: action
                  },
                  action,
                  formData
                ));
          },
          currentTarget: nativeEventTarget
        }
      ]
    });
  }
}
for (
  var i$jscomp$inline_1439 = 0;
  i$jscomp$inline_1439 < simpleEventPluginEvents.length;
  i$jscomp$inline_1439++
) {
  var eventName$jscomp$inline_1440 =
      simpleEventPluginEvents[i$jscomp$inline_1439],
    domEventName$jscomp$inline_1441 =
      eventName$jscomp$inline_1440.toLowerCase(),
    capitalizedEvent$jscomp$inline_1442 =
      eventName$jscomp$inline_1440[0].toUpperCase() +
      eventName$jscomp$inline_1440.slice(1);
  registerSimpleEvent(
    domEventName$jscomp$inline_1441,
    "on" + capitalizedEvent$jscomp$inline_1442
  );
}
registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
registerSimpleEvent(ANIMATION_START, "onAnimationStart");
registerSimpleEvent("dblclick", "onDoubleClick");
registerSimpleEvent("focusin", "onFocus");
registerSimpleEvent("focusout", "onBlur");
registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
registerSimpleEvent(TRANSITION_START, "onTransitionStart");
registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
registerTwoPhaseEvent(
  "onChange",
  "change click focusin focusout input keydown keyup selectionchange".split(" ")
);
registerTwoPhaseEvent(
  "onSelect",
  "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
    " "
  )
);
registerTwoPhaseEvent("onBeforeInput", [
  "compositionend",
  "keypress",
  "textInput",
  "paste"
]);
registerTwoPhaseEvent(
  "onCompositionEnd",
  "compositionend focusout keydown keypress keyup mousedown".split(" ")
);
registerTwoPhaseEvent(
  "onCompositionStart",
  "compositionstart focusout keydown keypress keyup mousedown".split(" ")
);
registerTwoPhaseEvent(
  "onCompositionUpdate",
  "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
);
var mediaEventTypes =
    "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
      " "
    ),
  nonDelegatedEvents = new Set(
    "beforetoggle cancel close invalid load scroll scrollend toggle"
      .split(" ")
      .concat(mediaEventTypes)
  );
function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  eventSystemFlags = 0 !== (eventSystemFlags & 4);
  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
      event = _dispatchQueue$i.event;
    _dispatchQueue$i = _dispatchQueue$i.listeners;
    a: {
      var previousInstance = void 0;
      if (eventSystemFlags)
        for (
          var i$jscomp$0 = _dispatchQueue$i.length - 1;
          0 <= i$jscomp$0;
          i$jscomp$0--
        ) {
          var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
            instance = _dispatchListeners$i.instance,
            currentTarget = _dispatchListeners$i.currentTarget;
          _dispatchListeners$i = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped())
            break a;
          previousInstance = _dispatchListeners$i;
          event.currentTarget = currentTarget;
          try {
            previousInstance(event);
          } catch (error) {
            reportGlobalError(error);
          }
          event.currentTarget = null;
          previousInstance = instance;
        }
      else
        for (
          i$jscomp$0 = 0;
          i$jscomp$0 < _dispatchQueue$i.length;
          i$jscomp$0++
        ) {
          _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
          instance = _dispatchListeners$i.instance;
          currentTarget = _dispatchListeners$i.currentTarget;
          _dispatchListeners$i = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped())
            break a;
          previousInstance = _dispatchListeners$i;
          event.currentTarget = currentTarget;
          try {
            previousInstance(event);
          } catch (error) {
            reportGlobalError(error);
          }
          event.currentTarget = null;
          previousInstance = instance;
        }
    }
  }
}
function listenToNonDelegatedEvent(domEventName, targetElement) {
  var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
  void 0 === JSCompiler_inline_result &&
    (JSCompiler_inline_result = targetElement[internalEventHandlersKey] =
      new Set());
  var listenerSetKey = domEventName + "__bubble";
  JSCompiler_inline_result.has(listenerSetKey) ||
    (addTrappedEventListener(targetElement, domEventName, 2, !1),
    JSCompiler_inline_result.add(listenerSetKey));
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
  var eventSystemFlags = 0;
  isCapturePhaseListener && (eventSystemFlags |= 4);
  addTrappedEventListener(
    target,
    domEventName,
    eventSystemFlags,
    isCapturePhaseListener
  );
}
var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  if (!rootContainerElement[listeningMarker]) {
    rootContainerElement[listeningMarker] = !0;
    allNativeEvents.forEach(function (domEventName) {
      "selectionchange" !== domEventName &&
        (nonDelegatedEvents.has(domEventName) ||
          listenToNativeEvent(domEventName, !1, rootContainerElement),
        listenToNativeEvent(domEventName, !0, rootContainerElement));
    });
    var ownerDocument =
      9 === rootContainerElement.nodeType
        ? rootContainerElement
        : rootContainerElement.ownerDocument;
    null === ownerDocument ||
      ownerDocument[listeningMarker] ||
      ((ownerDocument[listeningMarker] = !0),
      listenToNativeEvent("selectionchange", !1, ownerDocument));
  }
}
function addTrappedEventListener(
  targetContainer,
  domEventName,
  eventSystemFlags,
  isCapturePhaseListener
) {
  switch (getEventPriority(domEventName)) {
    case 2:
      var listenerWrapper = dispatchDiscreteEvent;
      break;
    case 8:
      listenerWrapper = dispatchContinuousEvent;
      break;
    default:
      listenerWrapper = dispatchEvent;
  }
  eventSystemFlags = listenerWrapper.bind(
    null,
    domEventName,
    eventSystemFlags,
    targetContainer
  );
  listenerWrapper = void 0;
  !passiveBrowserEventsSupported ||
    ("touchstart" !== domEventName &&
      "touchmove" !== domEventName &&
      "wheel" !== domEventName) ||
    (listenerWrapper = !0);
  isCapturePhaseListener
    ? void 0 !== listenerWrapper
      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          capture: !0,
          passive: listenerWrapper
        })
      : targetContainer.addEventListener(domEventName, eventSystemFlags, !0)
    : void 0 !== listenerWrapper
      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          passive: listenerWrapper
        })
      : targetContainer.addEventListener(domEventName, eventSystemFlags, !1);
}
function dispatchEventForPluginEventSystem(
  domEventName,
  eventSystemFlags,
  nativeEvent,
  targetInst$jscomp$0,
  targetContainer
) {
  var ancestorInst = targetInst$jscomp$0;
  if (
    0 === (eventSystemFlags & 1) &&
    0 === (eventSystemFlags & 2) &&
    null !== targetInst$jscomp$0
  )
    a: for (;;) {
      if (null === targetInst$jscomp$0) return;
      var nodeTag = targetInst$jscomp$0.tag;
      if (3 === nodeTag || 4 === nodeTag) {
        var container = targetInst$jscomp$0.stateNode.containerInfo;
        if (
          container === targetContainer ||
          (8 === container.nodeType && container.parentNode === targetContainer)
        )
          break;
        if (4 === nodeTag)
          for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
            var grandTag = nodeTag.tag;
            if (3 === grandTag || 4 === grandTag)
              if (
                ((grandTag = nodeTag.stateNode.containerInfo),
                grandTag === targetContainer ||
                  (8 === grandTag.nodeType &&
                    grandTag.parentNode === targetContainer))
              )
                return;
            nodeTag = nodeTag.return;
          }
        for (; null !== container; ) {
          nodeTag = getClosestInstanceFromNode(container);
          if (null === nodeTag) return;
          grandTag = nodeTag.tag;
          if (
            5 === grandTag ||
            6 === grandTag ||
            26 === grandTag ||
            27 === grandTag
          ) {
            targetInst$jscomp$0 = ancestorInst = nodeTag;
            continue a;
          }
          container = container.parentNode;
        }
      }
      targetInst$jscomp$0 = targetInst$jscomp$0.return;
    }
  batchedUpdates$1(function () {
    var targetInst = ancestorInst,
      nativeEventTarget = getEventTarget(nativeEvent),
      dispatchQueue = [];
    a: {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (void 0 !== reactName) {
        var SyntheticEventCtor = SyntheticEvent,
          reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (0 === getEventCharCode(nativeEvent)) break a;
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (2 === nativeEvent.button) break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
          case "scrollend":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
          case "toggle":
          case "beforetoggle":
            SyntheticEventCtor = SyntheticToggleEvent;
        }
        var inCapturePhase = 0 !== (eventSystemFlags & 4),
          accumulateTargetOnly =
            !inCapturePhase &&
            ("scroll" === domEventName || "scrollend" === domEventName),
          reactEventName = inCapturePhase
            ? null !== reactName
              ? reactName + "Capture"
              : null
            : reactName;
        inCapturePhase = [];
        for (
          var instance = targetInst, lastHostComponent;
          null !== instance;

        ) {
          var _instance = instance;
          lastHostComponent = _instance.stateNode;
          _instance = _instance.tag;
          (5 !== _instance && 26 !== _instance && 27 !== _instance) ||
            null === lastHostComponent ||
            null === reactEventName ||
            ((_instance = getListener(instance, reactEventName)),
            null != _instance &&
              inCapturePhase.push(
                createDispatchListener(instance, _instance, lastHostComponent)
              ));
          if (accumulateTargetOnly) break;
          instance = instance.return;
        }
        0 < inCapturePhase.length &&
          ((reactName = new SyntheticEventCtor(
            reactName,
            reactEventType,
            null,
            nativeEvent,
            nativeEventTarget
          )),
          dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
      }
    }
    if (0 === (eventSystemFlags & 7)) {
      a: {
        reactName =
          "mouseover" === domEventName || "pointerover" === domEventName;
        SyntheticEventCtor =
          "mouseout" === domEventName || "pointerout" === domEventName;
        if (
          reactName &&
          nativeEvent !== currentReplayingEvent &&
          (reactEventType =
            nativeEvent.relatedTarget || nativeEvent.fromElement) &&
          (getClosestInstanceFromNode(reactEventType) ||
            reactEventType[internalContainerInstanceKey])
        )
          break a;
        if (SyntheticEventCtor || reactName) {
          reactName =
            nativeEventTarget.window === nativeEventTarget
              ? nativeEventTarget
              : (reactName = nativeEventTarget.ownerDocument)
                ? reactName.defaultView || reactName.parentWindow
                : window;
          if (SyntheticEventCtor) {
            if (
              ((reactEventType =
                nativeEvent.relatedTarget || nativeEvent.toElement),
              (SyntheticEventCtor = targetInst),
              (reactEventType = reactEventType
                ? getClosestInstanceFromNode(reactEventType)
                : null),
              null !== reactEventType &&
                ((accumulateTargetOnly =
                  getNearestMountedFiber(reactEventType)),
                (inCapturePhase = reactEventType.tag),
                reactEventType !== accumulateTargetOnly ||
                  (5 !== inCapturePhase &&
                    27 !== inCapturePhase &&
                    6 !== inCapturePhase)))
            )
              reactEventType = null;
          } else (SyntheticEventCtor = null), (reactEventType = targetInst);
          if (SyntheticEventCtor !== reactEventType) {
            inCapturePhase = SyntheticMouseEvent;
            _instance = "onMouseLeave";
            reactEventName = "onMouseEnter";
            instance = "mouse";
            if ("pointerout" === domEventName || "pointerover" === domEventName)
              (inCapturePhase = SyntheticPointerEvent),
                (_instance = "onPointerLeave"),
                (reactEventName = "onPointerEnter"),
                (instance = "pointer");
            accumulateTargetOnly =
              null == SyntheticEventCtor
                ? reactName
                : getNodeFromInstance(SyntheticEventCtor);
            lastHostComponent =
              null == reactEventType
                ? reactName
                : getNodeFromInstance(reactEventType);
            reactName = new inCapturePhase(
              _instance,
              instance + "leave",
              SyntheticEventCtor,
              nativeEvent,
              nativeEventTarget
            );
            reactName.target = accumulateTargetOnly;
            reactName.relatedTarget = lastHostComponent;
            _instance = null;
            getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
              ((inCapturePhase = new inCapturePhase(
                reactEventName,
                instance + "enter",
                reactEventType,
                nativeEvent,
                nativeEventTarget
              )),
              (inCapturePhase.target = lastHostComponent),
              (inCapturePhase.relatedTarget = accumulateTargetOnly),
              (_instance = inCapturePhase));
            accumulateTargetOnly = _instance;
            if (SyntheticEventCtor && reactEventType)
              b: {
                inCapturePhase = SyntheticEventCtor;
                reactEventName = reactEventType;
                instance = 0;
                for (
                  lastHostComponent = inCapturePhase;
                  lastHostComponent;
                  lastHostComponent = getParent(lastHostComponent)
                )
                  instance++;
                lastHostComponent = 0;
                for (
                  _instance = reactEventName;
                  _instance;
                  _instance = getParent(_instance)
                )
                  lastHostComponent++;
                for (; 0 < instance - lastHostComponent; )
                  (inCapturePhase = getParent(inCapturePhase)), instance--;
                for (; 0 < lastHostComponent - instance; )
                  (reactEventName = getParent(reactEventName)),
                    lastHostComponent--;
                for (; instance--; ) {
                  if (
                    inCapturePhase === reactEventName ||
                    (null !== reactEventName &&
                      inCapturePhase === reactEventName.alternate)
                  )
                    break b;
                  inCapturePhase = getParent(inCapturePhase);
                  reactEventName = getParent(reactEventName);
                }
                inCapturePhase = null;
              }
            else inCapturePhase = null;
            null !== SyntheticEventCtor &&
              accumulateEnterLeaveListenersForEvent(
                dispatchQueue,
                reactName,
                SyntheticEventCtor,
                inCapturePhase,
                !1
              );
            null !== reactEventType &&
              null !== accumulateTargetOnly &&
              accumulateEnterLeaveListenersForEvent(
                dispatchQueue,
                accumulateTargetOnly,
                reactEventType,
                inCapturePhase,
                !0
              );
          }
        }
      }
      a: {
        reactName = targetInst ? getNodeFromInstance(targetInst) : window;
        SyntheticEventCtor =
          reactName.nodeName && reactName.nodeName.toLowerCase();
        if (
          "select" === SyntheticEventCtor ||
          ("input" === SyntheticEventCtor && "file" === reactName.type)
        )
          var getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(reactName))
          if (isInputEventSupported)
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            var handleEventFunc = handleEventsForInputEventPolyfill;
          }
        else
          (SyntheticEventCtor = reactName.nodeName),
            !SyntheticEventCtor ||
            "input" !== SyntheticEventCtor.toLowerCase() ||
            ("checkbox" !== reactName.type && "radio" !== reactName.type)
              ? targetInst &&
                isCustomElement(targetInst.elementType) &&
                (getTargetInstFunc = getTargetInstForChangeEvent)
              : (getTargetInstFunc = getTargetInstForClickEvent);
        if (
          getTargetInstFunc &&
          (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
        ) {
          createAndAccumulateChangeEvent(
            dispatchQueue,
            getTargetInstFunc,
            nativeEvent,
            nativeEventTarget
          );
          break a;
        }
        handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
        "focusout" === domEventName &&
          targetInst &&
          "number" === reactName.type &&
          null != targetInst.memoizedProps.value &&
          setDefaultValue(reactName, "number", reactName.value);
      }
      handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (
            isTextInputElement(handleEventFunc) ||
            "true" === handleEventFunc.contentEditable
          )
            (activeElement = handleEventFunc),
              (activeElementInst = targetInst),
              (lastSelection = null);
          break;
        case "focusout":
          lastSelection = activeElementInst = activeElement = null;
          break;
        case "mousedown":
          mouseDown = !0;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = !1;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent) break;
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
      var fallbackData;
      if (canUseCompositionEvent)
        b: {
          switch (domEventName) {
            case "compositionstart":
              var eventType = "onCompositionStart";
              break b;
            case "compositionend":
              eventType = "onCompositionEnd";
              break b;
            case "compositionupdate":
              eventType = "onCompositionUpdate";
              break b;
          }
          eventType = void 0;
        }
      else
        isComposing
          ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
            (eventType = "onCompositionEnd")
          : "keydown" === domEventName &&
            229 === nativeEvent.keyCode &&
            (eventType = "onCompositionStart");
      eventType &&
        (useFallbackCompositionData &&
          "ko" !== nativeEvent.locale &&
          (isComposing || "onCompositionStart" !== eventType
            ? "onCompositionEnd" === eventType &&
              isComposing &&
              (fallbackData = getData())
            : ((root = nativeEventTarget),
              (startText = "value" in root ? root.value : root.textContent),
              (isComposing = !0))),
        (handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType)),
        0 < handleEventFunc.length &&
          ((eventType = new SyntheticCompositionEvent(
            eventType,
            domEventName,
            null,
            nativeEvent,
            nativeEventTarget
          )),
          dispatchQueue.push({ event: eventType, listeners: handleEventFunc }),
          fallbackData
            ? (eventType.data = fallbackData)
            : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
              null !== fallbackData && (eventType.data = fallbackData))));
      if (
        (fallbackData = canUseTextInputEvent
          ? getNativeBeforeInputChars(domEventName, nativeEvent)
          : getFallbackBeforeInputChars(domEventName, nativeEvent))
      )
        (eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput")),
          0 < eventType.length &&
            ((handleEventFunc = new SyntheticCompositionEvent(
              "onBeforeInput",
              "beforeinput",
              null,
              nativeEvent,
              nativeEventTarget
            )),
            dispatchQueue.push({
              event: handleEventFunc,
              listeners: eventType
            }),
            (handleEventFunc.data = fallbackData));
      extractEvents$1(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget
      );
    }
    processDispatchQueue(dispatchQueue, eventSystemFlags);
  });
}
function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}
function accumulateTwoPhaseListeners(targetFiber, reactName) {
  for (
    var captureName = reactName + "Capture", listeners = [];
    null !== targetFiber;

  ) {
    var _instance2 = targetFiber,
      stateNode = _instance2.stateNode;
    _instance2 = _instance2.tag;
    (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
      null === stateNode ||
      ((_instance2 = getListener(targetFiber, captureName)),
      null != _instance2 &&
        listeners.unshift(
          createDispatchListener(targetFiber, _instance2, stateNode)
        ),
      (_instance2 = getListener(targetFiber, reactName)),
      null != _instance2 &&
        listeners.push(
          createDispatchListener(targetFiber, _instance2, stateNode)
        ));
    targetFiber = targetFiber.return;
  }
  return listeners;
}
function getParent(inst) {
  if (null === inst) return null;
  do inst = inst.return;
  while (inst && 5 !== inst.tag && 27 !== inst.tag);
  return inst ? inst : null;
}
function accumulateEnterLeaveListenersForEvent(
  dispatchQueue,
  event,
  target,
  common,
  inCapturePhase
) {
  for (
    var registrationName = event._reactName, listeners = [];
    null !== target && target !== common;

  ) {
    var _instance3 = target,
      alternate = _instance3.alternate,
      stateNode = _instance3.stateNode;
    _instance3 = _instance3.tag;
    if (null !== alternate && alternate === common) break;
    (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
      null === stateNode ||
      ((alternate = stateNode),
      inCapturePhase
        ? ((stateNode = getListener(target, registrationName)),
          null != stateNode &&
            listeners.unshift(
              createDispatchListener(target, stateNode, alternate)
            ))
        : inCapturePhase ||
          ((stateNode = getListener(target, registrationName)),
          null != stateNode &&
            listeners.push(
              createDispatchListener(target, stateNode, alternate)
            )));
    target = target.return;
  }
  0 !== listeners.length &&
    dispatchQueue.push({ event: event, listeners: listeners });
}
var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
  NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
function normalizeMarkupForTextOrAttribute(markup) {
  return ("string" === typeof markup ? markup : "" + markup)
    .replace(NORMALIZE_NEWLINES_REGEX, "\n")
    .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
}
function checkForUnmatchedText(serverText, clientText) {
  clientText = normalizeMarkupForTextOrAttribute(clientText);
  return normalizeMarkupForTextOrAttribute(serverText) === clientText ? !0 : !1;
}
function noop$1() {}
function setProp(domElement, tag, key, value, props, prevValue) {
  switch (key) {
    case "children":
      "string" === typeof value
        ? "body" === tag ||
          ("textarea" === tag && "" === value) ||
          setTextContent(domElement, value)
        : ("number" === typeof value || "bigint" === typeof value) &&
          "body" !== tag &&
          setTextContent(domElement, "" + value);
      break;
    case "className":
      setValueForKnownAttribute(domElement, "class", value);
      break;
    case "tabIndex":
      setValueForKnownAttribute(domElement, "tabindex", value);
      break;
    case "dir":
    case "role":
    case "viewBox":
    case "width":
    case "height":
      setValueForKnownAttribute(domElement, key, value);
      break;
    case "style":
      setValueForStyles(domElement, value, prevValue);
      break;
    case "data":
      if ("object" !== tag) {
        setValueForKnownAttribute(domElement, "data", value);
        break;
      }
    case "src":
    case "href":
      if ("" === value && ("a" !== tag || "href" !== key)) {
        domElement.removeAttribute(key);
        break;
      }
      if (
        null == value ||
        "function" === typeof value ||
        "symbol" === typeof value ||
        "boolean" === typeof value
      ) {
        domElement.removeAttribute(key);
        break;
      }
      value = sanitizeURL("" + value);
      domElement.setAttribute(key, value);
      break;
    case "action":
    case "formAction":
      if ("function" === typeof value) {
        domElement.setAttribute(
          key,
          "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
        );
        break;
      } else
        "function" === typeof prevValue &&
          ("formAction" === key
            ? ("input" !== tag &&
                setProp(domElement, tag, "name", props.name, props, null),
              setProp(
                domElement,
                tag,
                "formEncType",
                props.formEncType,
                props,
                null
              ),
              setProp(
                domElement,
                tag,
                "formMethod",
                props.formMethod,
                props,
                null
              ),
              setProp(
                domElement,
                tag,
                "formTarget",
                props.formTarget,
                props,
                null
              ))
            : (setProp(domElement, tag, "encType", props.encType, props, null),
              setProp(domElement, tag, "method", props.method, props, null),
              setProp(domElement, tag, "target", props.target, props, null)));
      if (
        null == value ||
        "symbol" === typeof value ||
        "boolean" === typeof value
      ) {
        domElement.removeAttribute(key);
        break;
      }
      value = sanitizeURL("" + value);
      domElement.setAttribute(key, value);
      break;
    case "onClick":
      null != value && (domElement.onclick = noop$1);
      break;
    case "onScroll":
      null != value && listenToNonDelegatedEvent("scroll", domElement);
      break;
    case "onScrollEnd":
      null != value && listenToNonDelegatedEvent("scrollend", domElement);
      break;
    case "dangerouslySetInnerHTML":
      if (null != value) {
        if ("object" !== typeof value || !("__html" in value))
          throw Error(formatProdErrorMessage(61));
        key = value.__html;
        if (null != key) {
          if (null != props.children) throw Error(formatProdErrorMessage(60));
          domElement.innerHTML = key;
        }
      }
      break;
    case "multiple":
      domElement.multiple =
        value && "function" !== typeof value && "symbol" !== typeof value;
      break;
    case "muted":
      domElement.muted =
        value && "function" !== typeof value && "symbol" !== typeof value;
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "defaultValue":
    case "defaultChecked":
    case "innerHTML":
    case "ref":
      break;
    case "autoFocus":
      break;
    case "xlinkHref":
      if (
        null == value ||
        "function" === typeof value ||
        "boolean" === typeof value ||
        "symbol" === typeof value
      ) {
        domElement.removeAttribute("xlink:href");
        break;
      }
      key = sanitizeURL("" + value);
      domElement.setAttributeNS(
        "http://www.w3.org/1999/xlink",
        "xlink:href",
        key
      );
      break;
    case "contentEditable":
    case "spellCheck":
    case "draggable":
    case "value":
    case "autoReverse":
    case "externalResourcesRequired":
    case "focusable":
    case "preserveAlpha":
      null != value && "function" !== typeof value && "symbol" !== typeof value
        ? domElement.setAttribute(key, "" + value)
        : domElement.removeAttribute(key);
      break;
    case "inert":
    case "allowFullScreen":
    case "async":
    case "autoPlay":
    case "controls":
    case "default":
    case "defer":
    case "disabled":
    case "disablePictureInPicture":
    case "disableRemotePlayback":
    case "formNoValidate":
    case "hidden":
    case "loop":
    case "noModule":
    case "noValidate":
    case "open":
    case "playsInline":
    case "readOnly":
    case "required":
    case "reversed":
    case "scoped":
    case "seamless":
    case "itemScope":
      value && "function" !== typeof value && "symbol" !== typeof value
        ? domElement.setAttribute(key, "")
        : domElement.removeAttribute(key);
      break;
    case "capture":
    case "download":
      !0 === value
        ? domElement.setAttribute(key, "")
        : !1 !== value &&
            null != value &&
            "function" !== typeof value &&
            "symbol" !== typeof value
          ? domElement.setAttribute(key, value)
          : domElement.removeAttribute(key);
      break;
    case "cols":
    case "rows":
    case "size":
    case "span":
      null != value &&
      "function" !== typeof value &&
      "symbol" !== typeof value &&
      !isNaN(value) &&
      1 <= value
        ? domElement.setAttribute(key, value)
        : domElement.removeAttribute(key);
      break;
    case "rowSpan":
    case "start":
      null == value ||
      "function" === typeof value ||
      "symbol" === typeof value ||
      isNaN(value)
        ? domElement.removeAttribute(key)
        : domElement.setAttribute(key, value);
      break;
    case "popover":
      listenToNonDelegatedEvent("beforetoggle", domElement);
      listenToNonDelegatedEvent("toggle", domElement);
      setValueForAttribute(domElement, "popover", value);
      break;
    case "xlinkActuate":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:actuate",
        value
      );
      break;
    case "xlinkArcrole":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:arcrole",
        value
      );
      break;
    case "xlinkRole":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:role",
        value
      );
      break;
    case "xlinkShow":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:show",
        value
      );
      break;
    case "xlinkTitle":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:title",
        value
      );
      break;
    case "xlinkType":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/1999/xlink",
        "xlink:type",
        value
      );
      break;
    case "xmlBase":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/XML/1998/namespace",
        "xml:base",
        value
      );
      break;
    case "xmlLang":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/XML/1998/namespace",
        "xml:lang",
        value
      );
      break;
    case "xmlSpace":
      setValueForNamespacedAttribute(
        domElement,
        "http://www.w3.org/XML/1998/namespace",
        "xml:space",
        value
      );
      break;
    case "is":
      setValueForAttribute(domElement, "is", value);
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      if (
        !(2 < key.length) ||
        ("o" !== key[0] && "O" !== key[0]) ||
        ("n" !== key[1] && "N" !== key[1])
      )
        (key = aliases.get(key) || key),
          setValueForAttribute(domElement, key, value);
  }
}
function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
  switch (key) {
    case "style":
      setValueForStyles(domElement, value, prevValue);
      break;
    case "dangerouslySetInnerHTML":
      if (null != value) {
        if ("object" !== typeof value || !("__html" in value))
          throw Error(formatProdErrorMessage(61));
        key = value.__html;
        if (null != key) {
          if (null != props.children) throw Error(formatProdErrorMessage(60));
          domElement.innerHTML = key;
        }
      }
      break;
    case "children":
      "string" === typeof value
        ? setTextContent(domElement, value)
        : ("number" === typeof value || "bigint" === typeof value) &&
          setTextContent(domElement, "" + value);
      break;
    case "onScroll":
      null != value && listenToNonDelegatedEvent("scroll", domElement);
      break;
    case "onScrollEnd":
      null != value && listenToNonDelegatedEvent("scrollend", domElement);
      break;
    case "onClick":
      null != value && (domElement.onclick = noop$1);
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "innerHTML":
    case "ref":
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      if (!registrationNameDependencies.hasOwnProperty(key))
        a: {
          if (
            "o" === key[0] &&
            "n" === key[1] &&
            ((props = key.endsWith("Capture")),
            (tag = key.slice(2, props ? key.length - 7 : void 0)),
            (prevValue = domElement[internalPropsKey] || null),
            (prevValue = null != prevValue ? prevValue[key] : null),
            "function" === typeof prevValue &&
              domElement.removeEventListener(tag, prevValue, props),
            "function" === typeof value)
          ) {
            "function" !== typeof prevValue &&
              null !== prevValue &&
              (key in domElement
                ? (domElement[key] = null)
                : domElement.hasAttribute(key) &&
                  domElement.removeAttribute(key));
            domElement.addEventListener(tag, value, props);
            break a;
          }
          key in domElement
            ? (domElement[key] = value)
            : !0 === value
              ? domElement.setAttribute(key, "")
              : setValueForAttribute(domElement, key, value);
        }
  }
}
function setInitialProperties(domElement, tag, props) {
  switch (tag) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "img":
      listenToNonDelegatedEvent("error", domElement);
      listenToNonDelegatedEvent("load", domElement);
      var hasSrc = !1,
        hasSrcSet = !1,
        propKey;
      for (propKey in props)
        if (props.hasOwnProperty(propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "src":
                hasSrc = !0;
                break;
              case "srcSet":
                hasSrcSet = !0;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(formatProdErrorMessage(137, tag));
              default:
                setProp(domElement, tag, propKey, propValue, props, null);
            }
        }
      hasSrcSet &&
        setProp(domElement, tag, "srcSet", props.srcSet, props, null);
      hasSrc && setProp(domElement, tag, "src", props.src, props, null);
      return;
    case "input":
      listenToNonDelegatedEvent("invalid", domElement);
      var defaultValue = (propKey = propValue = hasSrcSet = null),
        checked = null,
        defaultChecked = null;
      for (hasSrc in props)
        if (props.hasOwnProperty(hasSrc)) {
          var propValue$186 = props[hasSrc];
          if (null != propValue$186)
            switch (hasSrc) {
              case "name":
                hasSrcSet = propValue$186;
                break;
              case "type":
                propValue = propValue$186;
                break;
              case "checked":
                checked = propValue$186;
                break;
              case "defaultChecked":
                defaultChecked = propValue$186;
                break;
              case "value":
                propKey = propValue$186;
                break;
              case "defaultValue":
                defaultValue = propValue$186;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (null != propValue$186)
                  throw Error(formatProdErrorMessage(137, tag));
                break;
              default:
                setProp(domElement, tag, hasSrc, propValue$186, props, null);
            }
        }
      initInput(
        domElement,
        propKey,
        defaultValue,
        checked,
        defaultChecked,
        propValue,
        hasSrcSet,
        !1
      );
      track(domElement);
      return;
    case "select":
      listenToNonDelegatedEvent("invalid", domElement);
      hasSrc = propValue = propKey = null;
      for (hasSrcSet in props)
        if (
          props.hasOwnProperty(hasSrcSet) &&
          ((defaultValue = props[hasSrcSet]), null != defaultValue)
        )
          switch (hasSrcSet) {
            case "value":
              propKey = defaultValue;
              break;
            case "defaultValue":
              propValue = defaultValue;
              break;
            case "multiple":
              hasSrc = defaultValue;
            default:
              setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
          }
      tag = propKey;
      props = propValue;
      domElement.multiple = !!hasSrc;
      null != tag
        ? updateOptions(domElement, !!hasSrc, tag, !1)
        : null != props && updateOptions(domElement, !!hasSrc, props, !0);
      return;
    case "textarea":
      listenToNonDelegatedEvent("invalid", domElement);
      propKey = hasSrcSet = hasSrc = null;
      for (propValue in props)
        if (
          props.hasOwnProperty(propValue) &&
          ((defaultValue = props[propValue]), null != defaultValue)
        )
          switch (propValue) {
            case "value":
              hasSrc = defaultValue;
              break;
            case "defaultValue":
              hasSrcSet = defaultValue;
              break;
            case "children":
              propKey = defaultValue;
              break;
            case "dangerouslySetInnerHTML":
              if (null != defaultValue) throw Error(formatProdErrorMessage(91));
              break;
            default:
              setProp(domElement, tag, propValue, defaultValue, props, null);
          }
      initTextarea(domElement, hasSrc, hasSrcSet, propKey);
      track(domElement);
      return;
    case "option":
      for (checked in props)
        if (
          props.hasOwnProperty(checked) &&
          ((hasSrc = props[checked]), null != hasSrc)
        )
          switch (checked) {
            case "selected":
              domElement.selected =
                hasSrc &&
                "function" !== typeof hasSrc &&
                "symbol" !== typeof hasSrc;
              break;
            default:
              setProp(domElement, tag, checked, hasSrc, props, null);
          }
      return;
    case "dialog":
      listenToNonDelegatedEvent("cancel", domElement);
      listenToNonDelegatedEvent("close", domElement);
      break;
    case "iframe":
    case "object":
      listenToNonDelegatedEvent("load", domElement);
      break;
    case "video":
    case "audio":
      for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
        listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
      break;
    case "image":
      listenToNonDelegatedEvent("error", domElement);
      listenToNonDelegatedEvent("load", domElement);
      break;
    case "details":
      listenToNonDelegatedEvent("toggle", domElement);
      break;
    case "embed":
    case "source":
    case "link":
      listenToNonDelegatedEvent("error", domElement),
        listenToNonDelegatedEvent("load", domElement);
    case "area":
    case "base":
    case "br":
    case "col":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "track":
    case "wbr":
    case "menuitem":
      for (defaultChecked in props)
        if (
          props.hasOwnProperty(defaultChecked) &&
          ((hasSrc = props[defaultChecked]), null != hasSrc)
        )
          switch (defaultChecked) {
            case "children":
            case "dangerouslySetInnerHTML":
              throw Error(formatProdErrorMessage(137, tag));
            default:
              setProp(domElement, tag, defaultChecked, hasSrc, props, null);
          }
      return;
    default:
      if (isCustomElement(tag)) {
        for (propValue$186 in props)
          props.hasOwnProperty(propValue$186) &&
            ((hasSrc = props[propValue$186]),
            void 0 !== hasSrc &&
              setPropOnCustomElement(
                domElement,
                tag,
                propValue$186,
                hasSrc,
                props,
                void 0
              ));
        return;
      }
  }
  for (defaultValue in props)
    props.hasOwnProperty(defaultValue) &&
      ((hasSrc = props[defaultValue]),
      null != hasSrc &&
        setProp(domElement, tag, defaultValue, hasSrc, props, null));
}
function updateProperties(domElement, tag, lastProps, nextProps) {
  switch (tag) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "input":
      var name = null,
        type = null,
        value = null,
        defaultValue = null,
        lastDefaultValue = null,
        checked = null,
        defaultChecked = null;
      for (propKey in lastProps) {
        var lastProp = lastProps[propKey];
        if (lastProps.hasOwnProperty(propKey) && null != lastProp)
          switch (propKey) {
            case "checked":
              break;
            case "value":
              break;
            case "defaultValue":
              lastDefaultValue = lastProp;
            default:
              nextProps.hasOwnProperty(propKey) ||
                setProp(domElement, tag, propKey, null, nextProps, lastProp);
          }
      }
      for (var propKey$203 in nextProps) {
        var propKey = nextProps[propKey$203];
        lastProp = lastProps[propKey$203];
        if (
          nextProps.hasOwnProperty(propKey$203) &&
          (null != propKey || null != lastProp)
        )
          switch (propKey$203) {
            case "type":
              type = propKey;
              break;
            case "name":
              name = propKey;
              break;
            case "checked":
              checked = propKey;
              break;
            case "defaultChecked":
              defaultChecked = propKey;
              break;
            case "value":
              value = propKey;
              break;
            case "defaultValue":
              defaultValue = propKey;
              break;
            case "children":
            case "dangerouslySetInnerHTML":
              if (null != propKey)
                throw Error(formatProdErrorMessage(137, tag));
              break;
            default:
              propKey !== lastProp &&
                setProp(
                  domElement,
                  tag,
                  propKey$203,
                  propKey,
                  nextProps,
                  lastProp
                );
          }
      }
      updateInput(
        domElement,
        value,
        defaultValue,
        lastDefaultValue,
        checked,
        defaultChecked,
        type,
        name
      );
      return;
    case "select":
      propKey = value = defaultValue = propKey$203 = null;
      for (type in lastProps)
        if (
          ((lastDefaultValue = lastProps[type]),
          lastProps.hasOwnProperty(type) && null != lastDefaultValue)
        )
          switch (type) {
            case "value":
              break;
            case "multiple":
              propKey = lastDefaultValue;
            default:
              nextProps.hasOwnProperty(type) ||
                setProp(
                  domElement,
                  tag,
                  type,
                  null,
                  nextProps,
                  lastDefaultValue
                );
          }
      for (name in nextProps)
        if (
          ((type = nextProps[name]),
          (lastDefaultValue = lastProps[name]),
          nextProps.hasOwnProperty(name) &&
            (null != type || null != lastDefaultValue))
        )
          switch (name) {
            case "value":
              propKey$203 = type;
              break;
            case "defaultValue":
              defaultValue = type;
              break;
            case "multiple":
              value = type;
            default:
              type !== lastDefaultValue &&
                setProp(
                  domElement,
                  tag,
                  name,
                  type,
                  nextProps,
                  lastDefaultValue
                );
          }
      tag = defaultValue;
      lastProps = value;
      nextProps = propKey;
      null != propKey$203
        ? updateOptions(domElement, !!lastProps, propKey$203, !1)
        : !!nextProps !== !!lastProps &&
          (null != tag
            ? updateOptions(domElement, !!lastProps, tag, !0)
            : updateOptions(domElement, !!lastProps, lastProps ? [] : "", !1));
      return;
    case "textarea":
      propKey = propKey$203 = null;
      for (defaultValue in lastProps)
        if (
          ((name = lastProps[defaultValue]),
          lastProps.hasOwnProperty(defaultValue) &&
            null != name &&
            !nextProps.hasOwnProperty(defaultValue))
        )
          switch (defaultValue) {
            case "value":
              break;
            case "children":
              break;
            default:
              setProp(domElement, tag, defaultValue, null, nextProps, name);
          }
      for (value in nextProps)
        if (
          ((name = nextProps[value]),
          (type = lastProps[value]),
          nextProps.hasOwnProperty(value) && (null != name || null != type))
        )
          switch (value) {
            case "value":
              propKey$203 = name;
              break;
            case "defaultValue":
              propKey = name;
              break;
            case "children":
              break;
            case "dangerouslySetInnerHTML":
              if (null != name) throw Error(formatProdErrorMessage(91));
              break;
            default:
              name !== type &&
                setProp(domElement, tag, value, name, nextProps, type);
          }
      updateTextarea(domElement, propKey$203, propKey);
      return;
    case "option":
      for (var propKey$219 in lastProps)
        if (
          ((propKey$203 = lastProps[propKey$219]),
          lastProps.hasOwnProperty(propKey$219) &&
            null != propKey$203 &&
            !nextProps.hasOwnProperty(propKey$219))
        )
          switch (propKey$219) {
            case "selected":
              domElement.selected = !1;
              break;
            default:
              setProp(
                domElement,
                tag,
                propKey$219,
                null,
                nextProps,
                propKey$203
              );
          }
      for (lastDefaultValue in nextProps)
        if (
          ((propKey$203 = nextProps[lastDefaultValue]),
          (propKey = lastProps[lastDefaultValue]),
          nextProps.hasOwnProperty(lastDefaultValue) &&
            propKey$203 !== propKey &&
            (null != propKey$203 || null != propKey))
        )
          switch (lastDefaultValue) {
            case "selected":
              domElement.selected =
                propKey$203 &&
                "function" !== typeof propKey$203 &&
                "symbol" !== typeof propKey$203;
              break;
            default:
              setProp(
                domElement,
                tag,
                lastDefaultValue,
                propKey$203,
                nextProps,
                propKey
              );
          }
      return;
    case "img":
    case "link":
    case "area":
    case "base":
    case "br":
    case "col":
    case "embed":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "source":
    case "track":
    case "wbr":
    case "menuitem":
      for (var propKey$224 in lastProps)
        (propKey$203 = lastProps[propKey$224]),
          lastProps.hasOwnProperty(propKey$224) &&
            null != propKey$203 &&
            !nextProps.hasOwnProperty(propKey$224) &&
            setProp(domElement, tag, propKey$224, null, nextProps, propKey$203);
      for (checked in nextProps)
        if (
          ((propKey$203 = nextProps[checked]),
          (propKey = lastProps[checked]),
          nextProps.hasOwnProperty(checked) &&
            propKey$203 !== propKey &&
            (null != propKey$203 || null != propKey))
        )
          switch (checked) {
            case "children":
            case "dangerouslySetInnerHTML":
              if (null != propKey$203)
                throw Error(formatProdErrorMessage(137, tag));
              break;
            default:
              setProp(
                domElement,
                tag,
                checked,
                propKey$203,
                nextProps,
                propKey
              );
          }
      return;
    default:
      if (isCustomElement(tag)) {
        for (var propKey$229 in lastProps)
          (propKey$203 = lastProps[propKey$229]),
            lastProps.hasOwnProperty(propKey$229) &&
              void 0 !== propKey$203 &&
              !nextProps.hasOwnProperty(propKey$229) &&
              setPropOnCustomElement(
                domElement,
                tag,
                propKey$229,
                void 0,
                nextProps,
                propKey$203
              );
        for (defaultChecked in nextProps)
          (propKey$203 = nextProps[defaultChecked]),
            (propKey = lastProps[defaultChecked]),
            !nextProps.hasOwnProperty(defaultChecked) ||
              propKey$203 === propKey ||
              (void 0 === propKey$203 && void 0 === propKey) ||
              setPropOnCustomElement(
                domElement,
                tag,
                defaultChecked,
                propKey$203,
                nextProps,
                propKey
              );
        return;
      }
  }
  for (var propKey$234 in lastProps)
    (propKey$203 = lastProps[propKey$234]),
      lastProps.hasOwnProperty(propKey$234) &&
        null != propKey$203 &&
        !nextProps.hasOwnProperty(propKey$234) &&
        setProp(domElement, tag, propKey$234, null, nextProps, propKey$203);
  for (lastProp in nextProps)
    (propKey$203 = nextProps[lastProp]),
      (propKey = lastProps[lastProp]),
      !nextProps.hasOwnProperty(lastProp) ||
        propKey$203 === propKey ||
        (null == propKey$203 && null == propKey) ||
        setProp(domElement, tag, lastProp, propKey$203, nextProps, propKey);
}
var eventsEnabled = null,
  selectionInformation = null;
function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return 9 === rootContainerElement.nodeType
    ? rootContainerElement
    : rootContainerElement.ownerDocument;
}
function getOwnHostContext(namespaceURI) {
  switch (namespaceURI) {
    case "http://www.w3.org/2000/svg":
      return 1;
    case "http://www.w3.org/1998/Math/MathML":
      return 2;
    default:
      return 0;
  }
}
function getChildHostContextProd(parentNamespace, type) {
  if (0 === parentNamespace)
    switch (type) {
      case "svg":
        return 1;
      case "math":
        return 2;
      default:
        return 0;
    }
  return 1 === parentNamespace && "foreignObject" === type
    ? 0
    : parentNamespace;
}
function shouldSetTextContent(type, props) {
  return (
    "textarea" === type ||
    "noscript" === type ||
    "string" === typeof props.children ||
    "number" === typeof props.children ||
    "bigint" === typeof props.children ||
    ("object" === typeof props.dangerouslySetInnerHTML &&
      null !== props.dangerouslySetInnerHTML &&
      null != props.dangerouslySetInnerHTML.__html)
  );
}
var currentPopstateTransitionEvent = null;
function shouldAttemptEagerTransition() {
  var event = window.event;
  if (event && "popstate" === event.type) {
    if (event === currentPopstateTransitionEvent) return !1;
    currentPopstateTransitionEvent = event;
    return !0;
  }
  currentPopstateTransitionEvent = null;
  return !1;
}
var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0,
  cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0,
  localPromise = "function" === typeof Promise ? Promise : void 0,
  scheduleMicrotask =
    "function" === typeof queueMicrotask
      ? queueMicrotask
      : "undefined" !== typeof localPromise
        ? function (callback) {
            return localPromise
              .resolve(null)
              .then(callback)
              .catch(handleErrorInNextTick);
          }
        : scheduleTimeout;
function handleErrorInNextTick(error) {
  setTimeout(function () {
    throw error;
  });
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance,
    depth = 0;
  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);
    if (nextNode && 8 === nextNode.nodeType)
      if (((node = nextNode.data), "/$" === node)) {
        if (0 === depth) {
          parentInstance.removeChild(nextNode);
          retryIfBlockedOn(suspenseInstance);
          return;
        }
        depth--;
      } else ("$" !== node && "$?" !== node && "$!" !== node) || depth++;
    node = nextNode;
  } while (node);
  retryIfBlockedOn(suspenseInstance);
}
function clearContainerSparingly(container) {
  var nextNode = container.firstChild;
  nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
  for (; nextNode; ) {
    var node = nextNode;
    nextNode = nextNode.nextSibling;
    switch (node.nodeName) {
      case "HTML":
      case "HEAD":
      case "BODY":
        clearContainerSparingly(node);
        detachDeletedInstance(node);
        continue;
      case "SCRIPT":
      case "STYLE":
        continue;
      case "LINK":
        if ("stylesheet" === node.rel.toLowerCase()) continue;
    }
    container.removeChild(node);
  }
}
function canHydrateInstance(instance, type, props, inRootOrSingleton) {
  for (; 1 === instance.nodeType; ) {
    var anyProps = props;
    if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
      if (
        !inRootOrSingleton &&
        ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
      )
        break;
    } else if (!inRootOrSingleton)
      if ("input" === type && "hidden" === instance.type) {
        var name = null == anyProps.name ? null : "" + anyProps.name;
        if (
          "hidden" === anyProps.type &&
          instance.getAttribute("name") === name
        )
          return instance;
      } else return instance;
    else if (!instance[internalHoistableMarker])
      switch (type) {
        case "meta":
          if (!instance.hasAttribute("itemprop")) break;
          return instance;
        case "link":
          name = instance.getAttribute("rel");
          if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
            break;
          else if (
            name !== anyProps.rel ||
            instance.getAttribute("href") !==
              (null == anyProps.href ? null : anyProps.href) ||
            instance.getAttribute("crossorigin") !==
              (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) ||
            instance.getAttribute("title") !==
              (null == anyProps.title ? null : anyProps.title)
          )
            break;
          return instance;
        case "style":
          if (instance.hasAttribute("data-precedence")) break;
          return instance;
        case "script":
          name = instance.getAttribute("src");
          if (
            (name !== (null == anyProps.src ? null : anyProps.src) ||
              instance.getAttribute("type") !==
                (null == anyProps.type ? null : anyProps.type) ||
              instance.getAttribute("crossorigin") !==
                (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) &&
            name &&
            instance.hasAttribute("async") &&
            !instance.hasAttribute("itemprop")
          )
            break;
          return instance;
        default:
          return instance;
      }
    instance = getNextHydratable(instance.nextSibling);
    if (null === instance) break;
  }
  return null;
}
function canHydrateTextInstance(instance, text, inRootOrSingleton) {
  if ("" === text) return null;
  for (; 3 !== instance.nodeType; ) {
    if (
      (1 !== instance.nodeType ||
        "INPUT" !== instance.nodeName ||
        "hidden" !== instance.type) &&
      !inRootOrSingleton
    )
      return null;
    instance = getNextHydratable(instance.nextSibling);
    if (null === instance) return null;
  }
  return instance;
}
function getNextHydratable(node) {
  for (; null != node; node = node.nextSibling) {
    var nodeType = node.nodeType;
    if (1 === nodeType || 3 === nodeType) break;
    if (8 === nodeType) {
      nodeType = node.data;
      if (
        "$" === nodeType ||
        "$!" === nodeType ||
        "$?" === nodeType ||
        "F!" === nodeType ||
        "F" === nodeType
      )
        break;
      if ("/$" === nodeType) return null;
    }
  }
  return node;
}
function getParentSuspenseInstance(targetInstance) {
  targetInstance = targetInstance.previousSibling;
  for (var depth = 0; targetInstance; ) {
    if (8 === targetInstance.nodeType) {
      var data = targetInstance.data;
      if ("$" === data || "$!" === data || "$?" === data) {
        if (0 === depth) return targetInstance;
        depth--;
      } else "/$" === data && depth++;
    }
    targetInstance = targetInstance.previousSibling;
  }
  return null;
}
function resolveSingletonInstance(type, props, rootContainerInstance) {
  props = getOwnerDocumentFromRootContainer(rootContainerInstance);
  switch (type) {
    case "html":
      type = props.documentElement;
      if (!type) throw Error(formatProdErrorMessage(452));
      return type;
    case "head":
      type = props.head;
      if (!type) throw Error(formatProdErrorMessage(453));
      return type;
    case "body":
      type = props.body;
      if (!type) throw Error(formatProdErrorMessage(454));
      return type;
    default:
      throw Error(formatProdErrorMessage(451));
  }
}
var preloadPropsMap = new Map(),
  preconnectsSet = new Set();
function getHoistableRoot(container) {
  return "function" === typeof container.getRootNode
    ? container.getRootNode()
    : container.ownerDocument;
}
var previousDispatcher = ReactDOMSharedInternals.d;
ReactDOMSharedInternals.d = {
  f: flushSyncWork,
  r: requestFormReset,
  D: prefetchDNS,
  C: preconnect,
  L: preload,
  m: preloadModule,
  X: preinitScript,
  S: preinitStyle,
  M: preinitModuleScript
};
function flushSyncWork() {
  var previousWasRendering = previousDispatcher.f(),
    wasRendering = flushSyncWork$1();
  return previousWasRendering || wasRendering;
}
function requestFormReset(form) {
  var formInst = getInstanceFromNode(form);
  null !== formInst && 5 === formInst.tag && "form" === formInst.type
    ? requestFormReset$1(formInst)
    : previousDispatcher.r(form);
}
var globalDocument = "undefined" === typeof document ? null : document;
function preconnectAs(rel, href, crossOrigin) {
  var ownerDocument = globalDocument;
  if (ownerDocument && "string" === typeof href && href) {
    var limitedEscapedHref =
      escapeSelectorAttributeValueInsideDoubleQuotes(href);
    limitedEscapedHref =
      'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
    "string" === typeof crossOrigin &&
      (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
    preconnectsSet.has(limitedEscapedHref) ||
      (preconnectsSet.add(limitedEscapedHref),
      (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
      null === ownerDocument.querySelector(limitedEscapedHref) &&
        ((href = ownerDocument.createElement("link")),
        setInitialProperties(href, "link", rel),
        markNodeAsHoistable(href),
        ownerDocument.head.appendChild(href)));
  }
}
function prefetchDNS(href) {
  previousDispatcher.D(href);
  preconnectAs("dns-prefetch", href, null);
}
function preconnect(href, crossOrigin) {
  previousDispatcher.C(href, crossOrigin);
  preconnectAs("preconnect", href, crossOrigin);
}
function preload(href, as, options) {
  previousDispatcher.L(href, as, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href && as) {
    var preloadSelector =
      'link[rel="preload"][as="' +
      escapeSelectorAttributeValueInsideDoubleQuotes(as) +
      '"]';
    "image" === as
      ? options && options.imageSrcSet
        ? ((preloadSelector +=
            '[imagesrcset="' +
            escapeSelectorAttributeValueInsideDoubleQuotes(
              options.imageSrcSet
            ) +
            '"]'),
          "string" === typeof options.imageSizes &&
            (preloadSelector +=
              '[imagesizes="' +
              escapeSelectorAttributeValueInsideDoubleQuotes(
                options.imageSizes
              ) +
              '"]'))
        : (preloadSelector +=
            '[href="' +
            escapeSelectorAttributeValueInsideDoubleQuotes(href) +
            '"]')
      : (preloadSelector +=
          '[href="' +
          escapeSelectorAttributeValueInsideDoubleQuotes(href) +
          '"]');
    var key = preloadSelector;
    switch (as) {
      case "style":
        key = getStyleKey(href);
        break;
      case "script":
        key = getScriptKey(href);
    }
    preloadPropsMap.has(key) ||
      ((href = assign(
        {
          rel: "preload",
          href:
            "image" === as && options && options.imageSrcSet ? void 0 : href,
          as: as
        },
        options
      )),
      preloadPropsMap.set(key, href),
      null !== ownerDocument.querySelector(preloadSelector) ||
        ("style" === as &&
          ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) ||
        ("script" === as &&
          ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
        ((as = ownerDocument.createElement("link")),
        setInitialProperties(as, "link", href),
        markNodeAsHoistable(as),
        ownerDocument.head.appendChild(as)));
  }
}
function preloadModule(href, options) {
  previousDispatcher.m(href, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href) {
    var as = options && "string" === typeof options.as ? options.as : "script",
      preloadSelector =
        'link[rel="modulepreload"][as="' +
        escapeSelectorAttributeValueInsideDoubleQuotes(as) +
        '"][href="' +
        escapeSelectorAttributeValueInsideDoubleQuotes(href) +
        '"]',
      key = preloadSelector;
    switch (as) {
      case "audioworklet":
      case "paintworklet":
      case "serviceworker":
      case "sharedworker":
      case "worker":
      case "script":
        key = getScriptKey(href);
    }
    if (
      !preloadPropsMap.has(key) &&
      ((href = assign({ rel: "modulepreload", href: href }, options)),
      preloadPropsMap.set(key, href),
      null === ownerDocument.querySelector(preloadSelector))
    ) {
      switch (as) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
            return;
      }
      as = ownerDocument.createElement("link");
      setInitialProperties(as, "link", href);
      markNodeAsHoistable(as);
      ownerDocument.head.appendChild(as);
    }
  }
}
function preinitStyle(href, precedence, options) {
  previousDispatcher.S(href, precedence, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href) {
    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
      key = getStyleKey(href);
    precedence = precedence || "default";
    var resource = styles.get(key);
    if (!resource) {
      var state = { loading: 0, preload: null };
      if (
        (resource = ownerDocument.querySelector(
          getStylesheetSelectorFromKey(key)
        ))
      )
        state.loading = 5;
      else {
        href = assign(
          { rel: "stylesheet", href: href, "data-precedence": precedence },
          options
        );
        (options = preloadPropsMap.get(key)) &&
          adoptPreloadPropsForStylesheet(href, options);
        var link = (resource = ownerDocument.createElement("link"));
        markNodeAsHoistable(link);
        setInitialProperties(link, "link", href);
        link._p = new Promise(function (resolve, reject) {
          link.onload = resolve;
          link.onerror = reject;
        });
        link.addEventListener("load", function () {
          state.loading |= 1;
        });
        link.addEventListener("error", function () {
          state.loading |= 2;
        });
        state.loading |= 4;
        insertStylesheet(resource, precedence, ownerDocument);
      }
      resource = {
        type: "stylesheet",
        instance: resource,
        count: 1,
        state: state
      };
      styles.set(key, resource);
    }
  }
}
function preinitScript(src, options) {
  previousDispatcher.X(src, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && src) {
    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
      key = getScriptKey(src),
      resource = scripts.get(key);
    resource ||
      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
      resource ||
        ((src = assign({ src: src, async: !0 }, options)),
        (options = preloadPropsMap.get(key)) &&
          adoptPreloadPropsForScript(src, options),
        (resource = ownerDocument.createElement("script")),
        markNodeAsHoistable(resource),
        setInitialProperties(resource, "link", src),
        ownerDocument.head.appendChild(resource)),
      (resource = {
        type: "script",
        instance: resource,
        count: 1,
        state: null
      }),
      scripts.set(key, resource));
  }
}
function preinitModuleScript(src, options) {
  previousDispatcher.M(src, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && src) {
    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
      key = getScriptKey(src),
      resource = scripts.get(key);
    resource ||
      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
      resource ||
        ((src = assign({ src: src, async: !0, type: "module" }, options)),
        (options = preloadPropsMap.get(key)) &&
          adoptPreloadPropsForScript(src, options),
        (resource = ownerDocument.createElement("script")),
        markNodeAsHoistable(resource),
        setInitialProperties(resource, "link", src),
        ownerDocument.head.appendChild(resource)),
      (resource = {
        type: "script",
        instance: resource,
        count: 1,
        state: null
      }),
      scripts.set(key, resource));
  }
}
function getResource(type, currentProps, pendingProps, currentResource) {
  var JSCompiler_inline_result = (JSCompiler_inline_result =
    rootInstanceStackCursor.current)
    ? getHoistableRoot(JSCompiler_inline_result)
    : null;
  if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
  switch (type) {
    case "meta":
    case "title":
      return null;
    case "style":
      return "string" === typeof pendingProps.precedence &&
        "string" === typeof pendingProps.href
        ? ((currentProps = getStyleKey(pendingProps.href)),
          (pendingProps = getResourcesFromRoot(
            JSCompiler_inline_result
          ).hoistableStyles),
          (currentResource = pendingProps.get(currentProps)),
          currentResource ||
            ((currentResource = {
              type: "style",
              instance: null,
              count: 0,
              state: null
            }),
            pendingProps.set(currentProps, currentResource)),
          currentResource)
        : { type: "void", instance: null, count: 0, state: null };
    case "link":
      if (
        "stylesheet" === pendingProps.rel &&
        "string" === typeof pendingProps.href &&
        "string" === typeof pendingProps.precedence
      ) {
        type = getStyleKey(pendingProps.href);
        var styles$242 = getResourcesFromRoot(
            JSCompiler_inline_result
          ).hoistableStyles,
          resource$243 = styles$242.get(type);
        resource$243 ||
          ((JSCompiler_inline_result =
            JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result),
          (resource$243 = {
            type: "stylesheet",
            instance: null,
            count: 0,
            state: { loading: 0, preload: null }
          }),
          styles$242.set(type, resource$243),
          (styles$242 = JSCompiler_inline_result.querySelector(
            getStylesheetSelectorFromKey(type)
          )) &&
            !styles$242._p &&
            ((resource$243.instance = styles$242),
            (resource$243.state.loading = 5)),
          preloadPropsMap.has(type) ||
            ((pendingProps = {
              rel: "preload",
              as: "style",
              href: pendingProps.href,
              crossOrigin: pendingProps.crossOrigin,
              integrity: pendingProps.integrity,
              media: pendingProps.media,
              hrefLang: pendingProps.hrefLang,
              referrerPolicy: pendingProps.referrerPolicy
            }),
            preloadPropsMap.set(type, pendingProps),
            styles$242 ||
              preloadStylesheet(
                JSCompiler_inline_result,
                type,
                pendingProps,
                resource$243.state
              )));
        if (currentProps && null === currentResource)
          throw Error(formatProdErrorMessage(528, ""));
        return resource$243;
      }
      if (currentProps && null !== currentResource)
        throw Error(formatProdErrorMessage(529, ""));
      return null;
    case "script":
      return (
        (currentProps = pendingProps.async),
        (pendingProps = pendingProps.src),
        "string" === typeof pendingProps &&
        currentProps &&
        "function" !== typeof currentProps &&
        "symbol" !== typeof currentProps
          ? ((currentProps = getScriptKey(pendingProps)),
            (pendingProps = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableScripts),
            (currentResource = pendingProps.get(currentProps)),
            currentResource ||
              ((currentResource = {
                type: "script",
                instance: null,
                count: 0,
                state: null
              }),
              pendingProps.set(currentProps, currentResource)),
            currentResource)
          : { type: "void", instance: null, count: 0, state: null }
      );
    default:
      throw Error(formatProdErrorMessage(444, type));
  }
}
function getStyleKey(href) {
  return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
}
function getStylesheetSelectorFromKey(key) {
  return 'link[rel="stylesheet"][' + key + "]";
}
function stylesheetPropsFromRawProps(rawProps) {
  return assign({}, rawProps, {
    "data-precedence": rawProps.precedence,
    precedence: null
  });
}
function preloadStylesheet(ownerDocument, key, preloadProps, state) {
  ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]")
    ? (state.loading = 1)
    : ((key = ownerDocument.createElement("link")),
      (state.preload = key),
      key.addEventListener("load", function () {
        return (state.loading |= 1);
      }),
      key.addEventListener("error", function () {
        return (state.loading |= 2);
      }),
      setInitialProperties(key, "link", preloadProps),
      markNodeAsHoistable(key),
      ownerDocument.head.appendChild(key));
}
function getScriptKey(src) {
  return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
}
function getScriptSelectorFromKey(key) {
  return "script[async]" + key;
}
function acquireResource(hoistableRoot, resource, props) {
  resource.count++;
  if (null === resource.instance)
    switch (resource.type) {
      case "style":
        var instance = hoistableRoot.querySelector(
          'style[data-href~="' +
            escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
            '"]'
        );
        if (instance)
          return (
            (resource.instance = instance),
            markNodeAsHoistable(instance),
            instance
          );
        var styleProps = assign({}, props, {
          "data-href": props.href,
          "data-precedence": props.precedence,
          href: null,
          precedence: null
        });
        instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
          "style"
        );
        markNodeAsHoistable(instance);
        setInitialProperties(instance, "style", styleProps);
        insertStylesheet(instance, props.precedence, hoistableRoot);
        return (resource.instance = instance);
      case "stylesheet":
        styleProps = getStyleKey(props.href);
        var instance$248 = hoistableRoot.querySelector(
          getStylesheetSelectorFromKey(styleProps)
        );
        if (instance$248)
          return (
            (resource.state.loading |= 4),
            (resource.instance = instance$248),
            markNodeAsHoistable(instance$248),
            instance$248
          );
        instance = stylesheetPropsFromRawProps(props);
        (styleProps = preloadPropsMap.get(styleProps)) &&
          adoptPreloadPropsForStylesheet(instance, styleProps);
        instance$248 = (
          hoistableRoot.ownerDocument || hoistableRoot
        ).createElement("link");
        markNodeAsHoistable(instance$248);
        var linkInstance = instance$248;
        linkInstance._p = new Promise(function (resolve, reject) {
          linkInstance.onload = resolve;
          linkInstance.onerror = reject;
        });
        setInitialProperties(instance$248, "link", instance);
        resource.state.loading |= 4;
        insertStylesheet(instance$248, props.precedence, hoistableRoot);
        return (resource.instance = instance$248);
      case "script":
        instance$248 = getScriptKey(props.src);
        if (
          (styleProps = hoistableRoot.querySelector(
            getScriptSelectorFromKey(instance$248)
          ))
        )
          return (
            (resource.instance = styleProps),
            markNodeAsHoistable(styleProps),
            styleProps
          );
        instance = props;
        if ((styleProps = preloadPropsMap.get(instance$248)))
          (instance = assign({}, props)),
            adoptPreloadPropsForScript(instance, styleProps);
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        styleProps = hoistableRoot.createElement("script");
        markNodeAsHoistable(styleProps);
        setInitialProperties(styleProps, "link", instance);
        hoistableRoot.head.appendChild(styleProps);
        return (resource.instance = styleProps);
      case "void":
        return null;
      default:
        throw Error(formatProdErrorMessage(443, resource.type));
    }
  else
    "stylesheet" === resource.type &&
      0 === (resource.state.loading & 4) &&
      ((instance = resource.instance),
      (resource.state.loading |= 4),
      insertStylesheet(instance, props.precedence, hoistableRoot));
  return resource.instance;
}
function insertStylesheet(instance, precedence, root) {
  for (
    var nodes = root.querySelectorAll(
        'link[rel="stylesheet"][data-precedence],style[data-precedence]'
      ),
      last = nodes.length ? nodes[nodes.length - 1] : null,
      prior = last,
      i = 0;
    i < nodes.length;
    i++
  ) {
    var node = nodes[i];
    if (node.dataset.precedence === precedence) prior = node;
    else if (prior !== last) break;
  }
  prior
    ? prior.parentNode.insertBefore(instance, prior.nextSibling)
    : ((precedence = 9 === root.nodeType ? root.head : root),
      precedence.insertBefore(instance, precedence.firstChild));
}
function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
  null == stylesheetProps.crossOrigin &&
    (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
  null == stylesheetProps.referrerPolicy &&
    (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
  null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
}
function adoptPreloadPropsForScript(scriptProps, preloadProps) {
  null == scriptProps.crossOrigin &&
    (scriptProps.crossOrigin = preloadProps.crossOrigin);
  null == scriptProps.referrerPolicy &&
    (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
  null == scriptProps.integrity &&
    (scriptProps.integrity = preloadProps.integrity);
}
var tagCaches = null;
function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
  if (null === tagCaches) {
    var cache = new Map();
    var caches = (tagCaches = new Map());
    caches.set(ownerDocument, cache);
  } else
    (caches = tagCaches),
      (cache = caches.get(ownerDocument)),
      cache || ((cache = new Map()), caches.set(ownerDocument, cache));
  if (cache.has(type)) return cache;
  cache.set(type, null);
  ownerDocument = ownerDocument.getElementsByTagName(type);
  for (caches = 0; caches < ownerDocument.length; caches++) {
    var node = ownerDocument[caches];
    if (
      !(
        node[internalHoistableMarker] ||
        node[internalInstanceKey] ||
        ("link" === type && "stylesheet" === node.getAttribute("rel"))
      ) &&
      "http://www.w3.org/2000/svg" !== node.namespaceURI
    ) {
      var nodeKey = node.getAttribute(keyAttribute) || "";
      nodeKey = type + nodeKey;
      var existing = cache.get(nodeKey);
      existing ? existing.push(node) : cache.set(nodeKey, [node]);
    }
  }
  return cache;
}
function mountHoistable(hoistableRoot, type, instance) {
  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
  hoistableRoot.head.insertBefore(
    instance,
    "title" === type ? hoistableRoot.querySelector("head > title") : null
  );
}
function isHostHoistableType(type, props, hostContext) {
  if (1 === hostContext || null != props.itemProp) return !1;
  switch (type) {
    case "meta":
    case "title":
      return !0;
    case "style":
      if (
        "string" !== typeof props.precedence ||
        "string" !== typeof props.href ||
        "" === props.href
      )
        break;
      return !0;
    case "link":
      if (
        "string" !== typeof props.rel ||
        "string" !== typeof props.href ||
        "" === props.href ||
        props.onLoad ||
        props.onError
      )
        break;
      switch (props.rel) {
        case "stylesheet":
          return (
            (type = props.disabled),
            "string" === typeof props.precedence && null == type
          );
        default:
          return !0;
      }
    case "script":
      if (
        props.async &&
        "function" !== typeof props.async &&
        "symbol" !== typeof props.async &&
        !props.onLoad &&
        !props.onError &&
        props.src &&
        "string" === typeof props.src
      )
        return !0;
  }
  return !1;
}
function preloadResource(resource) {
  return "stylesheet" === resource.type && 0 === (resource.state.loading & 3)
    ? !1
    : !0;
}
var suspendedState = null;
function noop() {}
function suspendResource(hoistableRoot, resource, props) {
  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
  var state = suspendedState;
  if (
    "stylesheet" === resource.type &&
    ("string" !== typeof props.media ||
      !1 !== matchMedia(props.media).matches) &&
    0 === (resource.state.loading & 4)
  ) {
    if (null === resource.instance) {
      var key = getStyleKey(props.href),
        instance = hoistableRoot.querySelector(
          getStylesheetSelectorFromKey(key)
        );
      if (instance) {
        hoistableRoot = instance._p;
        null !== hoistableRoot &&
          "object" === typeof hoistableRoot &&
          "function" === typeof hoistableRoot.then &&
          (state.count++,
          (state = onUnsuspend.bind(state)),
          hoistableRoot.then(state, state));
        resource.state.loading |= 4;
        resource.instance = instance;
        markNodeAsHoistable(instance);
        return;
      }
      instance = hoistableRoot.ownerDocument || hoistableRoot;
      props = stylesheetPropsFromRawProps(props);
      (key = preloadPropsMap.get(key)) &&
        adoptPreloadPropsForStylesheet(props, key);
      instance = instance.createElement("link");
      markNodeAsHoistable(instance);
      var linkInstance = instance;
      linkInstance._p = new Promise(function (resolve, reject) {
        linkInstance.onload = resolve;
        linkInstance.onerror = reject;
      });
      setInitialProperties(instance, "link", props);
      resource.instance = instance;
    }
    null === state.stylesheets && (state.stylesheets = new Map());
    state.stylesheets.set(resource, hoistableRoot);
    (hoistableRoot = resource.state.preload) &&
      0 === (resource.state.loading & 3) &&
      (state.count++,
      (resource = onUnsuspend.bind(state)),
      hoistableRoot.addEventListener("load", resource),
      hoistableRoot.addEventListener("error", resource));
  }
}
function waitForCommitToBeReady() {
  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
  var state = suspendedState;
  state.stylesheets &&
    0 === state.count &&
    insertSuspendedStylesheets(state, state.stylesheets);
  return 0 < state.count
    ? function (commit) {
        var stylesheetTimer = setTimeout(function () {
          state.stylesheets &&
            insertSuspendedStylesheets(state, state.stylesheets);
          if (state.unsuspend) {
            var unsuspend = state.unsuspend;
            state.unsuspend = null;
            unsuspend();
          }
        }, 6e4);
        state.unsuspend = commit;
        return function () {
          state.unsuspend = null;
          clearTimeout(stylesheetTimer);
        };
      }
    : null;
}
function onUnsuspend() {
  this.count--;
  if (0 === this.count)
    if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
    else if (this.unsuspend) {
      var unsuspend = this.unsuspend;
      this.unsuspend = null;
      unsuspend();
    }
}
var precedencesByRoot = null;
function insertSuspendedStylesheets(state, resources) {
  state.stylesheets = null;
  null !== state.unsuspend &&
    (state.count++,
    (precedencesByRoot = new Map()),
    resources.forEach(insertStylesheetIntoRoot, state),
    (precedencesByRoot = null),
    onUnsuspend.call(state));
}
function insertStylesheetIntoRoot(root, resource) {
  if (!(resource.state.loading & 4)) {
    var precedences = precedencesByRoot.get(root);
    if (precedences) var last = precedences.get(null);
    else {
      precedences = new Map();
      precedencesByRoot.set(root, precedences);
      for (
        var nodes = root.querySelectorAll(
            "link[data-precedence],style[data-precedence]"
          ),
          i = 0;
        i < nodes.length;
        i++
      ) {
        var node = nodes[i];
        if (
          "LINK" === node.nodeName ||
          "not all" !== node.getAttribute("media")
        )
          precedences.set(node.dataset.precedence, node), (last = node);
      }
      last && precedences.set(null, last);
    }
    nodes = resource.instance;
    node = nodes.getAttribute("data-precedence");
    i = precedences.get(node) || last;
    i === last && precedences.set(null, nodes);
    precedences.set(node, nodes);
    this.count++;
    last = onUnsuspend.bind(this);
    nodes.addEventListener("load", last);
    nodes.addEventListener("error", last);
    i
      ? i.parentNode.insertBefore(nodes, i.nextSibling)
      : ((root = 9 === root.nodeType ? root.head : root),
        root.insertBefore(nodes, root.firstChild));
    resource.state.loading |= 4;
  }
}
var HostTransitionContext = {
  $$typeof: REACT_CONTEXT_TYPE,
  Provider: null,
  Consumer: null,
  _currentValue: sharedNotPendingObject,
  _currentValue2: sharedNotPendingObject,
  _threadCount: 0
};
function FiberRootNode(
  containerInfo,
  tag,
  hydrate,
  identifierPrefix,
  onUncaughtError,
  onCaughtError,
  onRecoverableError,
  formState
) {
  this.tag = 1;
  this.containerInfo = containerInfo;
  this.finishedWork =
    this.pingCache =
    this.current =
    this.pendingChildren =
      null;
  this.timeoutHandle = -1;
  this.callbackNode =
    this.next =
    this.pendingContext =
    this.context =
    this.cancelPendingCommit =
      null;
  this.callbackPriority = 0;
  this.expirationTimes = createLaneMap(-1);
  this.entangledLanes =
    this.shellSuspendCounter =
    this.errorRecoveryDisabledLanes =
    this.finishedLanes =
    this.expiredLanes =
    this.warmLanes =
    this.pingedLanes =
    this.suspendedLanes =
    this.pendingLanes =
      0;
  this.entanglements = createLaneMap(0);
  this.hiddenUpdates = createLaneMap(null);
  this.identifierPrefix = identifierPrefix;
  this.onUncaughtError = onUncaughtError;
  this.onCaughtError = onCaughtError;
  this.onRecoverableError = onRecoverableError;
  this.pooledCache = null;
  this.pooledCacheLanes = 0;
  this.formState = formState;
  this.incompleteTransitions = new Map();
}
function createFiberRoot(
  containerInfo,
  tag,
  hydrate,
  initialChildren,
  hydrationCallbacks,
  isStrictMode,
  identifierPrefix,
  onUncaughtError,
  onCaughtError,
  onRecoverableError,
  transitionCallbacks,
  formState
) {
  containerInfo = new FiberRootNode(
    containerInfo,
    tag,
    hydrate,
    identifierPrefix,
    onUncaughtError,
    onCaughtError,
    onRecoverableError,
    formState
  );
  tag = 1;
  !0 === isStrictMode && (tag |= 24);
  isStrictMode = createFiberImplClass(3, null, null, tag);
  containerInfo.current = isStrictMode;
  isStrictMode.stateNode = containerInfo;
  tag = createCache();
  tag.refCount++;
  containerInfo.pooledCache = tag;
  tag.refCount++;
  isStrictMode.memoizedState = {
    element: initialChildren,
    isDehydrated: hydrate,
    cache: tag
  };
  initializeUpdateQueue(isStrictMode);
  return containerInfo;
}
function getContextForSubtree(parentComponent) {
  if (!parentComponent) return emptyContextObject;
  parentComponent = emptyContextObject;
  return parentComponent;
}
function updateContainerImpl(
  rootFiber,
  lane,
  element,
  container,
  parentComponent,
  callback
) {
  parentComponent = getContextForSubtree(parentComponent);
  null === container.context
    ? (container.context = parentComponent)
    : (container.pendingContext = parentComponent);
  container = createUpdate(lane);
  container.payload = { element: element };
  callback = void 0 === callback ? null : callback;
  null !== callback && (container.callback = callback);
  element = enqueueUpdate(rootFiber, container, lane);
  null !== element &&
    (scheduleUpdateOnFiber(element, rootFiber, lane),
    entangleTransitions(element, rootFiber, lane));
}
function markRetryLaneImpl(fiber, retryLane) {
  fiber = fiber.memoizedState;
  if (null !== fiber && null !== fiber.dehydrated) {
    var a = fiber.retryLane;
    fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
  }
}
function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
}
function attemptContinuousHydration(fiber) {
  if (13 === fiber.tag) {
    var root = enqueueConcurrentRenderForLane(fiber, 67108864);
    null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
    markRetryLaneIfNotHydrated(fiber, 67108864);
  }
}
var _enabled = !0;
function dispatchDiscreteEvent(
  domEventName,
  eventSystemFlags,
  container,
  nativeEvent
) {
  var prevTransition = ReactSharedInternals.T;
  ReactSharedInternals.T = null;
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    (ReactDOMSharedInternals.p = 2),
      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    (ReactDOMSharedInternals.p = previousPriority),
      (ReactSharedInternals.T = prevTransition);
  }
}
function dispatchContinuousEvent(
  domEventName,
  eventSystemFlags,
  container,
  nativeEvent
) {
  var prevTransition = ReactSharedInternals.T;
  ReactSharedInternals.T = null;
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    (ReactDOMSharedInternals.p = 8),
      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    (ReactDOMSharedInternals.p = previousPriority),
      (ReactSharedInternals.T = prevTransition);
  }
}
function dispatchEvent(
  domEventName,
  eventSystemFlags,
  targetContainer,
  nativeEvent
) {
  if (_enabled) {
    var blockedOn = findInstanceBlockingEvent(nativeEvent);
    if (null === blockedOn)
      dispatchEventForPluginEventSystem(
        domEventName,
        eventSystemFlags,
        nativeEvent,
        return_targetInst,
        targetContainer
      ),
        clearIfContinuousEvent(domEventName, nativeEvent);
    else if (
      queueIfContinuousEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      )
    )
      nativeEvent.stopPropagation();
    else if (
      (clearIfContinuousEvent(domEventName, nativeEvent),
      eventSystemFlags & 4 &&
        -1 < discreteReplayableEvents.indexOf(domEventName))
    ) {
      for (; null !== blockedOn; ) {
        var fiber = getInstanceFromNode(blockedOn);
        if (null !== fiber)
          switch (fiber.tag) {
            case 3:
              fiber = fiber.stateNode;
              if (fiber.current.memoizedState.isDehydrated) {
                var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                if (0 !== lanes) {
                  var root = fiber;
                  root.pendingLanes |= 2;
                  for (root.entangledLanes |= 2; lanes; ) {
                    var lane = 1 << (31 - clz32(lanes));
                    root.entanglements[1] |= lane;
                    lanes &= ~lane;
                  }
                  ensureRootIsScheduled(fiber);
                  0 === (executionContext & 6) &&
                    ((workInProgressRootRenderTargetTime = now() + 500),
                    flushSyncWorkAcrossRoots_impl(0, !1));
                }
              }
              break;
            case 13:
              (root = enqueueConcurrentRenderForLane(fiber, 2)),
                null !== root && scheduleUpdateOnFiber(root, fiber, 2),
                flushSyncWork$1(),
                markRetryLaneIfNotHydrated(fiber, 2);
          }
        fiber = findInstanceBlockingEvent(nativeEvent);
        null === fiber &&
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            return_targetInst,
            targetContainer
          );
        if (fiber === blockedOn) break;
        blockedOn = fiber;
      }
      null !== blockedOn && nativeEvent.stopPropagation();
    } else
      dispatchEventForPluginEventSystem(
        domEventName,
        eventSystemFlags,
        nativeEvent,
        null,
        targetContainer
      );
  }
}
function findInstanceBlockingEvent(nativeEvent) {
  nativeEvent = getEventTarget(nativeEvent);
  return findInstanceBlockingTarget(nativeEvent);
}
var return_targetInst = null;
function findInstanceBlockingTarget(targetNode) {
  return_targetInst = null;
  targetNode = getClosestInstanceFromNode(targetNode);
  if (null !== targetNode) {
    var nearestMounted = getNearestMountedFiber(targetNode);
    if (null === nearestMounted) targetNode = null;
    else {
      var tag = nearestMounted.tag;
      if (13 === tag) {
        targetNode = getSuspenseInstanceFromFiber(nearestMounted);
        if (null !== targetNode) return targetNode;
        targetNode = null;
      } else if (3 === tag) {
        if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
          return 3 === nearestMounted.tag
            ? nearestMounted.stateNode.containerInfo
            : null;
        targetNode = null;
      } else nearestMounted !== targetNode && (targetNode = null);
    }
  }
  return_targetInst = targetNode;
  return null;
}
function getEventPriority(domEventName) {
  switch (domEventName) {
    case "beforetoggle":
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "toggle":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 2;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 8;
    case "message":
      switch (getCurrentPriorityLevel()) {
        case ImmediatePriority:
          return 2;
        case UserBlockingPriority:
          return 8;
        case NormalPriority$1:
        case LowPriority:
          return 32;
        case IdlePriority:
          return 268435456;
        default:
          return 32;
      }
    default:
      return 32;
  }
}
var hasScheduledReplayAttempt = !1,
  queuedFocus = null,
  queuedDrag = null,
  queuedMouse = null,
  queuedPointers = new Map(),
  queuedPointerCaptures = new Map(),
  queuedExplicitHydrationTargets = [],
  discreteReplayableEvents =
    "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
      " "
    );
function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case "focusin":
    case "focusout":
      queuedFocus = null;
      break;
    case "dragenter":
    case "dragleave":
      queuedDrag = null;
      break;
    case "mouseover":
    case "mouseout":
      queuedMouse = null;
      break;
    case "pointerover":
    case "pointerout":
      queuedPointers.delete(nativeEvent.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      queuedPointerCaptures.delete(nativeEvent.pointerId);
  }
}
function accumulateOrCreateContinuousQueuedReplayableEvent(
  existingQueuedEvent,
  blockedOn,
  domEventName,
  eventSystemFlags,
  targetContainer,
  nativeEvent
) {
  if (
    null === existingQueuedEvent ||
    existingQueuedEvent.nativeEvent !== nativeEvent
  )
    return (
      (existingQueuedEvent = {
        blockedOn: blockedOn,
        domEventName: domEventName,
        eventSystemFlags: eventSystemFlags,
        nativeEvent: nativeEvent,
        targetContainers: [targetContainer]
      }),
      null !== blockedOn &&
        ((blockedOn = getInstanceFromNode(blockedOn)),
        null !== blockedOn && attemptContinuousHydration(blockedOn)),
      existingQueuedEvent
    );
  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  blockedOn = existingQueuedEvent.targetContainers;
  null !== targetContainer &&
    -1 === blockedOn.indexOf(targetContainer) &&
    blockedOn.push(targetContainer);
  return existingQueuedEvent;
}
function queueIfContinuousEvent(
  blockedOn,
  domEventName,
  eventSystemFlags,
  targetContainer,
  nativeEvent
) {
  switch (domEventName) {
    case "focusin":
      return (
        (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedFocus,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )),
        !0
      );
    case "dragenter":
      return (
        (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedDrag,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )),
        !0
      );
    case "mouseover":
      return (
        (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedMouse,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )),
        !0
      );
    case "pointerover":
      var pointerId = nativeEvent.pointerId;
      queuedPointers.set(
        pointerId,
        accumulateOrCreateContinuousQueuedReplayableEvent(
          queuedPointers.get(pointerId) || null,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )
      );
      return !0;
    case "gotpointercapture":
      return (
        (pointerId = nativeEvent.pointerId),
        queuedPointerCaptures.set(
          pointerId,
          accumulateOrCreateContinuousQueuedReplayableEvent(
            queuedPointerCaptures.get(pointerId) || null,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )
        ),
        !0
      );
  }
  return !1;
}
function attemptExplicitHydrationTarget(queuedTarget) {
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);
  if (null !== targetInst) {
    var nearestMounted = getNearestMountedFiber(targetInst);
    if (null !== nearestMounted)
      if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
        if (
          ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
          null !== targetInst)
        ) {
          queuedTarget.blockedOn = targetInst;
          runWithPriority(queuedTarget.priority, function () {
            if (13 === nearestMounted.tag) {
              var lane = requestUpdateLane(),
                root = enqueueConcurrentRenderForLane(nearestMounted, lane);
              null !== root &&
                scheduleUpdateOnFiber(root, nearestMounted, lane);
              markRetryLaneIfNotHydrated(nearestMounted, lane);
            }
          });
          return;
        }
      } else if (
        3 === targetInst &&
        nearestMounted.stateNode.current.memoizedState.isDehydrated
      ) {
        queuedTarget.blockedOn =
          3 === nearestMounted.tag
            ? nearestMounted.stateNode.containerInfo
            : null;
        return;
      }
  }
  queuedTarget.blockedOn = null;
}
function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (null !== queuedEvent.blockedOn) return !1;
  for (
    var targetContainers = queuedEvent.targetContainers;
    0 < targetContainers.length;

  ) {
    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
    if (null === nextBlockedOn) {
      nextBlockedOn = queuedEvent.nativeEvent;
      var nativeEventClone = new nextBlockedOn.constructor(
        nextBlockedOn.type,
        nextBlockedOn
      );
      currentReplayingEvent = nativeEventClone;
      nextBlockedOn.target.dispatchEvent(nativeEventClone);
      currentReplayingEvent = null;
    } else
      return (
        (targetContainers = getInstanceFromNode(nextBlockedOn)),
        null !== targetContainers &&
          attemptContinuousHydration(targetContainers),
        (queuedEvent.blockedOn = nextBlockedOn),
        !1
      );
    targetContainers.shift();
  }
  return !0;
}
function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
}
function replayUnblockedEvents() {
  hasScheduledReplayAttempt = !1;
  null !== queuedFocus &&
    attemptReplayContinuousQueuedEvent(queuedFocus) &&
    (queuedFocus = null);
  null !== queuedDrag &&
    attemptReplayContinuousQueuedEvent(queuedDrag) &&
    (queuedDrag = null);
  null !== queuedMouse &&
    attemptReplayContinuousQueuedEvent(queuedMouse) &&
    (queuedMouse = null);
  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}
function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  queuedEvent.blockedOn === unblocked &&
    ((queuedEvent.blockedOn = null),
    hasScheduledReplayAttempt ||
      ((hasScheduledReplayAttempt = !0),
      Scheduler.unstable_scheduleCallback(
        Scheduler.unstable_NormalPriority,
        replayUnblockedEvents
      )));
}
var lastScheduledReplayQueue = null;
function scheduleReplayQueueIfNeeded(formReplayingQueue) {
  lastScheduledReplayQueue !== formReplayingQueue &&
    ((lastScheduledReplayQueue = formReplayingQueue),
    Scheduler.unstable_scheduleCallback(
      Scheduler.unstable_NormalPriority,
      function () {
        lastScheduledReplayQueue === formReplayingQueue &&
          (lastScheduledReplayQueue = null);
        for (var i = 0; i < formReplayingQueue.length; i += 3) {
          var form = formReplayingQueue[i],
            submitterOrAction = formReplayingQueue[i + 1],
            formData = formReplayingQueue[i + 2];
          if ("function" !== typeof submitterOrAction)
            if (null === findInstanceBlockingTarget(submitterOrAction || form))
              continue;
            else break;
          var formInst = getInstanceFromNode(form);
          null !== formInst &&
            (formReplayingQueue.splice(i, 3),
            (i -= 3),
            startHostTransition(
              formInst,
              {
                pending: !0,
                data: formData,
                method: form.method,
                action: submitterOrAction
              },
              submitterOrAction,
              formData
            ));
        }
      }
    ));
}
function retryIfBlockedOn(unblocked) {
  function unblock(queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  }
  null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);
  for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
    var queuedTarget = queuedExplicitHydrationTargets[i];
    queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
  }
  for (
    ;
    0 < queuedExplicitHydrationTargets.length &&
    ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

  )
    attemptExplicitHydrationTarget(i),
      null === i.blockedOn && queuedExplicitHydrationTargets.shift();
  i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
  if (null != i)
    for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
      var form = i[queuedTarget],
        submitterOrAction = i[queuedTarget + 1],
        formProps = form[internalPropsKey] || null;
      if ("function" === typeof submitterOrAction)
        formProps || scheduleReplayQueueIfNeeded(i);
      else if (formProps) {
        var action = null;
        if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
          if (
            ((form = submitterOrAction),
            (formProps = submitterOrAction[internalPropsKey] || null))
          )
            action = formProps.formAction;
          else {
            if (null !== findInstanceBlockingTarget(form)) continue;
          }
        else action = formProps.action;
        "function" === typeof action
          ? (i[queuedTarget + 1] = action)
          : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
        scheduleReplayQueueIfNeeded(i);
      }
    }
}
function ReactDOMRoot(internalRoot) {
  this._internalRoot = internalRoot;
}
ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
  function (children) {
    var root = this._internalRoot;
    if (null === root) throw Error(formatProdErrorMessage(409));
    var current = root.current,
      lane = requestUpdateLane();
    updateContainerImpl(current, lane, children, root, null, null);
  };
ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
  function () {
    var root = this._internalRoot;
    if (null !== root) {
      this._internalRoot = null;
      var container = root.containerInfo;
      0 === root.tag && flushPassiveEffects();
      updateContainerImpl(root.current, 2, null, root, null, null);
      flushSyncWork$1();
      container[internalContainerInstanceKey] = null;
    }
  };
function ReactDOMHydrationRoot(internalRoot) {
  this._internalRoot = internalRoot;
}
ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) {
  if (target) {
    var updatePriority = resolveUpdatePriority();
    target = { blockedOn: null, target: target, priority: updatePriority };
    for (
      var i = 0;
      i < queuedExplicitHydrationTargets.length &&
      0 !== updatePriority &&
      updatePriority < queuedExplicitHydrationTargets[i].priority;
      i++
    );
    queuedExplicitHydrationTargets.splice(i, 0, target);
    0 === i && attemptExplicitHydrationTarget(target);
  }
};
var isomorphicReactPackageVersion$jscomp$inline_1686 = React.version;
if (
  "19.0.0" !==
  isomorphicReactPackageVersion$jscomp$inline_1686
)
  throw Error(
    formatProdErrorMessage(
      527,
      isomorphicReactPackageVersion$jscomp$inline_1686,
      "19.0.0"
    )
  );
ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
  var fiber = componentOrElement._reactInternals;
  if (void 0 === fiber) {
    if ("function" === typeof componentOrElement.render)
      throw Error(formatProdErrorMessage(188));
    componentOrElement = Object.keys(componentOrElement).join(",");
    throw Error(formatProdErrorMessage(268, componentOrElement));
  }
  componentOrElement = findCurrentFiberUsingSlowPath(fiber);
  componentOrElement =
    null !== componentOrElement
      ? findCurrentHostFiberImpl(componentOrElement)
      : null;
  componentOrElement =
    null === componentOrElement ? null : componentOrElement.stateNode;
  return componentOrElement;
};
var internals$jscomp$inline_2165 = {
  bundleType: 0,
  version: "19.0.0",
  rendererPackageName: "react-dom",
  currentDispatcherRef: ReactSharedInternals,
  findFiberByHostInstance: getClosestInstanceFromNode,
  reconcilerVersion: "19.0.0"
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var hook$jscomp$inline_2166 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (
    !hook$jscomp$inline_2166.isDisabled &&
    hook$jscomp$inline_2166.supportsFiber
  )
    try {
      (rendererID = hook$jscomp$inline_2166.inject(
        internals$jscomp$inline_2165
      )),
        (injectedHook = hook$jscomp$inline_2166);
    } catch (err) {}
}
exports.createRoot = function (container, options) {
  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
  var isStrictMode = !1,
    identifierPrefix = "",
    onUncaughtError = defaultOnUncaughtError,
    onCaughtError = defaultOnCaughtError,
    onRecoverableError = defaultOnRecoverableError,
    transitionCallbacks = null;
  null !== options &&
    void 0 !== options &&
    (!0 === options.unstable_strictMode && (isStrictMode = !0),
    void 0 !== options.identifierPrefix &&
      (identifierPrefix = options.identifierPrefix),
    void 0 !== options.onUncaughtError &&
      (onUncaughtError = options.onUncaughtError),
    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),
    void 0 !== options.onRecoverableError &&
      (onRecoverableError = options.onRecoverableError),
    void 0 !== options.unstable_transitionCallbacks &&
      (transitionCallbacks = options.unstable_transitionCallbacks));
  options = createFiberRoot(
    container,
    1,
    !1,
    null,
    null,
    isStrictMode,
    identifierPrefix,
    onUncaughtError,
    onCaughtError,
    onRecoverableError,
    transitionCallbacks,
    null
  );
  container[internalContainerInstanceKey] = options.current;
  listenToAllSupportedEvents(
    8 === container.nodeType ? container.parentNode : container
  );
  return new ReactDOMRoot(options);
};
exports.hydrateRoot = function (container, initialChildren, options) {
  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
  var isStrictMode = !1,
    identifierPrefix = "",
    onUncaughtError = defaultOnUncaughtError,
    onCaughtError = defaultOnCaughtError,
    onRecoverableError = defaultOnRecoverableError,
    transitionCallbacks = null,
    formState = null;
  null !== options &&
    void 0 !== options &&
    (!0 === options.unstable_strictMode && (isStrictMode = !0),
    void 0 !== options.identifierPrefix &&
      (identifierPrefix = options.identifierPrefix),
    void 0 !== options.onUncaughtError &&
      (onUncaughtError = options.onUncaughtError),
    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),
    void 0 !== options.onRecoverableError &&
      (onRecoverableError = options.onRecoverableError),
    void 0 !== options.unstable_transitionCallbacks &&
      (transitionCallbacks = options.unstable_transitionCallbacks),
    void 0 !== options.formState && (formState = options.formState));
  initialChildren = createFiberRoot(
    container,
    1,
    !0,
    initialChildren,
    null != options ? options : null,
    isStrictMode,
    identifierPrefix,
    onUncaughtError,
    onCaughtError,
    onRecoverableError,
    transitionCallbacks,
    formState
  );
  initialChildren.context = getContextForSubtree(null);
  options = initialChildren.current;
  isStrictMode = requestUpdateLane();
  identifierPrefix = createUpdate(isStrictMode);
  identifierPrefix.callback = null;
  enqueueUpdate(options, identifierPrefix, isStrictMode);
  initialChildren.current.lanes = isStrictMode;
  markRootUpdated$1(initialChildren, isStrictMode);
  ensureRootIsScheduled(initialChildren);
  container[internalContainerInstanceKey] = initialChildren.current;
  listenToAllSupportedEvents(container);
  return new ReactDOMHydrationRoot(initialChildren);
};
exports.version = "19.0.0";


/***/ }),

/***/ 6221:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var React = __webpack_require__(6540);
function formatProdErrorMessage(code) {
  var url = "https://react.dev/errors/" + code;
  if (1 < arguments.length) {
    url += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var i = 2; i < arguments.length; i++)
      url += "&args[]=" + encodeURIComponent(arguments[i]);
  }
  return (
    "Minified React error #" +
    code +
    "; visit " +
    url +
    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
  );
}
function noop() {}
var Internals = {
    d: {
      f: noop,
      r: function () {
        throw Error(formatProdErrorMessage(522));
      },
      D: noop,
      C: noop,
      L: noop,
      m: noop,
      X: noop,
      S: noop,
      M: noop
    },
    p: 0,
    findDOMNode: null
  },
  REACT_PORTAL_TYPE = Symbol.for("react.portal");
function createPortal$1(children, containerInfo, implementation) {
  var key =
    3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: REACT_PORTAL_TYPE,
    key: null == key ? null : "" + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}
var ReactSharedInternals =
  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
function getCrossOriginStringAs(as, input) {
  if ("font" === as) return "";
  if ("string" === typeof input)
    return "use-credentials" === input ? input : "";
}
exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
  Internals;
exports.createPortal = function (children, container) {
  var key =
    2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (
    !container ||
    (1 !== container.nodeType &&
      9 !== container.nodeType &&
      11 !== container.nodeType)
  )
    throw Error(formatProdErrorMessage(299));
  return createPortal$1(children, container, null, key);
};
exports.flushSync = function (fn) {
  var previousTransition = ReactSharedInternals.T,
    previousUpdatePriority = Internals.p;
  try {
    if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn();
  } finally {
    (ReactSharedInternals.T = previousTransition),
      (Internals.p = previousUpdatePriority),
      Internals.d.f();
  }
};
exports.preconnect = function (href, options) {
  "string" === typeof href &&
    (options
      ? ((options = options.crossOrigin),
        (options =
          "string" === typeof options
            ? "use-credentials" === options
              ? options
              : ""
            : void 0))
      : (options = null),
    Internals.d.C(href, options));
};
exports.prefetchDNS = function (href) {
  "string" === typeof href && Internals.d.D(href);
};
exports.preinit = function (href, options) {
  if ("string" === typeof href && options && "string" === typeof options.as) {
    var as = options.as,
      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
      integrity =
        "string" === typeof options.integrity ? options.integrity : void 0,
      fetchPriority =
        "string" === typeof options.fetchPriority
          ? options.fetchPriority
          : void 0;
    "style" === as
      ? Internals.d.S(
          href,
          "string" === typeof options.precedence ? options.precedence : void 0,
          {
            crossOrigin: crossOrigin,
            integrity: integrity,
            fetchPriority: fetchPriority
          }
        )
      : "script" === as &&
        Internals.d.X(href, {
          crossOrigin: crossOrigin,
          integrity: integrity,
          fetchPriority: fetchPriority,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0
        });
  }
};
exports.preinitModule = function (href, options) {
  if ("string" === typeof href)
    if ("object" === typeof options && null !== options) {
      if (null == options.as || "script" === options.as) {
        var crossOrigin = getCrossOriginStringAs(
          options.as,
          options.crossOrigin
        );
        Internals.d.M(href, {
          crossOrigin: crossOrigin,
          integrity:
            "string" === typeof options.integrity ? options.integrity : void 0,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0
        });
      }
    } else null == options && Internals.d.M(href);
};
exports.preload = function (href, options) {
  if (
    "string" === typeof href &&
    "object" === typeof options &&
    null !== options &&
    "string" === typeof options.as
  ) {
    var as = options.as,
      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
    Internals.d.L(href, as, {
      crossOrigin: crossOrigin,
      integrity:
        "string" === typeof options.integrity ? options.integrity : void 0,
      nonce: "string" === typeof options.nonce ? options.nonce : void 0,
      type: "string" === typeof options.type ? options.type : void 0,
      fetchPriority:
        "string" === typeof options.fetchPriority
          ? options.fetchPriority
          : void 0,
      referrerPolicy:
        "string" === typeof options.referrerPolicy
          ? options.referrerPolicy
          : void 0,
      imageSrcSet:
        "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
      imageSizes:
        "string" === typeof options.imageSizes ? options.imageSizes : void 0,
      media: "string" === typeof options.media ? options.media : void 0
    });
  }
};
exports.preloadModule = function (href, options) {
  if ("string" === typeof href)
    if (options) {
      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
      Internals.d.m(href, {
        as:
          "string" === typeof options.as && "script" !== options.as
            ? options.as
            : void 0,
        crossOrigin: crossOrigin,
        integrity:
          "string" === typeof options.integrity ? options.integrity : void 0
      });
    } else Internals.d.m(href);
};
exports.requestFormReset = function (form) {
  Internals.d.r(form);
};
exports.unstable_batchedUpdates = function (fn, a) {
  return fn(a);
};
exports.useFormState = function (action, initialState, permalink) {
  return ReactSharedInternals.H.useFormState(action, initialState, permalink);
};
exports.useFormStatus = function () {
  return ReactSharedInternals.H.useHostTransitionStatus();
};
exports.version = "19.0.0";


/***/ }),

/***/ 5338:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(1247);
} else {}


/***/ }),

/***/ 961:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(6221);
} else {}


/***/ }),

/***/ 9698:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
function jsxProd(type, config, maybeKey) {
  var key = null;
  void 0 !== maybeKey && (key = "" + maybeKey);
  void 0 !== config.key && (key = "" + config.key);
  if ("key" in config) {
    maybeKey = {};
    for (var propName in config)
      "key" !== propName && (maybeKey[propName] = config[propName]);
  } else maybeKey = config;
  config = maybeKey.ref;
  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type: type,
    key: key,
    ref: void 0 !== config ? config : null,
    props: maybeKey
  };
}
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.jsx = jsxProd;
exports.jsxs = jsxProd;


/***/ }),

/***/ 9869:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
  REACT_MEMO_TYPE = Symbol.for("react.memo"),
  REACT_LAZY_TYPE = Symbol.for("react.lazy"),
  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
function getIteratorFn(maybeIterable) {
  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
  maybeIterable =
    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
    maybeIterable["@@iterator"];
  return "function" === typeof maybeIterable ? maybeIterable : null;
}
var ReactNoopUpdateQueue = {
    isMounted: function () {
      return !1;
    },
    enqueueForceUpdate: function () {},
    enqueueReplaceState: function () {},
    enqueueSetState: function () {}
  },
  assign = Object.assign,
  emptyObject = {};
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}
Component.prototype.isReactComponent = {};
Component.prototype.setState = function (partialState, callback) {
  if (
    "object" !== typeof partialState &&
    "function" !== typeof partialState &&
    null != partialState
  )
    throw Error(
      "takes an object of state variables to update or a function which returns an object of state variables."
    );
  this.updater.enqueueSetState(this, partialState, callback, "setState");
};
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
};
function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;
function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}
var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
pureComponentPrototype.constructor = PureComponent;
assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = !0;
var isArrayImpl = Array.isArray,
  ReactSharedInternals = { H: null, A: null, T: null, S: null },
  hasOwnProperty = Object.prototype.hasOwnProperty;
function ReactElement(type, key, self, source, owner, props) {
  self = props.ref;
  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type: type,
    key: key,
    ref: void 0 !== self ? self : null,
    props: props
  };
}
function cloneAndReplaceKey(oldElement, newKey) {
  return ReactElement(
    oldElement.type,
    newKey,
    void 0,
    void 0,
    void 0,
    oldElement.props
  );
}
function isValidElement(object) {
  return (
    "object" === typeof object &&
    null !== object &&
    object.$$typeof === REACT_ELEMENT_TYPE
  );
}
function escape(key) {
  var escaperLookup = { "=": "=0", ":": "=2" };
  return (
    "$" +
    key.replace(/[=:]/g, function (match) {
      return escaperLookup[match];
    })
  );
}
var userProvidedKeyEscapeRegex = /\/+/g;
function getElementKey(element, index) {
  return "object" === typeof element && null !== element && null != element.key
    ? escape("" + element.key)
    : index.toString(36);
}
function noop$1() {}
function resolveThenable(thenable) {
  switch (thenable.status) {
    case "fulfilled":
      return thenable.value;
    case "rejected":
      throw thenable.reason;
    default:
      switch (
        ("string" === typeof thenable.status
          ? thenable.then(noop$1, noop$1)
          : ((thenable.status = "pending"),
            thenable.then(
              function (fulfilledValue) {
                "pending" === thenable.status &&
                  ((thenable.status = "fulfilled"),
                  (thenable.value = fulfilledValue));
              },
              function (error) {
                "pending" === thenable.status &&
                  ((thenable.status = "rejected"), (thenable.reason = error));
              }
            )),
        thenable.status)
      ) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
      }
  }
  throw thenable;
}
function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;
  if ("undefined" === type || "boolean" === type) children = null;
  var invokeCallback = !1;
  if (null === children) invokeCallback = !0;
  else
    switch (type) {
      case "bigint":
      case "string":
      case "number":
        invokeCallback = !0;
        break;
      case "object":
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = !0;
            break;
          case REACT_LAZY_TYPE:
            return (
              (invokeCallback = children._init),
              mapIntoArray(
                invokeCallback(children._payload),
                array,
                escapedPrefix,
                nameSoFar,
                callback
              )
            );
        }
    }
  if (invokeCallback)
    return (
      (callback = callback(children)),
      (invokeCallback =
        "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar),
      isArrayImpl(callback)
        ? ((escapedPrefix = ""),
          null != invokeCallback &&
            (escapedPrefix =
              invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
          mapIntoArray(callback, array, escapedPrefix, "", function (c) {
            return c;
          }))
        : null != callback &&
          (isValidElement(callback) &&
            (callback = cloneAndReplaceKey(
              callback,
              escapedPrefix +
                (null == callback.key ||
                (children && children.key === callback.key)
                  ? ""
                  : ("" + callback.key).replace(
                      userProvidedKeyEscapeRegex,
                      "$&/"
                    ) + "/") +
                invokeCallback
            )),
          array.push(callback)),
      1
    );
  invokeCallback = 0;
  var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
  if (isArrayImpl(children))
    for (var i = 0; i < children.length; i++)
      (nameSoFar = children[i]),
        (type = nextNamePrefix + getElementKey(nameSoFar, i)),
        (invokeCallback += mapIntoArray(
          nameSoFar,
          array,
          escapedPrefix,
          type,
          callback
        ));
  else if (((i = getIteratorFn(children)), "function" === typeof i))
    for (
      children = i.call(children), i = 0;
      !(nameSoFar = children.next()).done;

    )
      (nameSoFar = nameSoFar.value),
        (type = nextNamePrefix + getElementKey(nameSoFar, i++)),
        (invokeCallback += mapIntoArray(
          nameSoFar,
          array,
          escapedPrefix,
          type,
          callback
        ));
  else if ("object" === type) {
    if ("function" === typeof children.then)
      return mapIntoArray(
        resolveThenable(children),
        array,
        escapedPrefix,
        nameSoFar,
        callback
      );
    array = String(children);
    throw Error(
      "Objects are not valid as a React child (found: " +
        ("[object Object]" === array
          ? "object with keys {" + Object.keys(children).join(", ") + "}"
          : array) +
        "). If you meant to render a collection of children, use an array instead."
    );
  }
  return invokeCallback;
}
function mapChildren(children, func, context) {
  if (null == children) return children;
  var result = [],
    count = 0;
  mapIntoArray(children, result, "", "", function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
function lazyInitializer(payload) {
  if (-1 === payload._status) {
    var ctor = payload._result;
    ctor = ctor();
    ctor.then(
      function (moduleObject) {
        if (0 === payload._status || -1 === payload._status)
          (payload._status = 1), (payload._result = moduleObject);
      },
      function (error) {
        if (0 === payload._status || -1 === payload._status)
          (payload._status = 2), (payload._result = error);
      }
    );
    -1 === payload._status && ((payload._status = 0), (payload._result = ctor));
  }
  if (1 === payload._status) return payload._result.default;
  throw payload._result;
}
var reportGlobalError =
  "function" === typeof reportError
    ? reportError
    : function (error) {
        if (
          "object" === typeof window &&
          "function" === typeof window.ErrorEvent
        ) {
          var event = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message:
              "object" === typeof error &&
              null !== error &&
              "string" === typeof error.message
                ? String(error.message)
                : String(error),
            error: error
          });
          if (!window.dispatchEvent(event)) return;
        } else if (
          "object" === typeof process &&
          "function" === typeof process.emit
        ) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
function noop() {}
exports.Children = {
  map: mapChildren,
  forEach: function (children, forEachFunc, forEachContext) {
    mapChildren(
      children,
      function () {
        forEachFunc.apply(this, arguments);
      },
      forEachContext
    );
  },
  count: function (children) {
    var n = 0;
    mapChildren(children, function () {
      n++;
    });
    return n;
  },
  toArray: function (children) {
    return (
      mapChildren(children, function (child) {
        return child;
      }) || []
    );
  },
  only: function (children) {
    if (!isValidElement(children))
      throw Error(
        "React.Children.only expected to receive a single React element child."
      );
    return children;
  }
};
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
  ReactSharedInternals;
exports.act = function () {
  throw Error("act(...) is not supported in production builds of React.");
};
exports.cache = function (fn) {
  return function () {
    return fn.apply(null, arguments);
  };
};
exports.cloneElement = function (element, config, children) {
  if (null === element || void 0 === element)
    throw Error(
      "The argument must be a React element, but you passed " + element + "."
    );
  var props = assign({}, element.props),
    key = element.key,
    owner = void 0;
  if (null != config)
    for (propName in (void 0 !== config.ref && (owner = void 0),
    void 0 !== config.key && (key = "" + config.key),
    config))
      !hasOwnProperty.call(config, propName) ||
        "key" === propName ||
        "__self" === propName ||
        "__source" === propName ||
        ("ref" === propName && void 0 === config.ref) ||
        (props[propName] = config[propName]);
  var propName = arguments.length - 2;
  if (1 === propName) props.children = children;
  else if (1 < propName) {
    for (var childArray = Array(propName), i = 0; i < propName; i++)
      childArray[i] = arguments[i + 2];
    props.children = childArray;
  }
  return ReactElement(element.type, key, void 0, void 0, owner, props);
};
exports.createContext = function (defaultValue) {
  defaultValue = {
    $$typeof: REACT_CONTEXT_TYPE,
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    _threadCount: 0,
    Provider: null,
    Consumer: null
  };
  defaultValue.Provider = defaultValue;
  defaultValue.Consumer = {
    $$typeof: REACT_CONSUMER_TYPE,
    _context: defaultValue
  };
  return defaultValue;
};
exports.createElement = function (type, config, children) {
  var propName,
    props = {},
    key = null;
  if (null != config)
    for (propName in (void 0 !== config.key && (key = "" + config.key), config))
      hasOwnProperty.call(config, propName) &&
        "key" !== propName &&
        "__self" !== propName &&
        "__source" !== propName &&
        (props[propName] = config[propName]);
  var childrenLength = arguments.length - 2;
  if (1 === childrenLength) props.children = children;
  else if (1 < childrenLength) {
    for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
      childArray[i] = arguments[i + 2];
    props.children = childArray;
  }
  if (type && type.defaultProps)
    for (propName in ((childrenLength = type.defaultProps), childrenLength))
      void 0 === props[propName] &&
        (props[propName] = childrenLength[propName]);
  return ReactElement(type, key, void 0, void 0, null, props);
};
exports.createRef = function () {
  return { current: null };
};
exports.forwardRef = function (render) {
  return { $$typeof: REACT_FORWARD_REF_TYPE, render: render };
};
exports.isValidElement = isValidElement;
exports.lazy = function (ctor) {
  return {
    $$typeof: REACT_LAZY_TYPE,
    _payload: { _status: -1, _result: ctor },
    _init: lazyInitializer
  };
};
exports.memo = function (type, compare) {
  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: void 0 === compare ? null : compare
  };
};
exports.startTransition = function (scope) {
  var prevTransition = ReactSharedInternals.T,
    currentTransition = {};
  ReactSharedInternals.T = currentTransition;
  try {
    var returnValue = scope(),
      onStartTransitionFinish = ReactSharedInternals.S;
    null !== onStartTransitionFinish &&
      onStartTransitionFinish(currentTransition, returnValue);
    "object" === typeof returnValue &&
      null !== returnValue &&
      "function" === typeof returnValue.then &&
      returnValue.then(noop, reportGlobalError);
  } catch (error) {
    reportGlobalError(error);
  } finally {
    ReactSharedInternals.T = prevTransition;
  }
};
exports.unstable_useCacheRefresh = function () {
  return ReactSharedInternals.H.useCacheRefresh();
};
exports.use = function (usable) {
  return ReactSharedInternals.H.use(usable);
};
exports.useActionState = function (action, initialState, permalink) {
  return ReactSharedInternals.H.useActionState(action, initialState, permalink);
};
exports.useCallback = function (callback, deps) {
  return ReactSharedInternals.H.useCallback(callback, deps);
};
exports.useContext = function (Context) {
  return ReactSharedInternals.H.useContext(Context);
};
exports.useDebugValue = function () {};
exports.useDeferredValue = function (value, initialValue) {
  return ReactSharedInternals.H.useDeferredValue(value, initialValue);
};
exports.useEffect = function (create, deps) {
  return ReactSharedInternals.H.useEffect(create, deps);
};
exports.useId = function () {
  return ReactSharedInternals.H.useId();
};
exports.useImperativeHandle = function (ref, create, deps) {
  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
};
exports.useInsertionEffect = function (create, deps) {
  return ReactSharedInternals.H.useInsertionEffect(create, deps);
};
exports.useLayoutEffect = function (create, deps) {
  return ReactSharedInternals.H.useLayoutEffect(create, deps);
};
exports.useMemo = function (create, deps) {
  return ReactSharedInternals.H.useMemo(create, deps);
};
exports.useOptimistic = function (passthrough, reducer) {
  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
};
exports.useReducer = function (reducer, initialArg, init) {
  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
};
exports.useRef = function (initialValue) {
  return ReactSharedInternals.H.useRef(initialValue);
};
exports.useState = function (initialState) {
  return ReactSharedInternals.H.useState(initialState);
};
exports.useSyncExternalStore = function (
  subscribe,
  getSnapshot,
  getServerSnapshot
) {
  return ReactSharedInternals.H.useSyncExternalStore(
    subscribe,
    getSnapshot,
    getServerSnapshot
  );
};
exports.useTransition = function () {
  return ReactSharedInternals.H.useTransition();
};
exports.version = "19.0.0";


/***/ }),

/***/ 6540:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(9869);
} else {}


/***/ }),

/***/ 4848:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(9698);
} else {}


/***/ }),

/***/ 4477:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  a: for (; 0 < index; ) {
    var parentIndex = (index - 1) >>> 1,
      parent = heap[parentIndex];
    if (0 < compare(parent, node))
      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);
    else break a;
  }
}
function peek(heap) {
  return 0 === heap.length ? null : heap[0];
}
function pop(heap) {
  if (0 === heap.length) return null;
  var first = heap[0],
    last = heap.pop();
  if (last !== first) {
    heap[0] = last;
    a: for (
      var index = 0, length = heap.length, halfLength = length >>> 1;
      index < halfLength;

    ) {
      var leftIndex = 2 * (index + 1) - 1,
        left = heap[leftIndex],
        rightIndex = leftIndex + 1,
        right = heap[rightIndex];
      if (0 > compare(left, last))
        rightIndex < length && 0 > compare(right, left)
          ? ((heap[index] = right),
            (heap[rightIndex] = last),
            (index = rightIndex))
          : ((heap[index] = left),
            (heap[leftIndex] = last),
            (index = leftIndex));
      else if (rightIndex < length && 0 > compare(right, last))
        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);
      else break a;
    }
  }
  return first;
}
function compare(a, b) {
  var diff = a.sortIndex - b.sortIndex;
  return 0 !== diff ? diff : a.id - b.id;
}
exports.unstable_now = void 0;
if ("object" === typeof performance && "function" === typeof performance.now) {
  var localPerformance = performance;
  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date,
    initialTime = localDate.now();
  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
}
var taskQueue = [],
  timerQueue = [],
  taskIdCounter = 1,
  currentTask = null,
  currentPriorityLevel = 3,
  isPerformingWork = !1,
  isHostCallbackScheduled = !1,
  isHostTimeoutScheduled = !1,
  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
function advanceTimers(currentTime) {
  for (var timer = peek(timerQueue); null !== timer; ) {
    if (null === timer.callback) pop(timerQueue);
    else if (timer.startTime <= currentTime)
      pop(timerQueue),
        (timer.sortIndex = timer.expirationTime),
        push(taskQueue, timer);
    else break;
    timer = peek(timerQueue);
  }
}
function handleTimeout(currentTime) {
  isHostTimeoutScheduled = !1;
  advanceTimers(currentTime);
  if (!isHostCallbackScheduled)
    if (null !== peek(taskQueue))
      (isHostCallbackScheduled = !0), requestHostCallback();
    else {
      var firstTimer = peek(timerQueue);
      null !== firstTimer &&
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }
}
var isMessageLoopRunning = !1,
  taskTimeoutID = -1,
  frameInterval = 5,
  startTime = -1;
function shouldYieldToHost() {
  return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
}
function performWorkUntilDeadline() {
  if (isMessageLoopRunning) {
    var currentTime = exports.unstable_now();
    startTime = currentTime;
    var hasMoreWork = !0;
    try {
      a: {
        isHostCallbackScheduled = !1;
        isHostTimeoutScheduled &&
          ((isHostTimeoutScheduled = !1),
          localClearTimeout(taskTimeoutID),
          (taskTimeoutID = -1));
        isPerformingWork = !0;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          b: {
            advanceTimers(currentTime);
            for (
              currentTask = peek(taskQueue);
              null !== currentTask &&
              !(
                currentTask.expirationTime > currentTime && shouldYieldToHost()
              );

            ) {
              var callback = currentTask.callback;
              if ("function" === typeof callback) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var continuationCallback = callback(
                  currentTask.expirationTime <= currentTime
                );
                currentTime = exports.unstable_now();
                if ("function" === typeof continuationCallback) {
                  currentTask.callback = continuationCallback;
                  advanceTimers(currentTime);
                  hasMoreWork = !0;
                  break b;
                }
                currentTask === peek(taskQueue) && pop(taskQueue);
                advanceTimers(currentTime);
              } else pop(taskQueue);
              currentTask = peek(taskQueue);
            }
            if (null !== currentTask) hasMoreWork = !0;
            else {
              var firstTimer = peek(timerQueue);
              null !== firstTimer &&
                requestHostTimeout(
                  handleTimeout,
                  firstTimer.startTime - currentTime
                );
              hasMoreWork = !1;
            }
          }
          break a;
        } finally {
          (currentTask = null),
            (currentPriorityLevel = previousPriorityLevel),
            (isPerformingWork = !1);
        }
        hasMoreWork = void 0;
      }
    } finally {
      hasMoreWork
        ? schedulePerformWorkUntilDeadline()
        : (isMessageLoopRunning = !1);
    }
  }
}
var schedulePerformWorkUntilDeadline;
if ("function" === typeof localSetImmediate)
  schedulePerformWorkUntilDeadline = function () {
    localSetImmediate(performWorkUntilDeadline);
  };
else if ("undefined" !== typeof MessageChannel) {
  var channel = new MessageChannel(),
    port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;
  schedulePerformWorkUntilDeadline = function () {
    port.postMessage(null);
  };
} else
  schedulePerformWorkUntilDeadline = function () {
    localSetTimeout(performWorkUntilDeadline, 0);
  };
function requestHostCallback() {
  isMessageLoopRunning ||
    ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
}
function requestHostTimeout(callback, ms) {
  taskTimeoutID = localSetTimeout(function () {
    callback(exports.unstable_now());
  }, ms);
}
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_cancelCallback = function (task) {
  task.callback = null;
};
exports.unstable_continueExecution = function () {
  isHostCallbackScheduled ||
    isPerformingWork ||
    ((isHostCallbackScheduled = !0), requestHostCallback());
};
exports.unstable_forceFrameRate = function (fps) {
  0 > fps || 125 < fps
    ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      )
    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
};
exports.unstable_getCurrentPriorityLevel = function () {
  return currentPriorityLevel;
};
exports.unstable_getFirstCallbackNode = function () {
  return peek(taskQueue);
};
exports.unstable_next = function (eventHandler) {
  switch (currentPriorityLevel) {
    case 1:
    case 2:
    case 3:
      var priorityLevel = 3;
      break;
    default:
      priorityLevel = currentPriorityLevel;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
};
exports.unstable_pauseExecution = function () {};
exports.unstable_requestPaint = function () {};
exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      priorityLevel = 3;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
};
exports.unstable_scheduleCallback = function (
  priorityLevel,
  callback,
  options
) {
  var currentTime = exports.unstable_now();
  "object" === typeof options && null !== options
    ? ((options = options.delay),
      (options =
        "number" === typeof options && 0 < options
          ? currentTime + options
          : currentTime))
    : (options = currentTime);
  switch (priorityLevel) {
    case 1:
      var timeout = -1;
      break;
    case 2:
      timeout = 250;
      break;
    case 5:
      timeout = 1073741823;
      break;
    case 4:
      timeout = 1e4;
      break;
    default:
      timeout = 5e3;
  }
  timeout = options + timeout;
  priorityLevel = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: options,
    expirationTime: timeout,
    sortIndex: -1
  };
  options > currentTime
    ? ((priorityLevel.sortIndex = options),
      push(timerQueue, priorityLevel),
      null === peek(taskQueue) &&
        priorityLevel === peek(timerQueue) &&
        (isHostTimeoutScheduled
          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
          : (isHostTimeoutScheduled = !0),
        requestHostTimeout(handleTimeout, options - currentTime)))
    : ((priorityLevel.sortIndex = timeout),
      push(taskQueue, priorityLevel),
      isHostCallbackScheduled ||
        isPerformingWork ||
        ((isHostCallbackScheduled = !0), requestHostCallback()));
  return priorityLevel;
};
exports.unstable_shouldYield = shouldYieldToHost;
exports.unstable_wrapCallback = function (callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;
    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
};


/***/ }),

/***/ 9982:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(4477);
} else {}


/***/ }),

/***/ 5072:
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 7659:
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ 540:
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ 5056:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 7825:
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ 1113:
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ 3947:
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbsoluteFill: () => (/* binding */ AbsoluteFill),
/* harmony export */   AnimatedImage: () => (/* binding */ AnimatedImage),
/* harmony export */   Artifact: () => (/* binding */ Artifact),
/* harmony export */   Audio: () => (/* binding */ Audio),
/* harmony export */   Composition: () => (/* binding */ Composition),
/* harmony export */   Config: () => (/* binding */ Config),
/* harmony export */   Easing: () => (/* binding */ Easing),
/* harmony export */   Experimental: () => (/* binding */ Experimental),
/* harmony export */   Folder: () => (/* binding */ Folder),
/* harmony export */   FolderContext: () => (/* binding */ FolderContext),
/* harmony export */   Freeze: () => (/* binding */ Freeze),
/* harmony export */   IFrame: () => (/* binding */ IFrame),
/* harmony export */   Img: () => (/* binding */ Img),
/* harmony export */   Internals: () => (/* binding */ Internals),
/* harmony export */   Loop: () => (/* binding */ Loop),
/* harmony export */   OffthreadVideo: () => (/* binding */ OffthreadVideo),
/* harmony export */   Sequence: () => (/* binding */ Sequence),
/* harmony export */   Series: () => (/* binding */ Series),
/* harmony export */   Still: () => (/* binding */ Still),
/* harmony export */   VERSION: () => (/* binding */ VERSION),
/* harmony export */   Video: () => (/* binding */ Video),
/* harmony export */   cancelRender: () => (/* binding */ cancelRender),
/* harmony export */   continueRender: () => (/* binding */ continueRender),
/* harmony export */   delayRender: () => (/* binding */ delayRender),
/* harmony export */   getInputProps: () => (/* binding */ getInputProps),
/* harmony export */   getRemotionEnvironment: () => (/* binding */ getRemotionEnvironment),
/* harmony export */   getStaticFiles: () => (/* binding */ getStaticFiles),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   interpolateColors: () => (/* binding */ interpolateColors),
/* harmony export */   measureSpring: () => (/* binding */ measureSpring),
/* harmony export */   prefetch: () => (/* binding */ prefetch),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   registerRoot: () => (/* binding */ registerRoot),
/* harmony export */   spring: () => (/* binding */ spring),
/* harmony export */   staticFile: () => (/* binding */ staticFile),
/* harmony export */   useBufferState: () => (/* binding */ useBufferState),
/* harmony export */   useCurrentFrame: () => (/* binding */ useCurrentFrame),
/* harmony export */   useCurrentScale: () => (/* binding */ useCurrentScale),
/* harmony export */   useVideoConfig: () => (/* binding */ useVideoConfig),
/* harmony export */   watchStaticFile: () => (/* binding */ watchStaticFile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6540);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4848);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(961);
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// src/_check-rsc.ts

if (typeof react__WEBPACK_IMPORTED_MODULE_0__.createContext !== "function") {
  const err = [
    'Remotion requires React.createContext, but it is "undefined".',
    'If you are in a React Server Component, turn it into a client component by adding "use client" at the top of the file.',
    "",
    "Before:",
    '  import {useCurrentFrame} from "remotion";',
    "",
    "After:",
    '  "use client";',
    '  import {useCurrentFrame} from "remotion";'
  ];
  throw new Error(err.join(`
`));
}

// src/Clipper.tsx
var Clipper = () => {
  throw new Error("<Clipper> has been removed as of Remotion v4.0.228. The native clipping APIs were experimental and subject to removal at any time. We removed them because they were sparingly used and made rendering often slower rather than faster.");
};

// src/enable-sequence-stack-traces.ts


// src/get-remotion-environment.ts
function getNodeEnvString() {
  return ["NOD", "E_EN", "V"].join("");
}
var getEnvString = () => {
  return ["e", "nv"].join("");
};
var getRemotionEnvironment = () => {
  const isPlayer = typeof window !== "undefined" && window.remotion_isPlayer;
  const isRendering = typeof window !== "undefined" && typeof window.process !== "undefined" && typeof window.process.env !== "undefined" && (window.process[getEnvString()][getNodeEnvString()] === "test" || window.process[getEnvString()][getNodeEnvString()] === "production" && typeof window !== "undefined" && typeof window.remotion_puppeteerTimeout !== "undefined");
  const isStudio = typeof window !== "undefined" && window.remotion_isStudio;
  const isReadOnlyStudio = typeof window !== "undefined" && window.remotion_isReadOnlyStudio;
  return {
    isStudio,
    isRendering,
    isPlayer,
    isReadOnlyStudio
  };
};

// src/enable-sequence-stack-traces.ts
var originalCreateElement = react__WEBPACK_IMPORTED_MODULE_0__.createElement;
var componentsToAddStacksTo = [];
var enableSequenceStackTraces = () => {
  if (!getRemotionEnvironment().isStudio) {
    return;
  }
  const proxy = new Proxy(originalCreateElement, {
    apply(target, thisArg, argArray) {
      if (componentsToAddStacksTo.includes(argArray[0])) {
        const [first, props, ...rest] = argArray;
        const newProps = {
          ...props ?? {},
          stack: new Error().stack
        };
        return Reflect.apply(target, thisArg, [first, newProps, ...rest]);
      }
      return Reflect.apply(target, thisArg, argArray);
    }
  });
  react__WEBPACK_IMPORTED_MODULE_0__.createElement = proxy;
};
var addSequenceStackTraces = (component) => {
  componentsToAddStacksTo.push(component);
  enableSequenceStackTraces();
};

// src/is-player.tsx


var IsPlayerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);
var IsPlayerContextProvider = ({
  children
}) => {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsPlayerContext.Provider, {
    value: true,
    children
  });
};
var useIsPlayer = () => {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(IsPlayerContext);
};

// src/truthy.ts
function truthy(value) {
  return Boolean(value);
}

// src/version.ts
var VERSION = "4.0.340";

// src/multiple-versions-warning.ts
var checkMultipleRemotionVersions = () => {
  if (typeof globalThis === "undefined") {
    return;
  }
  const set = () => {
    globalThis.remotion_imported = VERSION;
    if (typeof window !== "undefined") {
      window.remotion_imported = VERSION;
    }
  };
  const alreadyImported = globalThis.remotion_imported || typeof window !== "undefined" && window.remotion_imported;
  if (alreadyImported) {
    if (alreadyImported === VERSION) {
      return;
    }
    if (typeof alreadyImported === "string" && alreadyImported.includes("webcodecs")) {
      set();
      return;
    }
    throw new TypeError(`\uD83D\uDEA8 Multiple versions of Remotion detected: ${[
      VERSION,
      typeof alreadyImported === "string" ? alreadyImported : "an older version"
    ].filter(truthy).join(" and ")}. This will cause things to break in an unexpected way.
Check that all your Remotion packages are on the same version. If your dependencies depend on Remotion, make them peer dependencies. You can also run \`npx remotion versions\` from your terminal to see which versions are mismatching.`);
  }
  set();
};

// src/Null.tsx
var Null = () => {
  throw new Error("<Null> has been removed as of Remotion v4.0.228. The native clipping APIs were experimental and subject to removal at any time. We removed them because they were sparingly used and made rendering often slower rather than faster.");
};

// src/Sequence.tsx


// src/AbsoluteFill.tsx


var hasTailwindClassName = ({
  className,
  classPrefix,
  type
}) => {
  if (!className) {
    return false;
  }
  if (type === "exact") {
    const split = className.split(" ");
    return classPrefix.some((token) => {
      return split.some((part) => {
        return part.trim() === token || part.trim().endsWith(`:${token}`) || part.trim().endsWith(`!${token}`);
      });
    });
  }
  return classPrefix.some((prefix) => {
    return className.startsWith(prefix) || className.includes(` ${prefix}`) || className.includes(`!${prefix}`) || className.includes(`:${prefix}`);
  });
};
var AbsoluteFillRefForwarding = (props, ref) => {
  const { style, ...other } = props;
  const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      position: "absolute",
      top: hasTailwindClassName({
        className: other.className,
        classPrefix: ["top-", "inset-"],
        type: "prefix"
      }) ? undefined : 0,
      left: hasTailwindClassName({
        className: other.className,
        classPrefix: ["left-", "inset-"],
        type: "prefix"
      }) ? undefined : 0,
      right: hasTailwindClassName({
        className: other.className,
        classPrefix: ["right-", "inset-"],
        type: "prefix"
      }) ? undefined : 0,
      bottom: hasTailwindClassName({
        className: other.className,
        classPrefix: ["bottom-", "inset-"],
        type: "prefix"
      }) ? undefined : 0,
      width: hasTailwindClassName({
        className: other.className,
        classPrefix: ["w-"],
        type: "prefix"
      }) ? undefined : "100%",
      height: hasTailwindClassName({
        className: other.className,
        classPrefix: ["h-"],
        type: "prefix"
      }) ? undefined : "100%",
      display: hasTailwindClassName({
        className: other.className,
        classPrefix: [
          "block",
          "inline-block",
          "inline",
          "flex",
          "inline-flex",
          "flow-root",
          "grid",
          "inline-grid",
          "contents",
          "list-item",
          "hidden"
        ],
        type: "exact"
      }) ? undefined : "flex",
      flexDirection: hasTailwindClassName({
        className: other.className,
        classPrefix: [
          "flex-row",
          "flex-col",
          "flex-row-reverse",
          "flex-col-reverse"
        ],
        type: "exact"
      }) ? undefined : "column",
      ...style
    };
  }, [other.className, style]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div", {
    ref,
    style: actualStyle,
    ...other
  });
};
var AbsoluteFill = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AbsoluteFillRefForwarding);

// src/SequenceContext.tsx

var SequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);

// src/SequenceManager.tsx


var SequenceManager = react__WEBPACK_IMPORTED_MODULE_0__.createContext({
  registerSequence: () => {
    throw new Error("SequenceManagerContext not initialized");
  },
  unregisterSequence: () => {
    throw new Error("SequenceManagerContext not initialized");
  },
  sequences: []
});
var SequenceVisibilityToggleContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({
  hidden: {},
  setHidden: () => {
    throw new Error("SequenceVisibilityToggle not initialized");
  }
});
var SequenceManagerProvider = ({ children }) => {
  const [sequences, setSequences] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [hidden, setHidden] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  const registerSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((seq) => {
    setSequences((seqs) => {
      return [...seqs, seq];
    });
  }, []);
  const unregisterSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((seq) => {
    setSequences((seqs) => seqs.filter((s) => s.id !== seq));
  }, []);
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      registerSequence,
      sequences,
      unregisterSequence
    };
  }, [registerSequence, sequences, unregisterSequence]);
  const hiddenContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      hidden,
      setHidden
    };
  }, [hidden]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, {
    value: sequenceContext,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceVisibilityToggleContext.Provider, {
      value: hiddenContext,
      children
    })
  });
};

// src/nonce.ts

var NonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  getNonce: () => 0,
  fastRefreshes: 0,
  manualRefreshes: 0
});
var SetNonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  increaseManualRefreshes: () => {}
});
var useNonce = () => {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NonceContext);
  const [nonce, setNonce] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => context.getNonce());
  const lastContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(context);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (lastContext.current === context) {
      return;
    }
    lastContext.current = context;
    setNonce(context.getNonce);
  }, [context]);
  return nonce;
};

// src/timeline-position-state.ts
var exports_timeline_position_state = {};
__export(exports_timeline_position_state, {
  useTimelineSetFrame: () => useTimelineSetFrame,
  useTimelinePosition: () => useTimelinePosition,
  usePlayingState: () => usePlayingState,
  persistCurrentFrame: () => persistCurrentFrame,
  getInitialFrameState: () => getInitialFrameState,
  getFrameForComposition: () => getFrameForComposition,
  TimelineContext: () => TimelineContext,
  SetTimelineContext: () => SetTimelineContext
});


// src/use-video.ts


// src/CompositionManagerContext.tsx

var CompositionManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  compositions: [],
  folders: [],
  currentCompositionMetadata: null,
  canvasContent: null
});
var CompositionSetters = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  registerComposition: () => {
    return;
  },
  unregisterComposition: () => {
    return;
  },
  registerFolder: () => {
    return;
  },
  unregisterFolder: () => {
    return;
  },
  setCanvasContent: () => {
    return;
  },
  updateCompositionDefaultProps: () => {
    return;
  },
  onlyRenderComposition: null
});

// src/ResolveCompositionConfig.tsx


// src/EditorProps.tsx


var EditorPropsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  props: {},
  updateProps: () => {
    throw new Error("Not implemented");
  },
  resetUnsaved: () => {
    throw new Error("Not implemented");
  }
});
var editorPropsProviderRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();
var timeValueRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();
var EditorPropsProvider = ({ children }) => {
  const [props, setProps] = react__WEBPACK_IMPORTED_MODULE_0__.useState({});
  const updateProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    defaultProps,
    id,
    newProps
  }) => {
    setProps((prev) => {
      return {
        ...prev,
        [id]: typeof newProps === "function" ? newProps(prev[id] ?? defaultProps) : newProps
      };
    });
  }, []);
  const resetUnsaved = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((compositionId) => {
    setProps((prev) => {
      if (prev[compositionId]) {
        const newProps = { ...prev };
        delete newProps[compositionId];
        return newProps;
      }
      return prev;
    });
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(editorPropsProviderRef, () => {
    return {
      getProps: () => props,
      setProps
    };
  }, [props]);
  const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return { props, updateProps, resetUnsaved };
  }, [props, resetUnsaved, updateProps]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsContext.Provider, {
    value: ctx,
    children
  });
};

// src/input-props-serialization.ts
var DATE_TOKEN = "remotion-date:";
var FILE_TOKEN = "remotion-file:";
var serializeJSONWithSpecialTypes = ({
  data,
  indent,
  staticBase
}) => {
  let customDateUsed = false;
  let customFileUsed = false;
  let mapUsed = false;
  let setUsed = false;
  try {
    const serializedString = JSON.stringify(data, function(key, value) {
      const item = this[key];
      if (item instanceof Date) {
        customDateUsed = true;
        return `${DATE_TOKEN}${item.toISOString()}`;
      }
      if (item instanceof Map) {
        mapUsed = true;
        return value;
      }
      if (item instanceof Set) {
        setUsed = true;
        return value;
      }
      if (typeof item === "string" && staticBase !== null && item.startsWith(staticBase)) {
        customFileUsed = true;
        return `${FILE_TOKEN}${item.replace(staticBase + "/", "")}`;
      }
      return value;
    }, indent);
    return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };
  } catch (err) {
    throw new Error("Could not serialize the passed input props to JSON: " + err.message);
  }
};
var deserializeJSONWithSpecialTypes = (data) => {
  return JSON.parse(data, (_, value) => {
    if (typeof value === "string" && value.startsWith(DATE_TOKEN)) {
      return new Date(value.replace(DATE_TOKEN, ""));
    }
    if (typeof value === "string" && value.startsWith(FILE_TOKEN)) {
      return `${window.remotion_staticBase}/${value.replace(FILE_TOKEN, "")}`;
    }
    return value;
  });
};
var serializeThenDeserialize = (props) => {
  return deserializeJSONWithSpecialTypes(serializeJSONWithSpecialTypes({
    data: props,
    indent: 2,
    staticBase: window.remotion_staticBase
  }).serializedString);
};
var serializeThenDeserializeInStudio = (props) => {
  if (getRemotionEnvironment().isStudio) {
    return serializeThenDeserialize(props);
  }
  return props;
};

// src/config/input-props.ts
var didWarnSSRImport = false;
var warnOnceSSRImport = () => {
  if (didWarnSSRImport) {
    return;
  }
  didWarnSSRImport = true;
  console.warn("Called `getInputProps()` on the server. This function is not available server-side and has returned an empty object.");
  console.warn("To hide this warning, don't call this function on the server:");
  console.warn("  typeof window === 'undefined' ? {} : getInputProps()");
};
var getInputProps = () => {
  if (typeof window === "undefined") {
    warnOnceSSRImport();
    return {};
  }
  if (getRemotionEnvironment().isPlayer) {
    throw new Error("You cannot call `getInputProps()` from a <Player>. Instead, the props are available as React props from component that you passed as `component` prop.");
  }
  const param = window.remotion_inputProps;
  if (!param) {
    return {};
  }
  const parsed = deserializeJSONWithSpecialTypes(param);
  return parsed;
};

// src/codec.ts
var validCodecs = [
  "h264",
  "h265",
  "vp8",
  "vp9",
  "mp3",
  "aac",
  "wav",
  "prores",
  "h264-mkv",
  "h264-ts",
  "gif"
];

// src/validation/validate-default-codec.ts
function validateCodec(defaultCodec, location, name) {
  if (typeof defaultCodec === "undefined") {
    return;
  }
  if (typeof defaultCodec !== "string") {
    throw new TypeError(`The "${name}" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);
  }
  if (!validCodecs.includes(defaultCodec)) {
    throw new Error(`The "${name}" prop ${location} must be one of ${validCodecs.join(", ")}, but you passed ${defaultCodec}.`);
  }
}

// src/validation/validate-dimensions.ts
function validateDimension(amount, nameOfProp, location) {
  if (typeof amount !== "number") {
    throw new Error(`The "${nameOfProp}" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);
  }
  if (isNaN(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must not be NaN, but is NaN.`);
  }
  if (!Number.isFinite(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be finite, but is ${amount}.`);
  }
  if (amount % 1 !== 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be an integer, but is ${amount}.`);
  }
  if (amount <= 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be positive, but got ${amount}.`);
  }
}

// src/validation/validate-duration-in-frames.ts
function validateDurationInFrames(durationInFrames, options) {
  const { allowFloats, component } = options;
  if (typeof durationInFrames === "undefined") {
    throw new Error(`The "durationInFrames" prop ${component} is missing.`);
  }
  if (typeof durationInFrames !== "number") {
    throw new Error(`The "durationInFrames" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);
  }
  if (durationInFrames <= 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be positive, but got ${durationInFrames}.`);
  }
  if (!allowFloats && durationInFrames % 1 !== 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be an integer, but got ${durationInFrames}.`);
  }
  if (!Number.isFinite(durationInFrames)) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be finite, but got ${durationInFrames}.`);
  }
}

// src/validation/validate-fps.ts
function validateFps(fps, location, isGif) {
  if (typeof fps !== "number") {
    throw new Error(`"fps" must be a number, but you passed a value of type ${typeof fps} ${location}`);
  }
  if (!Number.isFinite(fps)) {
    throw new Error(`"fps" must be a finite, but you passed ${fps} ${location}`);
  }
  if (isNaN(fps)) {
    throw new Error(`"fps" must not be NaN, but got ${fps} ${location}`);
  }
  if (fps <= 0) {
    throw new TypeError(`"fps" must be positive, but got ${fps} ${location}`);
  }
  if (isGif && fps > 50) {
    throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);
  }
}

// src/resolve-video-config.ts
var validateCalculated = ({
  calculated,
  compositionId,
  compositionFps,
  compositionHeight,
  compositionWidth,
  compositionDurationInFrames
}) => {
  const calculateMetadataErrorLocation = `calculated by calculateMetadata() for the composition "${compositionId}"`;
  const defaultErrorLocation = `of the "<Composition />" component with the id "${compositionId}"`;
  const width = calculated?.width ?? compositionWidth ?? undefined;
  validateDimension(width, "width", calculated?.width ? calculateMetadataErrorLocation : defaultErrorLocation);
  const height = calculated?.height ?? compositionHeight ?? undefined;
  validateDimension(height, "height", calculated?.height ? calculateMetadataErrorLocation : defaultErrorLocation);
  const fps = calculated?.fps ?? compositionFps ?? null;
  validateFps(fps, calculated?.fps ? calculateMetadataErrorLocation : defaultErrorLocation, false);
  const durationInFrames = calculated?.durationInFrames ?? compositionDurationInFrames ?? null;
  validateDurationInFrames(durationInFrames, {
    allowFloats: false,
    component: `of the "<Composition />" component with the id "${compositionId}"`
  });
  const defaultCodec = calculated?.defaultCodec;
  validateCodec(defaultCodec, calculateMetadataErrorLocation, "defaultCodec");
  const defaultOutName = calculated?.defaultOutName;
  const defaultVideoImageFormat = calculated?.defaultVideoImageFormat;
  const defaultPixelFormat = calculated?.defaultPixelFormat;
  return {
    width,
    height,
    fps,
    durationInFrames,
    defaultCodec,
    defaultOutName,
    defaultVideoImageFormat,
    defaultPixelFormat
  };
};
var resolveVideoConfig = ({
  calculateMetadata,
  signal,
  defaultProps,
  originalProps,
  compositionId,
  compositionDurationInFrames,
  compositionFps,
  compositionHeight,
  compositionWidth
}) => {
  const calculatedProm = calculateMetadata ? calculateMetadata({
    defaultProps,
    props: originalProps,
    abortSignal: signal,
    compositionId
  }) : null;
  if (calculatedProm !== null && typeof calculatedProm === "object" && "then" in calculatedProm) {
    return calculatedProm.then((c) => {
      const {
        height,
        width,
        durationInFrames,
        fps,
        defaultCodec,
        defaultOutName,
        defaultVideoImageFormat,
        defaultPixelFormat
      } = validateCalculated({
        calculated: c,
        compositionDurationInFrames,
        compositionFps,
        compositionHeight,
        compositionWidth,
        compositionId
      });
      return {
        width,
        height,
        fps,
        durationInFrames,
        id: compositionId,
        defaultProps: serializeThenDeserializeInStudio(defaultProps),
        props: serializeThenDeserializeInStudio(c.props ?? originalProps),
        defaultCodec: defaultCodec ?? null,
        defaultOutName: defaultOutName ?? null,
        defaultVideoImageFormat: defaultVideoImageFormat ?? null,
        defaultPixelFormat: defaultPixelFormat ?? null
      };
    });
  }
  const data = validateCalculated({
    calculated: calculatedProm,
    compositionDurationInFrames,
    compositionFps,
    compositionHeight,
    compositionWidth,
    compositionId
  });
  if (calculatedProm === null) {
    return {
      ...data,
      id: compositionId,
      defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
      props: serializeThenDeserializeInStudio(originalProps),
      defaultCodec: null,
      defaultOutName: null,
      defaultVideoImageFormat: null,
      defaultPixelFormat: null
    };
  }
  return {
    ...data,
    id: compositionId,
    defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
    props: serializeThenDeserializeInStudio(calculatedProm.props ?? originalProps),
    defaultCodec: calculatedProm.defaultCodec ?? null,
    defaultOutName: calculatedProm.defaultOutName ?? null,
    defaultVideoImageFormat: calculatedProm.defaultVideoImageFormat ?? null,
    defaultPixelFormat: calculatedProm.defaultPixelFormat ?? null
  };
};
var resolveVideoConfigOrCatch = (params) => {
  try {
    const promiseOrReturnValue = resolveVideoConfig(params);
    return {
      type: "success",
      result: promiseOrReturnValue
    };
  } catch (err) {
    return {
      type: "error",
      error: err
    };
  }
};

// src/ResolveCompositionConfig.tsx

var ResolveCompositionContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
var resolveCompositionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();
var needsResolution = (composition) => {
  return Boolean(composition.calculateMetadata);
};
var PROPS_UPDATED_EXTERNALLY = "remotion.propsUpdatedExternally";
var ResolveCompositionConfig = ({ children }) => {
  const [currentRenderModalComposition, setCurrentRenderModalComposition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);
  const { fastRefreshes, manualRefreshes } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NonceContext);
  if (manualRefreshes) {}
  const selectedComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return compositions.find((c) => canvasContent && canvasContent.type === "composition" && canvasContent.compositionId === c.id);
  }, [canvasContent, compositions]);
  const renderModalComposition = compositions.find((c) => c.id === currentRenderModalComposition);
  const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);
  const inputProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return typeof window === "undefined" || getRemotionEnvironment().isPlayer ? {} : getInputProps() ?? {};
  }, []);
  const [resolvedConfigs, setResolvedConfigs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return selectedComposition ? allEditorProps[selectedComposition.id] ?? {} : {};
  }, [allEditorProps, selectedComposition]);
  const renderModalProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return renderModalComposition ? allEditorProps[renderModalComposition.id] ?? {} : {};
  }, [allEditorProps, renderModalComposition]);
  const hasResolution = Boolean(currentCompositionMetadata);
  const doResolution = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    calculateMetadata,
    combinedProps,
    compositionDurationInFrames,
    compositionFps,
    compositionHeight,
    compositionId,
    compositionWidth,
    defaultProps
  }) => {
    const controller = new AbortController;
    if (hasResolution) {
      return controller;
    }
    const { signal } = controller;
    const result = resolveVideoConfigOrCatch({
      compositionId,
      calculateMetadata,
      originalProps: combinedProps,
      signal,
      defaultProps,
      compositionDurationInFrames,
      compositionFps,
      compositionHeight,
      compositionWidth
    });
    if (result.type === "error") {
      setResolvedConfigs((r) => ({
        ...r,
        [compositionId]: {
          type: "error",
          error: result.error
        }
      }));
      return controller;
    }
    const promOrNot = result.result;
    if (typeof promOrNot === "object" && "then" in promOrNot) {
      setResolvedConfigs((r) => {
        const prev = r[compositionId];
        if (prev?.type === "success" || prev?.type === "success-and-refreshing") {
          return {
            ...r,
            [compositionId]: {
              type: "success-and-refreshing",
              result: prev.result
            }
          };
        }
        return {
          ...r,
          [compositionId]: {
            type: "loading"
          }
        };
      });
      promOrNot.then((c) => {
        if (controller.signal.aborted) {
          return;
        }
        setResolvedConfigs((r) => ({
          ...r,
          [compositionId]: {
            type: "success",
            result: c
          }
        }));
      }).catch((err) => {
        if (controller.signal.aborted) {
          return;
        }
        setResolvedConfigs((r) => ({
          ...r,
          [compositionId]: {
            type: "error",
            error: err
          }
        }));
      });
    } else {
      setResolvedConfigs((r) => ({
        ...r,
        [compositionId]: {
          type: "success",
          result: promOrNot
        }
      }));
    }
    return controller;
  }, [hasResolution]);
  const currentComposition = canvasContent?.type === "composition" ? canvasContent.compositionId : null;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(resolveCompositionsRef, () => {
    return {
      setCurrentRenderModalComposition: (id) => {
        setCurrentRenderModalComposition(id);
      },
      reloadCurrentlySelectedComposition: () => {
        if (!currentComposition) {
          return;
        }
        const composition = compositions.find((c) => c.id === currentComposition);
        if (!composition) {
          throw new Error(`Could not find composition with id ${currentComposition}`);
        }
        const editorProps = allEditorProps[currentComposition] ?? {};
        const defaultProps = {
          ...composition.defaultProps ?? {},
          ...editorProps ?? {}
        };
        const props = {
          ...defaultProps,
          ...inputProps ?? {}
        };
        doResolution({
          defaultProps,
          calculateMetadata: composition.calculateMetadata,
          combinedProps: props,
          compositionDurationInFrames: composition.durationInFrames ?? null,
          compositionFps: composition.fps ?? null,
          compositionHeight: composition.height ?? null,
          compositionWidth: composition.width ?? null,
          compositionId: composition.id
        });
      }
    };
  }, [
    allEditorProps,
    compositions,
    currentComposition,
    doResolution,
    inputProps
  ]);
  const isTheSame = selectedComposition?.id === renderModalComposition?.id;
  const currentDefaultProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      ...selectedComposition?.defaultProps ?? {},
      ...selectedEditorProps ?? {}
    };
  }, [selectedComposition?.defaultProps, selectedEditorProps]);
  const originalProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      ...currentDefaultProps,
      ...inputProps ?? {}
    };
  }, [currentDefaultProps, inputProps]);
  const canResolve = selectedComposition && needsResolution(selectedComposition);
  const shouldIgnoreUpdate = typeof window !== "undefined" && window.remotion_ignoreFastRefreshUpdate && fastRefreshes <= window.remotion_ignoreFastRefreshUpdate;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (shouldIgnoreUpdate) {
      return;
    }
    if (canResolve) {
      const controller = doResolution({
        calculateMetadata: selectedComposition.calculateMetadata,
        combinedProps: originalProps,
        compositionDurationInFrames: selectedComposition.durationInFrames ?? null,
        compositionFps: selectedComposition.fps ?? null,
        compositionHeight: selectedComposition.height ?? null,
        compositionWidth: selectedComposition.width ?? null,
        defaultProps: currentDefaultProps,
        compositionId: selectedComposition.id
      });
      return () => {
        controller.abort();
      };
    }
  }, [
    canResolve,
    currentDefaultProps,
    doResolution,
    originalProps,
    selectedComposition?.calculateMetadata,
    selectedComposition?.durationInFrames,
    selectedComposition?.fps,
    selectedComposition?.height,
    selectedComposition?.id,
    selectedComposition?.width,
    shouldIgnoreUpdate
  ]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (renderModalComposition && !isTheSame) {
      const combinedProps = {
        ...renderModalComposition.defaultProps ?? {},
        ...renderModalProps ?? {},
        ...inputProps ?? {}
      };
      const controller = doResolution({
        calculateMetadata: renderModalComposition.calculateMetadata,
        compositionDurationInFrames: renderModalComposition.durationInFrames ?? null,
        compositionFps: renderModalComposition.fps ?? null,
        compositionHeight: renderModalComposition.height ?? null,
        compositionId: renderModalComposition.id,
        compositionWidth: renderModalComposition.width ?? null,
        defaultProps: currentDefaultProps,
        combinedProps
      });
      return () => {
        controller.abort();
      };
    }
  }, [
    currentDefaultProps,
    doResolution,
    inputProps,
    isTheSame,
    renderModalComposition,
    renderModalProps
  ]);
  const resolvedConfigsIncludingStaticOnes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const staticComps = compositions.filter((c) => {
      return c.calculateMetadata === null;
    });
    return {
      ...resolvedConfigs,
      ...staticComps.reduce((acc, curr) => {
        return {
          ...acc,
          [curr.id]: {
            type: "success",
            result: { ...curr, defaultProps: curr.defaultProps ?? {} }
          }
        };
      }, {})
    };
  }, [compositions, resolvedConfigs]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, {
    value: resolvedConfigsIncludingStaticOnes,
    children
  });
};
var useResolvedVideoConfig = (preferredCompositionId) => {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ResolveCompositionContext);
  const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);
  const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);
  const currentComposition = canvasContent?.type === "composition" ? canvasContent.compositionId : null;
  const compositionId = preferredCompositionId ?? currentComposition;
  const composition = compositions.find((c) => c.id === compositionId);
  const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return composition ? allEditorProps[composition.id] ?? {} : {};
  }, [allEditorProps, composition]);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!composition) {
      return null;
    }
    if (currentCompositionMetadata) {
      return {
        type: "success",
        result: {
          ...currentCompositionMetadata,
          id: composition.id,
          defaultProps: composition.defaultProps ?? {}
        }
      };
    }
    if (!needsResolution(composition)) {
      validateDurationInFrames(composition.durationInFrames, {
        allowFloats: false,
        component: `in <Composition id="${composition.id}">`
      });
      validateFps(composition.fps, `in <Composition id="${composition.id}">`, false);
      validateDimension(composition.width, "width", `in <Composition id="${composition.id}">`);
      validateDimension(composition.height, "height", `in <Composition id="${composition.id}">`);
      return {
        type: "success",
        result: {
          width: composition.width,
          height: composition.height,
          fps: composition.fps,
          id: composition.id,
          durationInFrames: composition.durationInFrames,
          defaultProps: composition.defaultProps ?? {},
          props: {
            ...composition.defaultProps ?? {},
            ...selectedEditorProps ?? {},
            ...typeof window === "undefined" || getRemotionEnvironment().isPlayer ? {} : getInputProps() ?? {}
          },
          defaultCodec: null,
          defaultOutName: null,
          defaultVideoImageFormat: null,
          defaultPixelFormat: null
        }
      };
    }
    if (!context[composition.id]) {
      return null;
    }
    return context[composition.id];
  }, [composition, context, currentCompositionMetadata, selectedEditorProps]);
};

// src/use-video.ts
var useVideo = () => {
  const { canvasContent, compositions, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);
  const selected = compositions.find((c) => {
    return canvasContent?.type === "composition" && c.id === canvasContent.compositionId;
  });
  const resolved = useResolvedVideoConfig(selected?.id ?? null);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!resolved) {
      return null;
    }
    if (resolved.type === "error") {
      return null;
    }
    if (resolved.type === "loading") {
      return null;
    }
    if (!selected) {
      return null;
    }
    return {
      ...resolved.result,
      defaultProps: selected.defaultProps ?? {},
      id: selected.id,
      ...currentCompositionMetadata ?? {},
      component: selected.component
    };
  }, [currentCompositionMetadata, resolved, selected]);
};

// src/timeline-position-state.ts
var TimelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  frame: {},
  playing: false,
  playbackRate: 1,
  rootId: "",
  imperativePlaying: {
    current: false
  },
  setPlaybackRate: () => {
    throw new Error("default");
  },
  audioAndVideoTags: { current: [] }
});
var SetTimelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  setFrame: () => {
    throw new Error("default");
  },
  setPlaying: () => {
    throw new Error("default");
  }
});
var makeKey = () => {
  return `remotion.time-all`;
};
var persistCurrentFrame = (time) => {
  localStorage.setItem(makeKey(), JSON.stringify(time));
};
var getInitialFrameState = () => {
  const item = localStorage.getItem(makeKey()) ?? "{}";
  const obj = JSON.parse(item);
  return obj;
};
var getFrameForComposition = (composition) => {
  const item = localStorage.getItem(makeKey()) ?? "{}";
  const obj = JSON.parse(item);
  if (obj[composition] !== undefined) {
    return Number(obj[composition]);
  }
  if (typeof window === "undefined") {
    return 0;
  }
  return window.remotion_initialFrame ?? 0;
};
var useTimelinePosition = () => {
  const videoConfig = useVideo();
  const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  if (!videoConfig) {
    return typeof window === "undefined" ? 0 : window.remotion_initialFrame ?? 0;
  }
  const unclamped = state.frame[videoConfig.id] ?? (getRemotionEnvironment().isPlayer ? 0 : getFrameForComposition(videoConfig.id));
  return Math.min(videoConfig.durationInFrames - 1, unclamped);
};
var useTimelineSetFrame = () => {
  const { setFrame } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);
  return setFrame;
};
var usePlayingState = () => {
  const { playing, imperativePlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const { setPlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [playing, setPlaying, imperativePlaying], [imperativePlaying, playing, setPlaying]);
};

// src/use-video-config.ts


// src/CanUseRemotionHooks.tsx


var CanUseRemotionHooks = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);
var CanUseRemotionHooksProvider = ({ children }) => {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, {
    value: true,
    children
  });
};

// src/use-unsafe-video-config.ts

var useUnsafeVideoConfig = () => {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const ctxWidth = context?.width ?? null;
  const ctxHeight = context?.height ?? null;
  const ctxDuration = context?.durationInFrames ?? null;
  const video = useVideo();
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!video) {
      return null;
    }
    const {
      id,
      durationInFrames,
      fps,
      height,
      width,
      defaultProps,
      props,
      defaultCodec,
      defaultOutName,
      defaultVideoImageFormat,
      defaultPixelFormat
    } = video;
    return {
      id,
      width: ctxWidth ?? width,
      height: ctxHeight ?? height,
      fps,
      durationInFrames: ctxDuration ?? durationInFrames,
      defaultProps,
      props,
      defaultCodec,
      defaultOutName,
      defaultVideoImageFormat,
      defaultPixelFormat
    };
  }, [ctxDuration, ctxHeight, ctxWidth, video]);
};

// src/use-video-config.ts
var useVideoConfig = () => {
  const videoConfig = useUnsafeVideoConfig();
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);
  const isPlayer = useIsPlayer();
  if (!videoConfig) {
    if (typeof window !== "undefined" && window.remotion_isPlayer || isPlayer) {
      throw new Error([
        "No video config found. Likely reasons:",
        "- You are probably calling useVideoConfig() from outside the component passed to <Player />. See https://www.remotion.dev/docs/player/examples for how to set up the Player correctly.",
        "- You have multiple versions of Remotion installed which causes the React context to get lost."
      ].join("-"));
    }
    throw new Error("No video config found. You are probably calling useVideoConfig() from a component which has not been registered as a <Composition />. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions for more information.");
  }
  if (!context) {
    throw new Error("Called useVideoConfig() outside a Remotion composition.");
  }
  return videoConfig;
};

// src/freeze.tsx


// src/use-current-frame.ts

var useCurrentFrame = () => {
  const canUseRemotionHooks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);
  if (!canUseRemotionHooks) {
    if (getRemotionEnvironment().isPlayer) {
      throw new Error(`useCurrentFrame can only be called inside a component that was passed to <Player>. See: https://www.remotion.dev/docs/player/examples`);
    }
    throw new Error(`useCurrentFrame() can only be called inside a component that was registered as a composition. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions`);
  }
  const frame = useTimelinePosition();
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const contextOffset = context ? context.cumulatedFrom + context.relativeFrom : 0;
  return frame - contextOffset;
};

// src/freeze.tsx

var Freeze = ({
  frame: frameToFreeze,
  children,
  active = true
}) => {
  const frame = useCurrentFrame();
  const videoConfig = useVideoConfig();
  if (typeof frameToFreeze === "undefined") {
    throw new Error(`The <Freeze /> component requires a 'frame' prop, but none was passed.`);
  }
  if (typeof frameToFreeze !== "number") {
    throw new Error(`The 'frame' prop of <Freeze /> must be a number, but is of type ${typeof frameToFreeze}`);
  }
  if (Number.isNaN(frameToFreeze)) {
    throw new Error(`The 'frame' prop of <Freeze /> must be a real number, but it is NaN.`);
  }
  if (!Number.isFinite(frameToFreeze)) {
    throw new Error(`The 'frame' prop of <Freeze /> must be a finite number, but it is ${frameToFreeze}.`);
  }
  const isActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof active === "boolean") {
      return active;
    }
    if (typeof active === "function") {
      return active(frame);
    }
  }, [active, frame]);
  const timelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const relativeFrom = sequenceContext?.relativeFrom ?? 0;
  const timelineValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!isActive) {
      return timelineContext;
    }
    return {
      ...timelineContext,
      playing: false,
      imperativePlaying: {
        current: false
      },
      frame: {
        [videoConfig.id]: frameToFreeze + relativeFrom
      }
    };
  }, [isActive, timelineContext, videoConfig.id, frameToFreeze, relativeFrom]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {
    value: timelineValue,
    children
  });
};

// src/Sequence.tsx

var RegularSequenceRefForwardingFunction = ({
  from = 0,
  durationInFrames = Infinity,
  children,
  name,
  height,
  width,
  showInTimeline = true,
  _remotionInternalLoopDisplay: loopDisplay,
  _remotionInternalStack: stack,
  _remotionInternalPremountDisplay: premountDisplay,
  _remotionInternalPostmountDisplay: postmountDisplay,
  ...other
}, ref) => {
  const { layout = "absolute-fill" } = other;
  const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(Math.random()));
  const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const { rootId } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const cumulatedFrom = parentSequence ? parentSequence.cumulatedFrom + parentSequence.relativeFrom : 0;
  const nonce = useNonce();
  if (layout !== "absolute-fill" && layout !== "none") {
    throw new TypeError(`The layout prop of <Sequence /> expects either "absolute-fill" or "none", but you passed: ${layout}`);
  }
  if (layout === "none" && typeof other.style !== "undefined") {
    throw new TypeError('If layout="none", you may not pass a style.');
  }
  if (typeof durationInFrames !== "number") {
    throw new TypeError(`You passed to durationInFrames an argument of type ${typeof durationInFrames}, but it must be a number.`);
  }
  if (durationInFrames <= 0) {
    throw new TypeError(`durationInFrames must be positive, but got ${durationInFrames}`);
  }
  if (typeof from !== "number") {
    throw new TypeError(`You passed to the "from" props of your <Sequence> an argument of type ${typeof from}, but it must be a number.`);
  }
  if (!Number.isFinite(from)) {
    throw new TypeError(`The "from" prop of a sequence must be finite, but got ${from}.`);
  }
  const absoluteFrame = useTimelinePosition();
  const videoConfig = useVideoConfig();
  const parentSequenceDuration = parentSequence ? Math.min(parentSequence.durationInFrames - from, durationInFrames) : durationInFrames;
  const actualDurationInFrames = Math.max(0, Math.min(videoConfig.durationInFrames - from, parentSequenceDuration));
  const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);
  const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);
  const premounting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return parentSequence?.premounting || Boolean(other._remotionInternalIsPremounting);
  }, [other._remotionInternalIsPremounting, parentSequence?.premounting]);
  const postmounting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return parentSequence?.postmounting || Boolean(other._remotionInternalIsPostmounting);
  }, [other._remotionInternalIsPostmounting, parentSequence?.postmounting]);
  const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      cumulatedFrom,
      relativeFrom: from,
      durationInFrames: actualDurationInFrames,
      parentFrom: parentSequence?.relativeFrom ?? 0,
      id,
      height: height ?? parentSequence?.height ?? null,
      width: width ?? parentSequence?.width ?? null,
      premounting,
      postmounting
    };
  }, [
    cumulatedFrom,
    from,
    actualDurationInFrames,
    parentSequence,
    id,
    height,
    width,
    premounting,
    postmounting
  ]);
  const timelineClipName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return name ?? "";
  }, [name]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!getRemotionEnvironment().isStudio) {
      return;
    }
    registerSequence({
      from,
      duration: actualDurationInFrames,
      id,
      displayName: timelineClipName,
      parent: parentSequence?.id ?? null,
      type: "sequence",
      rootId,
      showInTimeline,
      nonce,
      loopDisplay,
      stack: stack ?? null,
      premountDisplay: premountDisplay ?? null,
      postmountDisplay: postmountDisplay ?? null
    });
    return () => {
      unregisterSequence(id);
    };
  }, [
    durationInFrames,
    id,
    name,
    registerSequence,
    timelineClipName,
    unregisterSequence,
    parentSequence?.id,
    actualDurationInFrames,
    rootId,
    from,
    showInTimeline,
    nonce,
    loopDisplay,
    stack,
    premountDisplay,
    postmountDisplay
  ]);
  const endThreshold = Math.ceil(cumulatedFrom + from + durationInFrames - 1);
  const content = absoluteFrame < cumulatedFrom + from ? null : absoluteFrame > endThreshold ? null : children;
  const styleIfThere = other.layout === "none" ? undefined : other.style;
  const defaultStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      flexDirection: undefined,
      ...width ? { width } : {},
      ...height ? { height } : {},
      ...styleIfThere ?? {}
    };
  }, [height, styleIfThere, width]);
  if (ref !== null && layout === "none") {
    throw new TypeError('It is not supported to pass both a `ref` and `layout="none"` to <Sequence />.');
  }
  const isSequenceHidden = hidden[id] ?? false;
  if (isSequenceHidden) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, {
    value: contextValue,
    children: content === null ? null : other.layout === "none" ? content : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AbsoluteFill, {
      ref,
      style: defaultStyle,
      className: other.className,
      children: content
    })
  });
};
var RegularSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(RegularSequenceRefForwardingFunction);
var PremountedPostmountedSequenceRefForwardingFunction = (props, ref) => {
  const frame = useCurrentFrame();
  if (props.layout === "none") {
    throw new Error('`<Sequence>` with `premountFor` and `postmountFor` props does not support layout="none"');
  }
  const {
    style: passedStyle,
    from = 0,
    durationInFrames = Infinity,
    premountFor = 0,
    postmountFor = 0,
    styleWhilePremounted,
    styleWhilePostmounted,
    ...otherProps
  } = props;
  const endThreshold = Math.ceil(from + durationInFrames - 1);
  const premountingActive = frame < from && frame >= from - premountFor;
  const postmountingActive = frame > endThreshold && frame <= endThreshold + postmountFor;
  const freezeFrame = premountingActive ? from : postmountingActive ? from + durationInFrames - 1 : 0;
  const isFreezingActive = premountingActive || postmountingActive;
  const style = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      ...passedStyle,
      opacity: premountingActive || postmountingActive ? 0 : 1,
      pointerEvents: premountingActive || postmountingActive ? "none" : passedStyle?.pointerEvents ?? undefined,
      ...premountingActive ? styleWhilePremounted : {},
      ...postmountingActive ? styleWhilePostmounted : {}
    };
  }, [
    passedStyle,
    premountingActive,
    postmountingActive,
    styleWhilePremounted,
    styleWhilePostmounted
  ]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Freeze, {
    frame: freezeFrame,
    active: isFreezingActive,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
      ref,
      from,
      durationInFrames,
      style,
      _remotionInternalPremountDisplay: premountFor,
      _remotionInternalPostmountDisplay: postmountFor,
      _remotionInternalIsPremounting: premountingActive,
      _remotionInternalIsPostmounting: postmountingActive,
      ...otherProps
    })
  });
};
var PremountedPostmountedSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(PremountedPostmountedSequenceRefForwardingFunction);
var SequenceRefForwardingFunction = (props, ref) => {
  if (props.layout !== "none" && !getRemotionEnvironment().isRendering) {
    if (props.premountFor || props.postmountFor) {
      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PremountedPostmountedSequence, {
        ...props,
        ref
      });
    }
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RegularSequence, {
    ...props,
    ref
  });
};
var Sequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SequenceRefForwardingFunction);
// src/animated-image/AnimatedImage.tsx


// src/cancel-render.ts
var isErrorLike = (err) => {
  if (err instanceof Error) {
    return true;
  }
  if (err === null) {
    return false;
  }
  if (typeof err !== "object") {
    return false;
  }
  if (!("stack" in err)) {
    return false;
  }
  if (typeof err.stack !== "string") {
    return false;
  }
  if (!("message" in err)) {
    return false;
  }
  if (typeof err.message !== "string") {
    return false;
  }
  return true;
};
function cancelRender(err) {
  let error;
  if (isErrorLike(err)) {
    error = err;
    if (!error.stack) {
      error.stack = new Error(error.message).stack;
    }
  } else if (typeof err === "string") {
    error = Error(err);
  } else {
    error = Error("Rendering was cancelled");
  }
  window.remotion_cancelledError = error.stack;
  throw error;
}

// src/log.ts
var logLevels = ["trace", "verbose", "info", "warn", "error"];
var getNumberForLogLevel = (level) => {
  return logLevels.indexOf(level);
};
var isEqualOrBelowLogLevel = (currentLevel, level) => {
  return getNumberForLogLevel(currentLevel) <= getNumberForLogLevel(level);
};
var Log = {
  trace: (logLevel, ...args) => {
    if (isEqualOrBelowLogLevel(logLevel, "trace")) {
      return console.log(...args);
    }
  },
  verbose: (logLevel, ...args) => {
    if (isEqualOrBelowLogLevel(logLevel, "verbose")) {
      return console.log(...args);
    }
  },
  info: (logLevel, ...args) => {
    if (isEqualOrBelowLogLevel(logLevel, "info")) {
      return console.log(...args);
    }
  },
  warn: (logLevel, ...args) => {
    if (isEqualOrBelowLogLevel(logLevel, "warn")) {
      return console.warn(...args);
    }
  },
  error: (...args) => {
    return console.error(...args);
  }
};

// src/delay-render.ts
if (typeof window !== "undefined") {
  window.remotion_renderReady = false;
}
var handles = [];
if (typeof window !== "undefined") {
  window.remotion_delayRenderTimeouts = {};
}
var DELAY_RENDER_CALLSTACK_TOKEN = "The delayRender was called:";
var DELAY_RENDER_RETRIES_LEFT = "Retries left: ";
var DELAY_RENDER_RETRY_TOKEN = "- Rendering the frame will be retried.";
var DELAY_RENDER_CLEAR_TOKEN = "handle was cleared after";
var defaultTimeout = 30000;
var delayRender = (label, options) => {
  if (typeof label !== "string" && typeof label !== "undefined") {
    throw new Error("The label parameter of delayRender() must be a string or undefined, got: " + JSON.stringify(label));
  }
  const handle = Math.random();
  handles.push(handle);
  const called = Error().stack?.replace(/^Error/g, "") ?? "";
  if (getRemotionEnvironment().isRendering) {
    const timeoutToUse = (options?.timeoutInMilliseconds ?? (typeof window === "undefined" ? defaultTimeout : window.remotion_puppeteerTimeout ?? defaultTimeout)) - 2000;
    if (typeof window !== "undefined") {
      const retriesLeft = (options?.retries ?? 0) - (window.remotion_attempt - 1);
      window.remotion_delayRenderTimeouts[handle] = {
        label: label ?? null,
        startTime: Date.now(),
        timeout: setTimeout(() => {
          const message = [
            `A delayRender()`,
            label ? `"${label}"` : null,
            `was called but not cleared after ${timeoutToUse}ms. See https://remotion.dev/docs/timeout for help.`,
            retriesLeft > 0 ? DELAY_RENDER_RETRIES_LEFT + retriesLeft : null,
            retriesLeft > 0 ? DELAY_RENDER_RETRY_TOKEN : null,
            DELAY_RENDER_CALLSTACK_TOKEN,
            called
          ].filter(truthy).join(" ");
          cancelRender(Error(message));
        }, timeoutToUse)
      };
    }
  }
  if (typeof window !== "undefined") {
    window.remotion_renderReady = false;
  }
  return handle;
};
var continueRender = (handle) => {
  if (typeof handle === "undefined") {
    throw new TypeError("The continueRender() method must be called with a parameter that is the return value of delayRender(). No value was passed.");
  }
  if (typeof handle !== "number") {
    throw new TypeError("The parameter passed into continueRender() must be the return value of delayRender() which is a number. Got: " + JSON.stringify(handle));
  }
  handles = handles.filter((h) => {
    if (h === handle) {
      if (getRemotionEnvironment().isRendering) {
        if (!window.remotion_delayRenderTimeouts[handle]) {
          return false;
        }
        const { label, startTime, timeout } = window.remotion_delayRenderTimeouts[handle];
        clearTimeout(timeout);
        const message = [
          label ? `delayRender() "${label}"` : "A delayRender()",
          DELAY_RENDER_CLEAR_TOKEN,
          `${Date.now() - startTime}ms`
        ].filter(truthy).join(" ");
        Log.verbose(window.remotion_logLevel, message);
        delete window.remotion_delayRenderTimeouts[handle];
      }
      return false;
    }
    return true;
  });
  if (handles.length === 0 && typeof window !== "undefined") {
    window.remotion_renderReady = true;
  }
};

// src/animated-image/canvas.tsx


var calcArgs = (fit, frameSize, canvasSize) => {
  switch (fit) {
    case "fill": {
      return [
        0,
        0,
        frameSize.width,
        frameSize.height,
        0,
        0,
        canvasSize.width,
        canvasSize.height
      ];
    }
    case "contain": {
      const ratio = Math.min(canvasSize.width / frameSize.width, canvasSize.height / frameSize.height);
      const centerX = (canvasSize.width - frameSize.width * ratio) / 2;
      const centerY = (canvasSize.height - frameSize.height * ratio) / 2;
      return [
        0,
        0,
        frameSize.width,
        frameSize.height,
        centerX,
        centerY,
        frameSize.width * ratio,
        frameSize.height * ratio
      ];
    }
    case "cover": {
      const ratio = Math.max(canvasSize.width / frameSize.width, canvasSize.height / frameSize.height);
      const centerX = (canvasSize.width - frameSize.width * ratio) / 2;
      const centerY = (canvasSize.height - frameSize.height * ratio) / 2;
      return [
        0,
        0,
        frameSize.width,
        frameSize.height,
        centerX,
        centerY,
        frameSize.width * ratio,
        frameSize.height * ratio
      ];
    }
    default:
      throw new Error("Unknown fit: " + fit);
  }
};
var CanvasRefForwardingFunction = ({ width, height, fit, className, style }, ref) => {
  const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const draw = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((imageData) => {
    const canvas = canvasRef.current;
    const canvasWidth = width ?? imageData.displayWidth;
    const canvasHeight = height ?? imageData.displayHeight;
    if (!canvas) {
      throw new Error("Canvas ref is not set");
    }
    const ctx = canvasRef.current?.getContext("2d");
    if (!ctx) {
      throw new Error("Could not get 2d context");
    }
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    ctx.drawImage(imageData, ...calcArgs(fit, {
      height: imageData.displayHeight,
      width: imageData.displayWidth
    }, {
      width: canvasWidth,
      height: canvasHeight
    }));
  }, [fit, height, width]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return {
      draw,
      getCanvas: () => {
        if (!canvasRef.current) {
          throw new Error("Canvas ref is not set");
        }
        return canvasRef.current;
      },
      clear: () => {
        const ctx = canvasRef.current?.getContext("2d");
        if (!ctx) {
          throw new Error("Could not get 2d context");
        }
        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);
      }
    };
  }, [draw]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("canvas", {
    ref: canvasRef,
    className,
    style
  });
};
var Canvas = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(CanvasRefForwardingFunction);

// src/animated-image/decode-image.ts
var CACHE_SIZE = 5;
var getActualTime = ({
  loopBehavior,
  durationFound,
  timeInSec
}) => {
  return loopBehavior === "loop" ? durationFound ? timeInSec % durationFound : timeInSec : Math.min(timeInSec, durationFound || Infinity);
};
var decodeImage = async ({
  resolvedSrc,
  signal,
  currentTime,
  initialLoopBehavior
}) => {
  if (typeof ImageDecoder === "undefined") {
    throw new Error("Your browser does not support the WebCodecs ImageDecoder API.");
  }
  const res = await fetch(resolvedSrc, { signal });
  const { body } = res;
  if (!body) {
    throw new Error("Got no body");
  }
  const decoder = new ImageDecoder({
    data: body,
    type: res.headers.get("Content-Type") || "image/gif"
  });
  await decoder.completed;
  const { selectedTrack } = decoder.tracks;
  if (!selectedTrack) {
    throw new Error("No selected track");
  }
  const cache = [];
  let durationFound = null;
  const getFrameByIndex = async (frameIndex) => {
    const foundInCache = cache.find((c) => c.frameIndex === frameIndex);
    if (foundInCache && foundInCache.frame) {
      return foundInCache;
    }
    const frame = await decoder.decode({
      frameIndex,
      completeFramesOnly: true
    });
    if (foundInCache) {
      foundInCache.frame = frame.image;
    } else {
      cache.push({
        frame: frame.image,
        frameIndex,
        timeInSeconds: frame.image.timestamp / 1e6
      });
    }
    return {
      frame: frame.image,
      frameIndex,
      timeInSeconds: frame.image.timestamp / 1e6
    };
  };
  const clearCache = (closeToTimeInSec) => {
    const itemsInCache = cache.filter((c) => c.frame);
    const sortByClosestToCurrentTime = itemsInCache.sort((a, b) => {
      const aDiff = Math.abs(a.timeInSeconds - closeToTimeInSec);
      const bDiff = Math.abs(b.timeInSeconds - closeToTimeInSec);
      return aDiff - bDiff;
    });
    for (let i = 0;i < sortByClosestToCurrentTime.length; i++) {
      if (i < CACHE_SIZE) {
        continue;
      }
      const item = sortByClosestToCurrentTime[i];
      item.frame = null;
    }
  };
  const ensureFrameBeforeAndAfter = async ({
    timeInSec,
    loopBehavior
  }) => {
    const actualTimeInSec = getActualTime({
      durationFound,
      loopBehavior,
      timeInSec
    });
    const framesBefore = cache.filter((c) => c.timeInSeconds <= actualTimeInSec);
    const biggestIndex = framesBefore.map((c) => c.frameIndex).reduce((a, b) => Math.max(a, b), 0);
    let i = biggestIndex;
    while (true) {
      const f = await getFrameByIndex(i);
      i++;
      if (!f.frame) {
        throw new Error("No frame found");
      }
      if (!f.frame.duration) {
        break;
      }
      if (i === selectedTrack.frameCount && durationFound === null) {
        const duration = (f.frame.timestamp + f.frame.duration) / 1e6;
        durationFound = duration;
      }
      if (f.timeInSeconds > actualTimeInSec || i === selectedTrack.frameCount) {
        break;
      }
    }
    if (selectedTrack.frameCount - biggestIndex < 3 && loopBehavior === "loop") {
      await getFrameByIndex(0);
    }
    clearCache(actualTimeInSec);
  };
  await ensureFrameBeforeAndAfter({
    timeInSec: currentTime,
    loopBehavior: initialLoopBehavior
  });
  await ensureFrameBeforeAndAfter({
    timeInSec: currentTime,
    loopBehavior: initialLoopBehavior
  });
  const getFrame = async (timeInSec, loopBehavior) => {
    if (durationFound !== null && timeInSec > durationFound && loopBehavior === "clear-after-finish") {
      return null;
    }
    const actualTimeInSec = getActualTime({
      loopBehavior,
      durationFound,
      timeInSec
    });
    await ensureFrameBeforeAndAfter({ timeInSec: actualTimeInSec, loopBehavior });
    const itemsInCache = cache.filter((c) => c.frame);
    const closest = itemsInCache.reduce((a, b) => {
      const aDiff = Math.abs(a.timeInSeconds - actualTimeInSec);
      const bDiff = Math.abs(b.timeInSeconds - actualTimeInSec);
      return aDiff < bDiff ? a : b;
    });
    if (!closest.frame) {
      throw new Error("No frame found");
    }
    return closest;
  };
  return {
    getFrame,
    frameCount: selectedTrack.frameCount
  };
};

// src/animated-image/resolve-image-source.tsx
var resolveAnimatedImageSource = (src) => {
  if (typeof window === "undefined") {
    return src;
  }
  return new URL(src, window.origin).href;
};

// src/animated-image/AnimatedImage.tsx

var AnimatedImage = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({
  src,
  width,
  height,
  onError,
  loopBehavior = "loop",
  playbackRate = 1,
  fit = "fill",
  ...props
}, canvasRef) => {
  const mountState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({ isMounted: true });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = mountState;
    current.isMounted = true;
    return () => {
      current.isMounted = false;
    };
  }, []);
  const resolvedSrc = resolveAnimatedImageSource(src);
  const [imageDecoder, setImageDecoder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const [decodeHandle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => delayRender(`Rendering <AnimatedImage/> with src="${resolvedSrc}"`));
  const frame = useCurrentFrame();
  const { fps } = useVideoConfig();
  const currentTime = frame / playbackRate / fps;
  const currentTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(currentTime);
  currentTimeRef.current = currentTime;
  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(canvasRef, () => {
    const c = ref.current?.getCanvas();
    if (!c) {
      throw new Error("Canvas ref is not set");
    }
    return c;
  }, []);
  const [initialLoopBehavior] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => loopBehavior);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const controller = new AbortController;
    decodeImage({
      resolvedSrc,
      signal: controller.signal,
      currentTime: currentTimeRef.current,
      initialLoopBehavior
    }).then((d) => {
      setImageDecoder(d);
      continueRender(decodeHandle);
    }).catch((err) => {
      if (err.name === "AbortError") {
        continueRender(decodeHandle);
        return;
      }
      if (onError) {
        onError?.(err);
        continueRender(decodeHandle);
      } else {
        cancelRender(err);
      }
    });
    return () => {
      controller.abort();
    };
  }, [resolvedSrc, decodeHandle, onError, initialLoopBehavior]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!imageDecoder) {
      return;
    }
    const delay = delayRender(`Rendering frame at ${currentTime} of <AnimatedImage src="${src}"/>`);
    imageDecoder.getFrame(currentTime, loopBehavior).then((videoFrame) => {
      if (mountState.current.isMounted) {
        if (videoFrame === null) {
          ref.current?.clear();
        } else {
          ref.current?.draw(videoFrame.frame);
        }
      }
      continueRender(delay);
    }).catch((err) => {
      if (onError) {
        onError(err);
        continueRender(delay);
      } else {
        cancelRender(err);
      }
    });
  }, [currentTime, imageDecoder, loopBehavior, onError, src]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Canvas, {
    ref,
    width,
    height,
    fit,
    ...props
  });
});
// src/Artifact.tsx


// src/RenderAssetManager.tsx


// src/validation/validate-artifact.ts
var validateArtifactFilename = (filename) => {
  if (typeof filename !== "string") {
    throw new TypeError(`The "filename" must be a string, but you passed a value of type ${typeof filename}`);
  }
  if (filename.trim() === "") {
    throw new Error("The `filename` must not be empty");
  }
  if (!filename.match(/^([0-9a-zA-Z-!_.*'()/:&$@=;+,?]+)/g)) {
    throw new Error('The `filename` must match "/^([0-9a-zA-Z-!_.*\'()/:&$@=;+,?]+)/g". Use forward slashes only, even on Windows.');
  }
};
var validateContent = (content) => {
  if (typeof content !== "string" && !(content instanceof Uint8Array)) {
    throw new TypeError(`The "content" must be a string or Uint8Array, but you passed a value of type ${typeof content}`);
  }
  if (typeof content === "string" && content.trim() === "") {
    throw new Error("The `content` must not be empty");
  }
};
var validateRenderAsset = (artifact) => {
  if (artifact.type !== "artifact") {
    return;
  }
  validateArtifactFilename(artifact.filename);
  if (artifact.contentType === "thumbnail") {
    return;
  }
  validateContent(artifact.content);
};

// src/RenderAssetManager.tsx

var RenderAssetManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  registerRenderAsset: () => {
    return;
  },
  unregisterRenderAsset: () => {
    return;
  },
  renderAssets: []
});
var RenderAssetManagerProvider = ({ children }) => {
  const [renderAssets, setRenderAssets] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const registerRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((renderAsset) => {
    validateRenderAsset(renderAsset);
    setRenderAssets((assets) => {
      return [...assets, renderAsset];
    });
  }, []);
  const unregisterRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {
    setRenderAssets((assts) => {
      return assts.filter((a) => a.id !== id);
    });
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (typeof window !== "undefined") {
      window.remotion_collectAssets = () => {
        setRenderAssets([]);
        return renderAssets;
      };
    }
  }, [renderAssets]);
  const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      registerRenderAsset,
      unregisterRenderAsset,
      renderAssets
    };
  }, [renderAssets, registerRenderAsset, unregisterRenderAsset]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, {
    value: contextValue,
    children
  });
};

// src/Artifact.tsx
var ArtifactThumbnail = Symbol("Thumbnail");
var Artifact = ({ filename, content, downloadBehavior }) => {
  const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);
  const [env] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => getRemotionEnvironment());
  const frame = useCurrentFrame();
  const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {
    return String(Math.random());
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!env.isRendering) {
      return;
    }
    if (content instanceof Uint8Array) {
      registerRenderAsset({
        type: "artifact",
        id,
        content: btoa(new TextDecoder("utf8").decode(content)),
        filename,
        frame,
        contentType: "binary",
        downloadBehavior: downloadBehavior ?? null
      });
    } else if (content === ArtifactThumbnail) {
      registerRenderAsset({
        type: "artifact",
        id,
        filename,
        frame,
        contentType: "thumbnail",
        downloadBehavior: downloadBehavior ?? null
      });
    } else {
      registerRenderAsset({
        type: "artifact",
        id,
        content,
        filename,
        frame,
        contentType: "text",
        downloadBehavior: downloadBehavior ?? null
      });
    }
    return () => {
      return unregisterRenderAsset(id);
    };
  }, [
    content,
    env.isRendering,
    filename,
    frame,
    id,
    registerRenderAsset,
    unregisterRenderAsset,
    downloadBehavior
  ]);
  return null;
};
Artifact.Thumbnail = ArtifactThumbnail;
// src/audio/Audio.tsx


// src/absolute-src.ts
var getAbsoluteSrc = (relativeSrc) => {
  if (typeof window === "undefined") {
    return relativeSrc;
  }
  if (relativeSrc.startsWith("http://") || relativeSrc.startsWith("https://") || relativeSrc.startsWith("file://") || relativeSrc.startsWith("blob:") || relativeSrc.startsWith("data:")) {
    return relativeSrc;
  }
  return new URL(relativeSrc, window.origin).href;
};

// src/calculate-loop.ts
var calculateLoopDuration = ({
  endAt,
  mediaDuration,
  playbackRate,
  startFrom
}) => {
  let duration = mediaDuration;
  if (typeof endAt !== "undefined") {
    duration = endAt;
  }
  if (typeof startFrom !== "undefined") {
    duration -= startFrom;
  }
  const actualDuration = duration / playbackRate;
  return Math.floor(actualDuration);
};

// src/loop/index.tsx


var LoopContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
var useLoop = () => {
  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LoopContext);
};
var Loop = ({ durationInFrames, times = Infinity, children, name, ...props }) => {
  const currentFrame = useCurrentFrame();
  const { durationInFrames: compDuration } = useVideoConfig();
  validateDurationInFrames(durationInFrames, {
    component: "of the <Loop /> component",
    allowFloats: true
  });
  if (typeof times !== "number") {
    throw new TypeError(`You passed to "times" an argument of type ${typeof times}, but it must be a number.`);
  }
  if (times !== Infinity && times % 1 !== 0) {
    throw new TypeError(`The "times" prop of a loop must be an integer, but got ${times}.`);
  }
  if (times < 0) {
    throw new TypeError(`The "times" prop of a loop must be at least 0, but got ${times}`);
  }
  const maxTimes = Math.ceil(compDuration / durationInFrames);
  const actualTimes = Math.min(maxTimes, times);
  const style = props.layout === "none" ? undefined : props.style;
  const maxFrame = durationInFrames * (actualTimes - 1);
  const iteration = Math.floor(currentFrame / durationInFrames);
  const start = iteration * durationInFrames;
  const from = Math.min(start, maxFrame);
  const loopDisplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      numberOfTimes: actualTimes,
      startOffset: -from,
      durationInFrames
    };
  }, [actualTimes, durationInFrames, from]);
  const loopContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      iteration: Math.floor(currentFrame / durationInFrames),
      durationInFrames
    };
  }, [currentFrame, durationInFrames]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LoopContext.Provider, {
    value: loopContext,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
      durationInFrames,
      from,
      name: name ?? "<Loop>",
      _remotionInternalLoopDisplay: loopDisplay,
      layout: props.layout,
      style,
      children
    })
  });
};
Loop.useLoop = useLoop;

// src/prefetch.ts


// src/playback-logging.ts
var playbackLogging = ({
  logLevel,
  tag,
  message,
  mountTime
}) => {
  const tags = [mountTime ? Date.now() - mountTime + "ms " : null, tag].filter(Boolean).join(" ");
  Log.trace(logLevel, `[${tags}]`, message);
};

// src/prefetch-state.tsx


var PreloadContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
var preloads = {};
var updaters = [];
var setPreloads = (updater) => {
  preloads = updater(preloads);
  updaters.forEach((u) => u());
};
var PrefetchProvider = ({ children }) => {
  const [_preloads, _setPreloads] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => preloads);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const updaterFunction = () => {
      _setPreloads(preloads);
    };
    updaters.push(updaterFunction);
    return () => {
      updaters = updaters.filter((u) => u !== updaterFunction);
    };
  }, []);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, {
    value: _preloads,
    children
  });
};

// src/prefetch.ts
var removeAndGetHashFragment = (src) => {
  const hashIndex = src.indexOf("#");
  if (hashIndex === -1) {
    return null;
  }
  return hashIndex;
};
var getSrcWithoutHash = (src) => {
  const hashIndex = removeAndGetHashFragment(src);
  if (hashIndex === null) {
    return src;
  }
  return src.slice(0, hashIndex);
};
var usePreload = (src) => {
  const preloads2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreloadContext);
  const hashFragmentIndex = removeAndGetHashFragment(src);
  const withoutHashFragment = getSrcWithoutHash(src);
  if (!preloads2[withoutHashFragment]) {
    return src;
  }
  if (hashFragmentIndex !== null) {
    return preloads2[withoutHashFragment] + src.slice(hashFragmentIndex);
  }
  return preloads2[withoutHashFragment];
};
var blobToBase64 = function(blob) {
  const reader = new FileReader;
  return new Promise((resolve, reject) => {
    reader.onload = function() {
      const dataUrl = reader.result;
      resolve(dataUrl);
    };
    reader.onerror = (err) => {
      return reject(err);
    };
    reader.readAsDataURL(blob);
  });
};
var getBlobFromReader = async ({
  reader,
  contentType,
  contentLength,
  onProgress
}) => {
  let receivedLength = 0;
  const chunks = [];
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    chunks.push(value);
    receivedLength += value.length;
    if (onProgress) {
      onProgress({ loadedBytes: receivedLength, totalBytes: contentLength });
    }
  }
  const chunksAll = new Uint8Array(receivedLength);
  let position = 0;
  for (const chunk of chunks) {
    chunksAll.set(chunk, position);
    position += chunk.length;
  }
  return new Blob([chunksAll], {
    type: contentType ?? undefined
  });
};
var prefetch = (src, options) => {
  const method = options?.method ?? "blob-url";
  const logLevel = options?.logLevel ?? "info";
  const srcWithoutHash = getSrcWithoutHash(src);
  if (getRemotionEnvironment().isRendering) {
    return {
      free: () => {
        return;
      },
      waitUntilDone: () => Promise.resolve(srcWithoutHash)
    };
  }
  Log.verbose(logLevel, `[prefetch] Starting prefetch ${srcWithoutHash}`);
  let canceled = false;
  let objectUrl = null;
  let resolve = () => {
    return;
  };
  let reject = () => {
    return;
  };
  const waitUntilDone = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  const controller = new AbortController;
  let canBeAborted = true;
  fetch(srcWithoutHash, {
    signal: controller.signal,
    credentials: options?.credentials ?? undefined
  }).then((res) => {
    canBeAborted = false;
    if (canceled) {
      return null;
    }
    if (!res.ok) {
      throw new Error(`HTTP error, status = ${res.status}`);
    }
    const headerContentType = res.headers.get("Content-Type");
    const contentType = options?.contentType ?? headerContentType;
    const hasProperContentType = contentType && (contentType.startsWith("video/") || contentType.startsWith("audio/") || contentType.startsWith("image/"));
    if (!hasProperContentType) {
      console.warn(`Called prefetch() on ${srcWithoutHash} which returned a "Content-Type" of ${headerContentType}. Prefetched content should have a proper content type (video/... or audio/...) or a contentType passed the options of prefetch(). Otherwise, prefetching will not work properly in all browsers.`);
    }
    if (!res.body) {
      throw new Error(`HTTP response of ${srcWithoutHash} has no body`);
    }
    const reader = res.body.getReader();
    return getBlobFromReader({
      reader,
      contentType: options?.contentType ?? headerContentType ?? null,
      contentLength: res.headers.get("Content-Length") ? parseInt(res.headers.get("Content-Length"), 10) : null,
      onProgress: options?.onProgress
    });
  }).then((buf) => {
    if (!buf) {
      return;
    }
    const actualBlob = options?.contentType ? new Blob([buf], { type: options.contentType }) : buf;
    if (method === "base64") {
      return blobToBase64(actualBlob);
    }
    return URL.createObjectURL(actualBlob);
  }).then((url) => {
    if (canceled) {
      return;
    }
    playbackLogging({
      logLevel,
      tag: "prefetch",
      message: `Finished prefetch ${srcWithoutHash} with method ${method}`,
      mountTime: null
    });
    objectUrl = url;
    setPreloads((p) => ({
      ...p,
      [srcWithoutHash]: objectUrl
    }));
    resolve(objectUrl);
  }).catch((err) => {
    if (err?.message.includes("free() called")) {
      return;
    }
    reject(err);
  });
  return {
    free: () => {
      playbackLogging({
        logLevel,
        tag: "prefetch",
        message: `Freeing ${srcWithoutHash}`,
        mountTime: null
      });
      if (objectUrl) {
        if (method === "blob-url") {
          URL.revokeObjectURL(objectUrl);
        }
        setPreloads((p) => {
          const copy = { ...p };
          delete copy[srcWithoutHash];
          return copy;
        });
      } else {
        canceled = true;
        if (canBeAborted) {
          try {
            controller.abort(new Error("free() called"));
          } catch {}
        }
      }
    },
    waitUntilDone: () => {
      return waitUntilDone;
    }
  };
};

// src/validate-media-props.ts
var validateMediaProps = (props, component) => {
  if (typeof props.volume !== "number" && typeof props.volume !== "function" && typeof props.volume !== "undefined") {
    throw new TypeError(`You have passed a volume of type ${typeof props.volume} to your <${component} /> component. Volume must be a number or a function with the signature '(frame: number) => number' undefined.`);
  }
  if (typeof props.volume === "number" && props.volume < 0) {
    throw new TypeError(`You have passed a volume below 0 to your <${component} /> component. Volume must be between 0 and 1`);
  }
  if (typeof props.playbackRate !== "number" && typeof props.playbackRate !== "undefined") {
    throw new TypeError(`You have passed a playbackRate of type ${typeof props.playbackRate} to your <${component} /> component. Playback rate must a real number or undefined.`);
  }
  if (typeof props.playbackRate === "number" && (isNaN(props.playbackRate) || !Number.isFinite(props.playbackRate) || props.playbackRate <= 0)) {
    throw new TypeError(`You have passed a playbackRate of ${props.playbackRate} to your <${component} /> component. Playback rate must be a real number above 0.`);
  }
};

// src/validate-start-from-props.ts
var validateStartFromProps = (startFrom, endAt) => {
  if (typeof startFrom !== "undefined") {
    if (typeof startFrom !== "number") {
      throw new TypeError(`type of startFrom prop must be a number, instead got type ${typeof startFrom}.`);
    }
    if (isNaN(startFrom) || startFrom === Infinity) {
      throw new TypeError("startFrom prop can not be NaN or Infinity.");
    }
    if (startFrom < 0) {
      throw new TypeError(`startFrom must be greater than equal to 0 instead got ${startFrom}.`);
    }
  }
  if (typeof endAt !== "undefined") {
    if (typeof endAt !== "number") {
      throw new TypeError(`type of endAt prop must be a number, instead got type ${typeof endAt}.`);
    }
    if (isNaN(endAt)) {
      throw new TypeError("endAt prop can not be NaN.");
    }
    if (endAt <= 0) {
      throw new TypeError(`endAt must be a positive number, instead got ${endAt}.`);
    }
  }
  if (endAt < startFrom) {
    throw new TypeError("endAt prop must be greater than startFrom prop.");
  }
};
var validateTrimProps = (trimBefore, trimAfter) => {
  if (typeof trimBefore !== "undefined") {
    if (typeof trimBefore !== "number") {
      throw new TypeError(`type of trimBefore prop must be a number, instead got type ${typeof trimBefore}.`);
    }
    if (isNaN(trimBefore) || trimBefore === Infinity) {
      throw new TypeError("trimBefore prop can not be NaN or Infinity.");
    }
    if (trimBefore < 0) {
      throw new TypeError(`trimBefore must be greater than equal to 0 instead got ${trimBefore}.`);
    }
  }
  if (typeof trimAfter !== "undefined") {
    if (typeof trimAfter !== "number") {
      throw new TypeError(`type of trimAfter prop must be a number, instead got type ${typeof trimAfter}.`);
    }
    if (isNaN(trimAfter)) {
      throw new TypeError("trimAfter prop can not be NaN.");
    }
    if (trimAfter <= 0) {
      throw new TypeError(`trimAfter must be a positive number, instead got ${trimAfter}.`);
    }
  }
  if (trimAfter < trimBefore) {
    throw new TypeError("trimAfter prop must be greater than trimBefore prop.");
  }
};
var validateMediaTrimProps = ({
  startFrom,
  endAt,
  trimBefore,
  trimAfter
}) => {
  if (typeof startFrom !== "undefined" && typeof trimBefore !== "undefined") {
    throw new TypeError("Cannot use both startFrom and trimBefore props. Use trimBefore instead as startFrom is deprecated.");
  }
  if (typeof endAt !== "undefined" && typeof trimAfter !== "undefined") {
    throw new TypeError("Cannot use both endAt and trimAfter props. Use trimAfter instead as endAt is deprecated.");
  }
  const hasNewProps = typeof trimBefore !== "undefined" || typeof trimAfter !== "undefined";
  const hasOldProps = typeof startFrom !== "undefined" || typeof endAt !== "undefined";
  if (hasNewProps) {
    validateTrimProps(trimBefore, trimAfter);
  } else if (hasOldProps) {
    validateStartFromProps(startFrom, endAt);
  }
};
var resolveTrimProps = ({
  startFrom,
  endAt,
  trimBefore,
  trimAfter
}) => {
  const trimBeforeValue = trimBefore ?? startFrom ?? undefined;
  const trimAfterValue = trimAfter ?? endAt ?? undefined;
  return { trimBeforeValue, trimAfterValue };
};

// src/video/duration-state.tsx


var durationReducer = (state, action) => {
  switch (action.type) {
    case "got-duration": {
      const absoluteSrc = getAbsoluteSrc(action.src);
      if (state[absoluteSrc] === action.durationInSeconds) {
        return state;
      }
      return {
        ...state,
        [absoluteSrc]: action.durationInSeconds
      };
    }
    default:
      return state;
  }
};
var DurationsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  durations: {},
  setDurations: () => {
    throw new Error("context missing");
  }
});
var DurationsContextProvider = ({ children }) => {
  const [durations, setDurations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(durationReducer, {});
  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      durations,
      setDurations
    };
  }, [durations]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContext.Provider, {
    value,
    children
  });
};

// src/audio/AudioForPreview.tsx


// src/get-cross-origin-value.ts
var getCrossOriginValue = ({
  crossOrigin,
  requestsVideoFrame
}) => {
  if (crossOrigin !== undefined && crossOrigin !== null) {
    return crossOrigin;
  }
  if (requestsVideoFrame) {
    return "anonymous";
  }
  return;
};

// src/log-level-context.tsx


var LogLevelContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  logLevel: "info",
  mountTime: 0
});
var useLogLevel = () => {
  const { logLevel } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);
  if (logLevel === null) {
    throw new Error("useLogLevel must be used within a LogLevelProvider");
  }
  return logLevel;
};
var useMountTime = () => {
  const { mountTime } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);
  if (mountTime === null) {
    throw new Error("useMountTime must be used within a LogLevelProvider");
  }
  return mountTime;
};

// src/random.ts
function mulberry32(a) {
  let t = a + 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function hashCode(str) {
  let i = 0;
  let chr = 0;
  let hash = 0;
  for (i = 0;i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
}
var random = (seed, dummy) => {
  if (dummy !== undefined) {
    throw new TypeError("random() takes only one argument");
  }
  if (seed === null) {
    return Math.random();
  }
  if (typeof seed === "string") {
    return mulberry32(hashCode(seed));
  }
  if (typeof seed === "number") {
    return mulberry32(seed * 10000000000);
  }
  throw new Error("random() argument must be a number or a string");
};

// src/use-amplification.ts


// src/audio/shared-audio-tags.tsx


// src/play-and-handle-not-allowed-error.ts
var playAndHandleNotAllowedError = ({
  mediaRef,
  mediaType,
  onAutoPlayError,
  logLevel,
  mountTime,
  reason
}) => {
  const { current } = mediaRef;
  if (!current) {
    return;
  }
  playbackLogging({
    logLevel,
    tag: "play",
    message: `Attempting to play ${current.src}. Reason: ${reason}`,
    mountTime
  });
  const prom = current.play();
  if (!prom.catch) {
    return;
  }
  prom.catch((err) => {
    if (!current) {
      return;
    }
    if (err.message.includes("request was interrupted by a call to pause")) {
      return;
    }
    if (err.message.includes("The operation was aborted.")) {
      return;
    }
    if (err.message.includes("The fetching process for the media resource was aborted by the user agent")) {
      return;
    }
    if (err.message.includes("request was interrupted by a new load request")) {
      return;
    }
    if (err.message.includes("because the media was removed from the document")) {
      return;
    }
    if (err.message.includes("user didn't interact with the document") && current.muted) {
      return;
    }
    console.log(`Could not play ${mediaType} due to following error: `, err);
    if (!current.muted) {
      if (onAutoPlayError) {
        onAutoPlayError();
        return;
      }
      console.log(`The video will be muted and we'll retry playing it.`);
      if (mediaType === "video" && getRemotionEnvironment().isPlayer) {
        console.log("Use onAutoPlayError() to handle this error yourself.");
      }
      current.muted = true;
      current.play();
    }
  });
};

// src/audio/shared-element-source-node.ts
var makeSharedElementSourceNode = ({
  audioContext,
  ref
}) => {
  let connected = null;
  return {
    attemptToConnect: () => {
      if (!connected && ref.current) {
        const mediaElementSourceNode = audioContext.createMediaElementSource(ref.current);
        connected = mediaElementSourceNode;
      }
    },
    get: () => {
      if (!connected) {
        throw new Error("Audio element not connected");
      }
      return connected;
    }
  };
};

// src/audio/use-audio-context.ts

var warned = false;
var warnOnce = (logLevel) => {
  if (warned) {
    return;
  }
  warned = true;
  if (typeof window !== "undefined") {
    Log.warn(logLevel, "AudioContext is not supported in this browser");
  }
};
var useSingletonAudioContext = (logLevel, latencyHint) => {
  const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof AudioContext === "undefined") {
      warnOnce(logLevel);
      return null;
    }
    return new AudioContext({
      latencyHint
    });
  }, [logLevel, latencyHint]);
  return audioContext;
};

// src/audio/shared-audio-tags.tsx

var EMPTY_AUDIO = "data:audio/mp3;base64,/+MYxAAJcAV8AAgAABn//////+/gQ5BAMA+D4Pg+BAQBAEAwD4Pg+D4EBAEAQDAPg++hYBH///hUFQVBUFREDQNHmf///////+MYxBUGkAGIMAAAAP/29Xt6lUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV/+MYxDUAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
var compareProps = (obj1, obj2) => {
  const keysA = Object.keys(obj1).sort();
  const keysB = Object.keys(obj2).sort();
  if (keysA.length !== keysB.length) {
    return false;
  }
  for (let i = 0;i < keysA.length; i++) {
    if (keysA[i] !== keysB[i]) {
      return false;
    }
    if (obj1[keysA[i]] !== obj2[keysB[i]]) {
      return false;
    }
  }
  return true;
};
var didPropChange = (key, newProp, prevProp) => {
  if (key === "src" && !prevProp.startsWith("data:") && !newProp.startsWith("data:")) {
    return new URL(prevProp, window.origin).toString() !== new URL(newProp, window.origin).toString();
  }
  if (prevProp === newProp) {
    return false;
  }
  return true;
};
var SharedAudioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
var SharedAudioContextProvider = ({ children, numberOfAudioTags, component, audioLatencyHint }) => {
  const audios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);
  const [initialNumberOfAudioTags] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(numberOfAudioTags);
  if (numberOfAudioTags !== initialNumberOfAudioTags) {
    throw new Error("The number of shared audio tags has changed dynamically. Once you have set this property, you cannot change it afterwards.");
  }
  const logLevel = useLogLevel();
  const audioContext = useSingletonAudioContext(logLevel, audioLatencyHint);
  const refs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return new Array(numberOfAudioTags).fill(true).map(() => {
      const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();
      return {
        id: Math.random(),
        ref,
        mediaElementSourceNode: audioContext ? makeSharedElementSourceNode({
          audioContext,
          ref
        }) : null
      };
    });
  }, [audioContext, numberOfAudioTags]);
  const takenAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Array(numberOfAudioTags).fill(false));
  const rerenderAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    refs.forEach(({ ref, id }) => {
      const data = audios.current?.find((a) => a.id === id);
      const { current } = ref;
      if (!current) {
        return;
      }
      if (data === undefined) {
        current.src = EMPTY_AUDIO;
        return;
      }
      if (!data) {
        throw new TypeError("Expected audio data to be there");
      }
      Object.keys(data.props).forEach((key) => {
        if (didPropChange(key, data.props[key], current[key])) {
          current[key] = data.props[key];
        }
      });
    });
  }, [refs]);
  const registerAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options) => {
    const { aud, audioId, premounting } = options;
    const found = audios.current?.find((a) => a.audioId === audioId);
    if (found) {
      return found;
    }
    const firstFreeAudio = takenAudios.current.findIndex((a) => a === false);
    if (firstFreeAudio === -1) {
      throw new Error(`Tried to simultaneously mount ${numberOfAudioTags + 1} <Audio /> tags at the same time. With the current settings, the maximum amount of <Audio /> tags is limited to ${numberOfAudioTags} at the same time. Remotion pre-mounts silent audio tags to help avoid browser autoplay restrictions. See https://remotion.dev/docs/player/autoplay#using-the-numberofsharedaudiotags-prop for more information on how to increase this limit.`);
    }
    const { id, ref, mediaElementSourceNode } = refs[firstFreeAudio];
    const cloned = [...takenAudios.current];
    cloned[firstFreeAudio] = id;
    takenAudios.current = cloned;
    const newElem = {
      props: aud,
      id,
      el: ref,
      audioId,
      mediaElementSourceNode,
      premounting
    };
    audios.current?.push(newElem);
    rerenderAudios();
    return newElem;
  }, [numberOfAudioTags, refs, rerenderAudios]);
  const unregisterAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {
    const cloned = [...takenAudios.current];
    const index = refs.findIndex((r) => r.id === id);
    if (index === -1) {
      throw new TypeError("Error occured in ");
    }
    cloned[index] = false;
    takenAudios.current = cloned;
    audios.current = audios.current?.filter((a) => a.id !== id);
    rerenderAudios();
  }, [refs, rerenderAudios]);
  const updateAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({
    aud,
    audioId,
    id,
    premounting
  }) => {
    let changed = false;
    audios.current = audios.current?.map((prevA) => {
      if (prevA.id === id) {
        const isTheSame = compareProps(aud, prevA.props) && prevA.premounting === premounting;
        if (isTheSame) {
          return prevA;
        }
        changed = true;
        return {
          ...prevA,
          props: aud,
          premounting,
          audioId
        };
      }
      return prevA;
    });
    if (changed) {
      rerenderAudios();
    }
  }, [rerenderAudios]);
  const mountTime = useMountTime();
  const playAllAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    refs.forEach((ref) => {
      const audio = audios.current.find((a) => a.el === ref.ref);
      if (audio?.premounting) {
        return;
      }
      playAndHandleNotAllowedError({
        mediaRef: ref.ref,
        mediaType: "audio",
        onAutoPlayError: null,
        logLevel,
        mountTime,
        reason: "playing all audios"
      });
    });
    audioContext?.resume();
  }, [audioContext, logLevel, mountTime, refs]);
  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      registerAudio,
      unregisterAudio,
      updateAudio,
      playAllAudios,
      numberOfAudioTags,
      audioContext
    };
  }, [
    numberOfAudioTags,
    playAllAudios,
    registerAudio,
    unregisterAudio,
    updateAudio,
    audioContext
  ]);
  const resetAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    takenAudios.current = new Array(numberOfAudioTags).fill(false);
    audios.current = [];
    rerenderAudios();
  }, [numberOfAudioTags, rerenderAudios]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => {
      resetAudio();
    };
  }, [component, resetAudio]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SharedAudioContext.Provider, {
    value,
    children: [
      refs.map(({ id, ref }) => {
        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("audio", {
          ref,
          preload: "metadata",
          src: EMPTY_AUDIO
        }, id);
      }),
      children
    ]
  });
};
var useSharedAudio = ({
  aud,
  audioId,
  premounting
}) => {
  const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);
  const [elem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {
    if (ctx && ctx.numberOfAudioTags > 0) {
      return ctx.registerAudio({ aud, audioId, premounting });
    }
    const el = react__WEBPACK_IMPORTED_MODULE_0__.createRef();
    const mediaElementSourceNode = ctx?.audioContext ? makeSharedElementSourceNode({
      audioContext: ctx.audioContext,
      ref: el
    }) : null;
    return {
      el,
      id: Math.random(),
      props: aud,
      audioId,
      mediaElementSourceNode,
      premounting
    };
  });
  const effectToUse = react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect ?? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;
  if (typeof document !== "undefined") {
    effectToUse(() => {
      if (ctx && ctx.numberOfAudioTags > 0) {
        ctx.updateAudio({ id: elem.id, aud, audioId, premounting });
      }
    }, [aud, ctx, elem.id, audioId, premounting]);
    effectToUse(() => {
      return () => {
        if (ctx && ctx.numberOfAudioTags > 0) {
          ctx.unregisterAudio(elem.id);
        }
      };
    }, [ctx, elem.id]);
  }
  return elem;
};

// src/is-approximately-the-same.ts
var FLOATING_POINT_ERROR_THRESHOLD = 0.00001;
var isApproximatelyTheSame = (num1, num2) => {
  return Math.abs(num1 - num2) < FLOATING_POINT_ERROR_THRESHOLD;
};

// src/video/video-fragment.ts

var toSeconds = (time, fps) => {
  return Math.round(time / fps * 100) / 100;
};
var isSafari = () => {
  if (typeof window === "undefined") {
    return false;
  }
  const isAppleWebKit = /AppleWebKit/.test(window.navigator.userAgent);
  if (!isAppleWebKit) {
    return false;
  }
  const isNotChrome = !window.navigator.userAgent.includes("Chrome/");
  return isNotChrome;
};
var isIosSafari = () => {
  if (typeof window === "undefined") {
    return false;
  }
  const isIpadIPodIPhone = /iP(ad|od|hone)/i.test(window.navigator.userAgent);
  return isIpadIPodIPhone && isSafari();
};
var isIOSSafariAndBlob = (actualSrc) => {
  return isIosSafari() && actualSrc.startsWith("blob:");
};
var getVideoFragmentStart = ({
  actualFrom,
  fps
}) => {
  return toSeconds(Math.max(0, -actualFrom), fps);
};
var getVideoFragmentEnd = ({
  duration,
  fps
}) => {
  return toSeconds(duration, fps);
};
var appendVideoFragment = ({
  actualSrc,
  actualFrom,
  duration,
  fps
}) => {
  if (isIOSSafariAndBlob(actualSrc)) {
    return actualSrc;
  }
  if (actualSrc.startsWith("data:")) {
    return actualSrc;
  }
  const existingHash = Boolean(new URL(actualSrc, (typeof window === "undefined" ? null : window.location.href) ?? "http://localhost:3000").hash);
  if (existingHash) {
    return actualSrc;
  }
  if (!Number.isFinite(actualFrom)) {
    return actualSrc;
  }
  const withStartHash = `${actualSrc}#t=${getVideoFragmentStart({ actualFrom, fps })}`;
  if (!Number.isFinite(duration)) {
    return withStartHash;
  }
  return `${withStartHash},${getVideoFragmentEnd({ duration, fps })}`;
};
var isSubsetOfDuration = ({
  prevStartFrom,
  newStartFrom,
  prevDuration,
  newDuration,
  fps
}) => {
  const previousFrom = getVideoFragmentStart({ actualFrom: prevStartFrom, fps });
  const newFrom = getVideoFragmentStart({ actualFrom: newStartFrom, fps });
  const previousEnd = getVideoFragmentEnd({ duration: prevDuration, fps });
  const newEnd = getVideoFragmentEnd({ duration: newDuration, fps });
  if (newFrom < previousFrom) {
    return false;
  }
  if (newEnd > previousEnd) {
    return false;
  }
  return true;
};
var useAppendVideoFragment = ({
  actualSrc: initialActualSrc,
  actualFrom: initialActualFrom,
  duration: initialDuration,
  fps
}) => {
  const actualFromRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualFrom);
  const actualDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialDuration);
  const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualSrc);
  if (!isSubsetOfDuration({
    prevStartFrom: actualFromRef.current,
    newStartFrom: initialActualFrom,
    prevDuration: actualDuration.current,
    newDuration: initialDuration,
    fps
  }) || initialActualSrc !== actualSrc.current) {
    actualFromRef.current = initialActualFrom;
    actualDuration.current = initialDuration;
    actualSrc.current = initialActualSrc;
  }
  const appended = appendVideoFragment({
    actualSrc: actualSrc.current,
    actualFrom: actualFromRef.current,
    duration: actualDuration.current,
    fps
  });
  return appended;
};

// src/use-amplification.ts
var warned2 = false;
var warnSafariOnce = (logLevel) => {
  if (warned2) {
    return;
  }
  warned2 = true;
  Log.warn(logLevel, "In Safari, setting a volume and a playback rate at the same time is buggy.");
  Log.warn(logLevel, "In Desktop Safari, only volumes <= 1 will be applied.");
  Log.warn(logLevel, "In Mobile Safari, the volume will be ignored and set to 1 if a playbackRate is set.");
};
var useVolume = ({
  mediaRef,
  volume,
  logLevel,
  source,
  shouldUseWebAudioApi
}) => {
  const audioStuffRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const currentVolumeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(volume);
  currentVolumeRef.current = volume;
  const sharedAudioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);
  if (!sharedAudioContext) {
    throw new Error("useAmplification must be used within a SharedAudioContext");
  }
  const { audioContext } = sharedAudioContext;
  if (typeof window !== "undefined") {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
      if (!audioContext) {
        return;
      }
      if (!mediaRef.current) {
        return;
      }
      if (!shouldUseWebAudioApi) {
        return;
      }
      if (mediaRef.current.playbackRate !== 1 && isSafari()) {
        warnSafariOnce(logLevel);
        return;
      }
      if (!source) {
        return;
      }
      const gainNode = new GainNode(audioContext, {
        gain: currentVolumeRef.current
      });
      source.attemptToConnect();
      source.get().connect(gainNode);
      gainNode.connect(audioContext.destination);
      audioStuffRef.current = {
        gainNode
      };
      Log.trace(logLevel, `Starting to amplify ${mediaRef.current?.src}. Gain = ${currentVolumeRef.current}, playbackRate = ${mediaRef.current?.playbackRate}`);
      return () => {
        audioStuffRef.current = null;
        gainNode.disconnect();
        source.get().disconnect();
      };
    }, [logLevel, mediaRef, audioContext, source, shouldUseWebAudioApi]);
  }
  if (audioStuffRef.current) {
    const valueToSet = volume;
    if (!isApproximatelyTheSame(audioStuffRef.current.gainNode.gain.value, valueToSet)) {
      audioStuffRef.current.gainNode.gain.value = valueToSet;
      Log.trace(logLevel, `Setting gain to ${valueToSet} for ${mediaRef.current?.src}`);
    }
  }
  const safariCase = isSafari() && mediaRef.current && mediaRef.current?.playbackRate !== 1;
  const shouldUseTraditionalVolume = safariCase || !shouldUseWebAudioApi;
  if (shouldUseTraditionalVolume && mediaRef.current && !isApproximatelyTheSame(volume, mediaRef.current?.volume)) {
    mediaRef.current.volume = Math.min(volume, 1);
  }
  return audioStuffRef;
};

// src/use-media-in-timeline.ts


// src/audio/use-audio-frame.ts

var useMediaStartsAt = () => {
  const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const startsAt = Math.min(0, parentSequence?.relativeFrom ?? 0);
  return startsAt;
};
var useFrameForVolumeProp = (behavior) => {
  const loop = Loop.useLoop();
  const frame = useCurrentFrame();
  const startsAt = useMediaStartsAt();
  if (behavior === "repeat" || loop === null) {
    return frame + startsAt;
  }
  return frame + startsAt + loop.durationInFrames * loop.iteration;
};

// src/get-asset-file-name.ts
var getAssetDisplayName = (filename) => {
  if (/data:|blob:/.test(filename.substring(0, 5))) {
    return "Data URL";
  }
  const splitted = filename.split("/").map((s) => s.split("\\")).flat(1);
  return splitted[splitted.length - 1];
};

// src/volume-prop.ts
var evaluateVolume = ({
  frame,
  volume,
  mediaVolume = 1
}) => {
  if (typeof volume === "number") {
    return volume * mediaVolume;
  }
  if (typeof volume === "undefined") {
    return Number(mediaVolume);
  }
  const evaluated = volume(frame) * mediaVolume;
  if (typeof evaluated !== "number") {
    throw new TypeError(`You passed in a a function to the volume prop but it did not return a number but a value of type ${typeof evaluated} for frame ${frame}`);
  }
  if (Number.isNaN(evaluated)) {
    throw new TypeError(`You passed in a function to the volume prop but it returned NaN for frame ${frame}.`);
  }
  if (!Number.isFinite(evaluated)) {
    throw new TypeError(`You passed in a function to the volume prop but it returned a non-finite number for frame ${frame}.`);
  }
  return Math.max(0, evaluated);
};

// src/use-media-in-timeline.ts
var didWarn = {};
var warnOnce2 = (message) => {
  if (didWarn[message]) {
    return;
  }
  console.warn(message);
  didWarn[message] = true;
};
var useMediaInTimeline = ({
  volume,
  mediaVolume,
  mediaRef,
  src,
  mediaType,
  playbackRate,
  displayName,
  id,
  stack,
  showInTimeline,
  premountDisplay,
  postmountDisplay,
  onAutoPlayError,
  isPremounting,
  isPostmounting
}) => {
  const videoConfig = useVideoConfig();
  const { rootId, audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const actualFrom = parentSequence ? parentSequence.relativeFrom + parentSequence.cumulatedFrom : 0;
  const { imperativePlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const startsAt = useMediaStartsAt();
  const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);
  const [initialVolume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => volume);
  const logLevel = useLogLevel();
  const mountTime = useMountTime();
  const nonce = useNonce();
  const duration = parentSequence ? Math.min(parentSequence.durationInFrames, videoConfig.durationInFrames) : videoConfig.durationInFrames;
  const doesVolumeChange = typeof volume === "function";
  const volumes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (typeof volume === "number") {
      return volume;
    }
    return new Array(Math.floor(Math.max(0, duration + startsAt))).fill(true).map((_, i) => {
      return evaluateVolume({
        frame: i + startsAt,
        volume,
        mediaVolume
      });
    }).join(",");
  }, [duration, startsAt, volume, mediaVolume]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (typeof volume === "number" && volume !== initialVolume) {
      warnOnce2(`Remotion: The ${mediaType} with src ${src} has changed it's volume. Prefer the callback syntax for setting volume to get better timeline display: https://www.remotion.dev/docs/audio/volume`);
    }
  }, [initialVolume, mediaType, src, volume]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!mediaRef.current) {
      return;
    }
    if (!src) {
      throw new Error("No src passed");
    }
    if (!getRemotionEnvironment().isStudio && window.process?.env?.NODE_ENV !== "test") {
      return;
    }
    if (!showInTimeline) {
      return;
    }
    registerSequence({
      type: mediaType,
      src,
      id,
      duration,
      from: 0,
      parent: parentSequence?.id ?? null,
      displayName: displayName ?? getAssetDisplayName(src),
      rootId,
      volume: volumes,
      showInTimeline: true,
      nonce,
      startMediaFrom: 0 - startsAt,
      doesVolumeChange,
      loopDisplay: undefined,
      playbackRate,
      stack,
      premountDisplay,
      postmountDisplay
    });
    return () => {
      unregisterSequence(id);
    };
  }, [
    actualFrom,
    duration,
    id,
    parentSequence,
    src,
    registerSequence,
    rootId,
    unregisterSequence,
    videoConfig,
    volumes,
    doesVolumeChange,
    nonce,
    mediaRef,
    mediaType,
    startsAt,
    playbackRate,
    displayName,
    stack,
    showInTimeline,
    premountDisplay,
    postmountDisplay
  ]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const tag = {
      id,
      play: (reason) => {
        if (!imperativePlaying.current) {
          return;
        }
        if (isPremounting || isPostmounting) {
          return;
        }
        return playAndHandleNotAllowedError({
          mediaRef,
          mediaType,
          onAutoPlayError,
          logLevel,
          mountTime,
          reason
        });
      }
    };
    audioAndVideoTags.current.push(tag);
    return () => {
      audioAndVideoTags.current = audioAndVideoTags.current.filter((a) => a.id !== id);
    };
  }, [
    audioAndVideoTags,
    id,
    mediaRef,
    mediaType,
    onAutoPlayError,
    imperativePlaying,
    isPremounting,
    isPostmounting,
    logLevel,
    mountTime
  ]);
};

// src/use-media-playback.ts


// src/buffer-until-first-frame.ts


// src/use-buffer-state.ts


// src/buffering.tsx


var useBufferManager = (logLevel, mountTime) => {
  const [blocks, setBlocks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [onBufferingCallbacks, setOnBufferingCallbacks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [onResumeCallbacks, setOnResumeCallbacks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const buffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const addBlock = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((block) => {
    setBlocks((b) => [...b, block]);
    return {
      unblock: () => {
        setBlocks((b) => {
          const newArr = b.filter((bx) => bx !== block);
          if (newArr.length === b.length) {
            return b;
          }
          return newArr;
        });
      }
    };
  }, []);
  const listenForBuffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback) => {
    setOnBufferingCallbacks((c) => [...c, callback]);
    return {
      remove: () => {
        setOnBufferingCallbacks((c) => c.filter((cb) => cb !== callback));
      }
    };
  }, []);
  const listenForResume = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback) => {
    setOnResumeCallbacks((c) => [...c, callback]);
    return {
      remove: () => {
        setOnResumeCallbacks((c) => c.filter((cb) => cb !== callback));
      }
    };
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (blocks.length > 0) {
      onBufferingCallbacks.forEach((c) => c());
      playbackLogging({
        logLevel,
        message: "Player is entering buffer state",
        mountTime,
        tag: "player"
      });
    }
  }, [blocks]);
  if (typeof window !== "undefined") {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
      if (blocks.length === 0) {
        onResumeCallbacks.forEach((c) => c());
        playbackLogging({
          logLevel,
          message: "Player is exiting buffer state",
          mountTime,
          tag: "player"
        });
      }
    }, [blocks]);
  }
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return { addBlock, listenForBuffering, listenForResume, buffering };
  }, [addBlock, buffering, listenForBuffering, listenForResume]);
};
var BufferingContextReact = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);
var BufferingProvider = ({ children }) => {
  const { logLevel, mountTime } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LogLevelContext);
  const bufferManager = useBufferManager(logLevel ?? "info", mountTime);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingContextReact.Provider, {
    value: bufferManager,
    children
  });
};
var useIsPlayerBuffering = (bufferManager) => {
  const [isBuffering, setIsBuffering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(bufferManager.buffering.current);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const onBuffer = () => {
      setIsBuffering(true);
    };
    const onResume = () => {
      setIsBuffering(false);
    };
    bufferManager.listenForBuffering(onBuffer);
    bufferManager.listenForResume(onResume);
    return () => {
      bufferManager.listenForBuffering(() => {
        return;
      });
      bufferManager.listenForResume(() => {
        return;
      });
    };
  }, [bufferManager]);
  return isBuffering;
};

// src/use-buffer-state.ts
var useBufferState = () => {
  const buffer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BufferingContextReact);
  const addBlock = buffer ? buffer.addBlock : null;
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    delayPlayback: () => {
      if (!addBlock) {
        throw new Error("Tried to enable the buffering state, but a Remotion context was not found. This API can only be called in a component that was passed to the Remotion Player or a <Composition>. Or you might have experienced a version mismatch - run `npx remotion versions` and ensure all packages have the same version. This error is thrown by the buffer state https://remotion.dev/docs/player/buffer-state");
      }
      const { unblock } = addBlock({
        id: String(Math.random())
      });
      return { unblock };
    }
  }), [addBlock]);
};

// src/buffer-until-first-frame.ts
var isSafariWebkit = () => {
  const isSafari2 = /^((?!chrome|android).)*safari/i.test(window.navigator.userAgent);
  return isSafari2;
};
var useBufferUntilFirstFrame = ({
  mediaRef,
  mediaType,
  onVariableFpsVideoDetected,
  pauseWhenBuffering,
  logLevel,
  mountTime
}) => {
  const bufferingRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const { delayPlayback } = useBufferState();
  const bufferUntilFirstFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((requestedTime) => {
    if (mediaType !== "video") {
      return;
    }
    if (!pauseWhenBuffering) {
      return;
    }
    const current = mediaRef.current;
    if (!current) {
      return;
    }
    if (current.readyState >= current.HAVE_FUTURE_DATA && !isSafariWebkit()) {
      playbackLogging({
        logLevel,
        message: `Not using buffer until first frame, because readyState is ${current.readyState} and is not Safari or Desktop Chrome`,
        mountTime,
        tag: "buffer"
      });
      return;
    }
    if (!current.requestVideoFrameCallback) {
      playbackLogging({
        logLevel,
        message: `Not using buffer until first frame, because requestVideoFrameCallback is not supported`,
        mountTime,
        tag: "buffer"
      });
      return;
    }
    bufferingRef.current = true;
    playbackLogging({
      logLevel,
      message: `Buffering ${mediaRef.current?.src} until the first frame is received`,
      mountTime,
      tag: "buffer"
    });
    const playback = delayPlayback();
    const unblock = () => {
      playback.unblock();
      current.removeEventListener("ended", unblock, {
        once: true
      });
      current.removeEventListener("pause", unblock, {
        once: true
      });
      bufferingRef.current = false;
    };
    const onEndedOrPauseOrCanPlay = () => {
      unblock();
    };
    current.requestVideoFrameCallback((_, info) => {
      const differenceFromRequested = Math.abs(info.mediaTime - requestedTime);
      if (differenceFromRequested > 0.5) {
        onVariableFpsVideoDetected();
      }
      unblock();
    });
    current.addEventListener("ended", onEndedOrPauseOrCanPlay, { once: true });
    current.addEventListener("pause", onEndedOrPauseOrCanPlay, { once: true });
    current.addEventListener("canplay", onEndedOrPauseOrCanPlay, {
      once: true
    });
  }, [
    delayPlayback,
    logLevel,
    mediaRef,
    mediaType,
    mountTime,
    onVariableFpsVideoDetected,
    pauseWhenBuffering
  ]);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      isBuffering: () => bufferingRef.current,
      bufferUntilFirstFrame
    };
  }, [bufferUntilFirstFrame]);
};

// src/media-tag-current-time-timestamp.ts

var useCurrentTimeOfMediaTagWithUpdateTimeStamp = (mediaRef) => {
  const lastUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useRef({
    time: mediaRef.current?.currentTime ?? 0,
    lastUpdate: performance.now()
  });
  const nowCurrentTime = mediaRef.current?.currentTime ?? null;
  if (nowCurrentTime !== null) {
    if (lastUpdate.current.time !== nowCurrentTime) {
      lastUpdate.current.time = nowCurrentTime;
      lastUpdate.current.lastUpdate = performance.now();
    }
  }
  return lastUpdate;
};

// src/seek.ts
var seek = ({
  mediaRef,
  time,
  logLevel,
  why,
  mountTime
}) => {
  const timeToSet = isIosSafari() ? Number(time.toFixed(1)) : time;
  playbackLogging({
    logLevel,
    tag: "seek",
    message: `Seeking from ${mediaRef.currentTime} to ${timeToSet}. src= ${mediaRef.src} Reason: ${why}`,
    mountTime
  });
  mediaRef.currentTime = timeToSet;
  return timeToSet;
};

// src/use-media-buffering.ts

var useMediaBuffering = ({
  element,
  shouldBuffer,
  isPremounting,
  isPostmounting,
  logLevel,
  mountTime,
  src
}) => {
  const buffer = useBufferState();
  const [isBuffering, setIsBuffering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    let cleanupFns = [];
    const { current } = element;
    if (!current) {
      return;
    }
    if (!shouldBuffer) {
      return;
    }
    if (isPremounting || isPostmounting) {
      if ((isPremounting || isPostmounting) && current.readyState < current.HAVE_FUTURE_DATA) {
        if (!navigator.userAgent.includes("Firefox/")) {
          playbackLogging({
            logLevel,
            message: `Calling .load() on ${current.src} because readyState is ${current.readyState} and it is not Firefox. Element is premounted ${current.playbackRate}`,
            tag: "load",
            mountTime
          });
          const previousPlaybackRate = current.playbackRate;
          current.load();
          current.playbackRate = previousPlaybackRate;
        }
      }
      return;
    }
    const cleanup = (reason) => {
      let didDoSomething = false;
      cleanupFns.forEach((fn) => {
        fn(reason);
        didDoSomething = true;
      });
      cleanupFns = [];
      setIsBuffering((previous) => {
        if (previous) {
          didDoSomething = true;
        }
        return false;
      });
      if (didDoSomething) {
        playbackLogging({
          logLevel,
          message: `Unmarking as buffering: ${current.src}. Reason: ${reason}`,
          tag: "buffer",
          mountTime
        });
      }
    };
    const blockMedia = (reason) => {
      setIsBuffering(true);
      playbackLogging({
        logLevel,
        message: `Marking as buffering: ${current.src}. Reason: ${reason}`,
        tag: "buffer",
        mountTime
      });
      const { unblock } = buffer.delayPlayback();
      const onCanPlay = () => {
        cleanup('"canplay" was fired');
        init();
      };
      const onError = () => {
        cleanup('"error" event was occurred');
        init();
      };
      current.addEventListener("canplay", onCanPlay, {
        once: true
      });
      cleanupFns.push(() => {
        current.removeEventListener("canplay", onCanPlay);
      });
      current.addEventListener("error", onError, {
        once: true
      });
      cleanupFns.push(() => {
        current.removeEventListener("error", onError);
      });
      cleanupFns.push((cleanupReason) => {
        playbackLogging({
          logLevel,
          message: `Unblocking ${current.src} from buffer. Reason: ${cleanupReason}`,
          tag: "buffer",
          mountTime
        });
        unblock();
      });
    };
    const init = () => {
      if (current.readyState < current.HAVE_FUTURE_DATA) {
        blockMedia(`readyState is ${current.readyState}, which is less than HAVE_FUTURE_DATA`);
        if (!navigator.userAgent.includes("Firefox/")) {
          playbackLogging({
            logLevel,
            message: `Calling .load() on ${src} because readyState is ${current.readyState} and it is not Firefox. ${current.playbackRate}`,
            tag: "load",
            mountTime
          });
          const previousPlaybackRate = current.playbackRate;
          current.load();
          current.playbackRate = previousPlaybackRate;
        }
      } else {
        const onWaiting = () => {
          blockMedia('"waiting" event was fired');
        };
        current.addEventListener("waiting", onWaiting);
        cleanupFns.push(() => {
          current.removeEventListener("waiting", onWaiting);
        });
      }
    };
    init();
    return () => {
      cleanup("element was unmounted or prop changed");
    };
  }, [
    buffer,
    src,
    element,
    isPremounting,
    isPostmounting,
    logLevel,
    shouldBuffer,
    mountTime
  ]);
  return isBuffering;
};

// src/use-request-video-callback-time.ts

var useRequestVideoCallbackTime = ({
  mediaRef,
  mediaType,
  lastSeek,
  onVariableFpsVideoDetected
}) => {
  const currentTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = mediaRef;
    if (current) {
      currentTime.current = {
        time: current.currentTime,
        lastUpdate: performance.now()
      };
    } else {
      currentTime.current = null;
      return;
    }
    if (mediaType !== "video") {
      currentTime.current = null;
      return;
    }
    const videoTag = current;
    if (!videoTag.requestVideoFrameCallback) {
      return;
    }
    let cancel = () => {
      return;
    };
    const request = () => {
      if (!videoTag) {
        return;
      }
      const cb = videoTag.requestVideoFrameCallback((_, info) => {
        if (currentTime.current !== null) {
          const difference = Math.abs(currentTime.current.time - info.mediaTime);
          const differenceToLastSeek = Math.abs(lastSeek.current === null ? Infinity : info.mediaTime - lastSeek.current);
          if (difference > 0.5 && differenceToLastSeek > 0.5 && info.mediaTime > currentTime.current.time) {
            onVariableFpsVideoDetected();
          }
        }
        currentTime.current = {
          time: info.mediaTime,
          lastUpdate: performance.now()
        };
        request();
      });
      cancel = () => {
        videoTag.cancelVideoFrameCallback(cb);
        cancel = () => {
          return;
        };
      };
    };
    request();
    return () => {
      cancel();
    };
  }, [lastSeek, mediaRef, mediaType, onVariableFpsVideoDetected]);
  return currentTime;
};

// src/interpolate.ts
function interpolateFunction(input, inputRange, outputRange, options) {
  const { extrapolateLeft, extrapolateRight, easing } = options;
  let result = input;
  const [inputMin, inputMax] = inputRange;
  const [outputMin, outputMax] = outputRange;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") {
      return result;
    }
    if (extrapolateLeft === "clamp") {
      result = inputMin;
    } else if (extrapolateLeft === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateLeft === "extend") {}
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") {
      return result;
    }
    if (extrapolateRight === "clamp") {
      result = inputMax;
    } else if (extrapolateRight === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateRight === "extend") {}
  }
  if (outputMin === outputMax) {
    return outputMin;
  }
  result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  let i;
  for (i = 1;i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}
function checkValidInputRange(arr) {
  for (let i = 1;i < arr.length; ++i) {
    if (!(arr[i] > arr[i - 1])) {
      throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(",")}]`);
    }
  }
}
function checkInfiniteRange(name, arr) {
  if (arr.length < 2) {
    throw new Error(name + " must have at least 2 elements");
  }
  for (const element of arr) {
    if (typeof element !== "number") {
      throw new Error(`${name} must contain only numbers`);
    }
    if (!Number.isFinite(element)) {
      throw new Error(`${name} must contain only finite numbers, but got [${arr.join(",")}]`);
    }
  }
}
function interpolate(input, inputRange, outputRange, options) {
  if (typeof input === "undefined") {
    throw new Error("input can not be undefined");
  }
  if (typeof inputRange === "undefined") {
    throw new Error("inputRange can not be undefined");
  }
  if (typeof outputRange === "undefined") {
    throw new Error("outputRange can not be undefined");
  }
  if (inputRange.length !== outputRange.length) {
    throw new Error("inputRange (" + inputRange.length + ") and outputRange (" + outputRange.length + ") must have the same length");
  }
  checkInfiniteRange("inputRange", inputRange);
  checkInfiniteRange("outputRange", outputRange);
  checkValidInputRange(inputRange);
  const easing = options?.easing ?? ((num) => num);
  let extrapolateLeft = "extend";
  if (options?.extrapolateLeft !== undefined) {
    extrapolateLeft = options.extrapolateLeft;
  }
  let extrapolateRight = "extend";
  if (options?.extrapolateRight !== undefined) {
    extrapolateRight = options.extrapolateRight;
  }
  if (typeof input !== "number") {
    throw new TypeError("Cannot interpolate an input which is not a number");
  }
  const range = findRange(input, inputRange);
  return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {
    easing,
    extrapolateLeft,
    extrapolateRight
  });
}

// src/video/get-current-time.ts
var getExpectedMediaFrameUncorrected = ({
  frame,
  playbackRate,
  startFrom
}) => {
  return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);
};
var getMediaTime = ({
  fps,
  frame,
  playbackRate,
  startFrom
}) => {
  const expectedFrame = getExpectedMediaFrameUncorrected({
    frame,
    playbackRate,
    startFrom
  });
  const msPerFrame = 1000 / fps;
  return expectedFrame * msPerFrame / 1000;
};

// src/warn-about-non-seekable-media.ts
var alreadyWarned = {};
var warnAboutNonSeekableMedia = (ref, type) => {
  if (ref === null) {
    return;
  }
  if (ref.seekable.length === 0) {
    return;
  }
  if (ref.seekable.length > 1) {
    return;
  }
  if (alreadyWarned[ref.src]) {
    return;
  }
  const range = { start: ref.seekable.start(0), end: ref.seekable.end(0) };
  if (range.start === 0 && range.end === 0) {
    const msg = [
      `The media ${ref.src} cannot be seeked. This could be one of few reasons:`,
      "1) The media resource was replaced while the video is playing but it was not loaded yet.",
      "2) The media does not support seeking.",
      "3) The media was loaded with security headers prventing it from being included.",
      "Please see https://remotion.dev/docs/non-seekable-media for assistance."
    ].join(`
`);
    if (type === "console-error") {
      console.error(msg);
    } else if (type === "console-warning") {
      console.warn(`The media ${ref.src} does not support seeking. The video will render fine, but may not play correctly in the Remotion Studio and in the <Player>. See https://remotion.dev/docs/non-seekable-media for an explanation.`);
    } else {
      throw new Error(msg);
    }
    alreadyWarned[ref.src] = true;
  }
};

// src/use-media-playback.ts
var useMediaPlayback = ({
  mediaRef,
  src,
  mediaType,
  playbackRate: localPlaybackRate,
  onlyWarnForMediaSeekingError,
  acceptableTimeshift,
  pauseWhenBuffering,
  isPremounting,
  isPostmounting,
  onAutoPlayError
}) => {
  const { playbackRate: globalPlaybackRate } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);
  const frame = useCurrentFrame();
  const absoluteFrame = useTimelinePosition();
  const [playing] = usePlayingState();
  const buffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BufferingContextReact);
  const { fps } = useVideoConfig();
  const mediaStartsAt = useMediaStartsAt();
  const lastSeekDueToShift = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const lastSeek = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const logLevel = useLogLevel();
  const mountTime = useMountTime();
  if (!buffering) {
    throw new Error("useMediaPlayback must be used inside a <BufferingContext>");
  }
  const isVariableFpsVideoMap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});
  const onVariableFpsVideoDetected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (!src) {
      return;
    }
    if (isVariableFpsVideoMap.current[src]) {
      return;
    }
    Log.verbose(logLevel, `Detected ${src} as a variable FPS video. Disabling buffering while seeking.`);
    isVariableFpsVideoMap.current[src] = true;
  }, [logLevel, src]);
  const rvcCurrentTime = useRequestVideoCallbackTime({
    mediaRef,
    mediaType,
    lastSeek,
    onVariableFpsVideoDetected
  });
  const mediaTagCurrentTime = useCurrentTimeOfMediaTagWithUpdateTimeStamp(mediaRef);
  const desiredUnclampedTime = getMediaTime({
    frame,
    playbackRate: localPlaybackRate,
    startFrom: -mediaStartsAt,
    fps
  });
  const isMediaTagBuffering = useMediaBuffering({
    element: mediaRef,
    shouldBuffer: pauseWhenBuffering,
    isPremounting,
    isPostmounting,
    logLevel,
    mountTime,
    src: src ?? null
  });
  const { bufferUntilFirstFrame, isBuffering } = useBufferUntilFirstFrame({
    mediaRef,
    mediaType,
    onVariableFpsVideoDetected,
    pauseWhenBuffering,
    logLevel,
    mountTime
  });
  const playbackRate = localPlaybackRate * globalPlaybackRate;
  const acceptableTimeShiftButLessThanDuration = (() => {
    const DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_NORMAL_PLAYBACK = 0.45;
    const DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_AMPLIFICATION = DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_NORMAL_PLAYBACK + 0.2;
    const defaultAcceptableTimeshift = DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_AMPLIFICATION;
    if (mediaRef.current?.duration) {
      return Math.min(mediaRef.current.duration, acceptableTimeshift ?? defaultAcceptableTimeshift);
    }
    return acceptableTimeshift ?? defaultAcceptableTimeshift;
  })();
  const isPlayerBuffering = useIsPlayerBuffering(buffering);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (mediaRef.current?.paused) {
      return;
    }
    if (!playing) {
      playbackLogging({
        logLevel,
        tag: "pause",
        message: `Pausing ${mediaRef.current?.src} because ${isPremounting ? "media is premounting" : isPostmounting ? "media is postmounting" : "Player is not playing"}`,
        mountTime
      });
      mediaRef.current?.pause();
      return;
    }
    const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
    const playerBufferingNotStateButLive = buffering.buffering.current;
    if (playerBufferingNotStateButLive && !isMediaTagBufferingOrStalled) {
      playbackLogging({
        logLevel,
        tag: "pause",
        message: `Pausing ${mediaRef.current?.src} because player is buffering but media tag is not`,
        mountTime
      });
      mediaRef.current?.pause();
    }
  }, [
    isBuffering,
    isMediaTagBuffering,
    buffering,
    isPlayerBuffering,
    isPremounting,
    logLevel,
    mediaRef,
    mediaType,
    mountTime,
    playing,
    isPostmounting
  ]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    const playbackRateToSet = Math.max(0, playbackRate);
    if (mediaRef.current && mediaRef.current.playbackRate !== playbackRateToSet) {
      mediaRef.current.playbackRate = playbackRateToSet;
    }
  }, [mediaRef, playbackRate]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const tagName = mediaType === "audio" ? "<Audio>" : "<Video>";
    if (!mediaRef.current) {
      throw new Error(`No ${mediaType} ref found`);
    }
    if (!src) {
      throw new Error(`No 'src' attribute was passed to the ${tagName} element.`);
    }
    const { duration } = mediaRef.current;
    const shouldBeTime = !Number.isNaN(duration) && Number.isFinite(duration) ? Math.min(duration, desiredUnclampedTime) : desiredUnclampedTime;
    const mediaTagTime = mediaTagCurrentTime.current.time;
    const rvcTime = rvcCurrentTime.current?.time ?? null;
    const isVariableFpsVideo = isVariableFpsVideoMap.current[src];
    const timeShiftMediaTag = Math.abs(shouldBeTime - mediaTagTime);
    const timeShiftRvcTag = rvcTime ? Math.abs(shouldBeTime - rvcTime) : null;
    const mostRecentTimeshift = rvcCurrentTime.current?.lastUpdate && rvcCurrentTime.current.time > mediaTagCurrentTime.current.lastUpdate ? timeShiftRvcTag : timeShiftMediaTag;
    const timeShift = timeShiftRvcTag && !isVariableFpsVideo ? mostRecentTimeshift : timeShiftMediaTag;
    if (timeShift > acceptableTimeShiftButLessThanDuration && lastSeekDueToShift.current !== shouldBeTime) {
      lastSeek.current = seek({
        mediaRef: mediaRef.current,
        time: shouldBeTime,
        logLevel,
        why: `because time shift is too big. shouldBeTime = ${shouldBeTime}, isTime = ${mediaTagTime}, requestVideoCallbackTime = ${rvcTime}, timeShift = ${timeShift}${isVariableFpsVideo ? ", isVariableFpsVideo = true" : ""}, isPremounting = ${isPremounting}, isPostmounting = ${isPostmounting}, pauseWhenBuffering = ${pauseWhenBuffering}`,
        mountTime
      });
      lastSeekDueToShift.current = lastSeek.current;
      if (playing) {
        if (playbackRate > 0) {
          bufferUntilFirstFrame(shouldBeTime);
        }
        if (mediaRef.current.paused) {
          playAndHandleNotAllowedError({
            mediaRef,
            mediaType,
            onAutoPlayError,
            logLevel,
            mountTime,
            reason: "player is playing but media tag is paused, and just seeked"
          });
        }
      }
      if (!onlyWarnForMediaSeekingError) {
        warnAboutNonSeekableMedia(mediaRef.current, onlyWarnForMediaSeekingError ? "console-warning" : "console-error");
      }
      return;
    }
    const seekThreshold = playing ? 0.15 : 0.01;
    const makesSenseToSeek = Math.abs(mediaRef.current.currentTime - shouldBeTime) > seekThreshold;
    const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();
    const isSomethingElseBuffering = buffering.buffering.current && !isMediaTagBufferingOrStalled;
    if (!playing || isSomethingElseBuffering) {
      if (makesSenseToSeek) {
        lastSeek.current = seek({
          mediaRef: mediaRef.current,
          time: shouldBeTime,
          logLevel,
          why: `not playing or something else is buffering. time offset is over seek threshold (${seekThreshold})`,
          mountTime
        });
      }
      return;
    }
    if (!playing || buffering.buffering.current) {
      return;
    }
    const pausedCondition = mediaRef.current.paused && !mediaRef.current.ended;
    const firstFrameCondition = absoluteFrame === 0;
    if (pausedCondition || firstFrameCondition) {
      const reason = pausedCondition ? "media tag is paused" : "absolute frame is 0";
      if (makesSenseToSeek) {
        lastSeek.current = seek({
          mediaRef: mediaRef.current,
          time: shouldBeTime,
          logLevel,
          why: `is over timeshift threshold (threshold = ${seekThreshold}) and ${reason}`,
          mountTime
        });
      }
      playAndHandleNotAllowedError({
        mediaRef,
        mediaType,
        onAutoPlayError,
        logLevel,
        mountTime,
        reason: `player is playing and ${reason}`
      });
      if (!isVariableFpsVideo && playbackRate > 0) {
        bufferUntilFirstFrame(shouldBeTime);
      }
    }
  }, [
    absoluteFrame,
    acceptableTimeShiftButLessThanDuration,
    bufferUntilFirstFrame,
    buffering.buffering,
    rvcCurrentTime,
    logLevel,
    desiredUnclampedTime,
    isBuffering,
    isMediaTagBuffering,
    mediaRef,
    mediaType,
    onlyWarnForMediaSeekingError,
    playbackRate,
    playing,
    src,
    onAutoPlayError,
    isPremounting,
    isPostmounting,
    pauseWhenBuffering,
    mountTime,
    mediaTagCurrentTime
  ]);
};

// src/volume-position-state.ts

var MediaVolumeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  mediaMuted: false,
  mediaVolume: 1
});
var SetMediaVolumeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  setMediaMuted: () => {
    throw new Error("default");
  },
  setMediaVolume: () => {
    throw new Error("default");
  }
});
var useMediaVolumeState = () => {
  const { mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);
  const { setMediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return [mediaVolume, setMediaVolume];
  }, [mediaVolume, setMediaVolume]);
};
var useMediaMutedState = () => {
  const { mediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);
  const { setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return [mediaMuted, setMediaMuted];
  }, [mediaMuted, setMediaMuted]);
};

// src/audio/AudioForPreview.tsx

var AudioForDevelopmentForwardRefFunction = (props, ref) => {
  const [initialShouldPreMountAudioElements] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.shouldPreMountAudioTags);
  if (props.shouldPreMountAudioTags !== initialShouldPreMountAudioElements) {
    throw new Error("Cannot change the behavior for pre-mounting audio tags dynamically.");
  }
  const logLevel = useLogLevel();
  const {
    volume,
    muted,
    playbackRate,
    shouldPreMountAudioTags,
    src,
    onDuration,
    acceptableTimeShiftInSeconds,
    _remotionInternalNeedsDurationCalculation,
    _remotionInternalNativeLoopPassed,
    _remotionInternalStack,
    allowAmplificationDuringRender,
    name,
    pauseWhenBuffering,
    showInTimeline,
    loopVolumeCurveBehavior,
    stack,
    crossOrigin,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    toneFrequency,
    useWebAudioApi,
    onError,
    onNativeError,
    audioStreamIndex,
    ...nativeProps
  } = props;
  const _propsValid = true;
  if (!_propsValid) {
    throw new Error("typecheck error");
  }
  const [mediaVolume] = useMediaVolumeState();
  const [mediaMuted] = useMediaMutedState();
  const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
  const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);
  if (!src) {
    throw new TypeError("No 'src' was passed to <Audio>.");
  }
  const preloadedSrc = usePreload(src);
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const [timelineId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(Math.random()));
  const isSequenceHidden = hidden[timelineId] ?? false;
  const userPreferredVolume = evaluateVolume({
    frame: volumePropFrame,
    volume,
    mediaVolume
  });
  const crossOriginValue = getCrossOriginValue({
    crossOrigin,
    requestsVideoFrame: false
  });
  const propsToPass = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      muted: muted || mediaMuted || isSequenceHidden || userPreferredVolume <= 0,
      src: preloadedSrc,
      loop: _remotionInternalNativeLoopPassed,
      crossOrigin: crossOriginValue,
      ...nativeProps
    };
  }, [
    _remotionInternalNativeLoopPassed,
    isSequenceHidden,
    mediaMuted,
    muted,
    nativeProps,
    preloadedSrc,
    userPreferredVolume,
    crossOriginValue
  ]);
  const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `audio-${random(src ?? "")}-${sequenceContext?.relativeFrom}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.durationInFrames}-muted:${props.muted}-loop:${props.loop}`, [
    src,
    sequenceContext?.relativeFrom,
    sequenceContext?.cumulatedFrom,
    sequenceContext?.durationInFrames,
    props.muted,
    props.loop
  ]);
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);
  if (!context) {
    throw new Error("SharedAudioContext not found");
  }
  const { el: audioRef, mediaElementSourceNode } = useSharedAudio({
    aud: propsToPass,
    audioId: id,
    premounting: Boolean(sequenceContext?.premounting)
  });
  useMediaInTimeline({
    volume,
    mediaVolume,
    mediaRef: audioRef,
    src,
    mediaType: "audio",
    playbackRate: playbackRate ?? 1,
    displayName: name ?? null,
    id: timelineId,
    stack: _remotionInternalStack,
    showInTimeline,
    premountDisplay: null,
    postmountDisplay: null,
    onAutoPlayError: null,
    isPremounting: Boolean(sequenceContext?.premounting),
    isPostmounting: Boolean(sequenceContext?.postmounting)
  });
  useMediaPlayback({
    mediaRef: audioRef,
    src,
    mediaType: "audio",
    playbackRate: playbackRate ?? 1,
    onlyWarnForMediaSeekingError: false,
    acceptableTimeshift: acceptableTimeShiftInSeconds ?? null,
    isPremounting: Boolean(sequenceContext?.premounting),
    isPostmounting: Boolean(sequenceContext?.postmounting),
    pauseWhenBuffering,
    onAutoPlayError: null
  });
  useVolume({
    logLevel,
    mediaRef: audioRef,
    source: mediaElementSourceNode,
    volume: userPreferredVolume,
    shouldUseWebAudioApi: useWebAudioApi ?? false
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return audioRef.current;
  }, [audioRef]);
  const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDuration);
  currentOnDurationCallback.current = onDuration;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = audioRef;
    if (!current) {
      return;
    }
    if (current.duration) {
      currentOnDurationCallback.current?.(current.src, current.duration);
      return;
    }
    const onLoadedMetadata = () => {
      currentOnDurationCallback.current?.(current.src, current.duration);
    };
    current.addEventListener("loadedmetadata", onLoadedMetadata);
    return () => {
      current.removeEventListener("loadedmetadata", onLoadedMetadata);
    };
  }, [audioRef, src]);
  if (initialShouldPreMountAudioElements) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("audio", {
    ref: audioRef,
    preload: "metadata",
    crossOrigin: crossOriginValue,
    ...propsToPass
  });
};
var AudioForPreview = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForDevelopmentForwardRefFunction);

// src/audio/AudioForRendering.tsx


var AudioForRenderingRefForwardingFunction = (props, ref) => {
  const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const {
    volume: volumeProp,
    playbackRate,
    allowAmplificationDuringRender,
    onDuration,
    toneFrequency,
    _remotionInternalNeedsDurationCalculation,
    _remotionInternalNativeLoopPassed,
    acceptableTimeShiftInSeconds,
    name,
    onNativeError,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    loopVolumeCurveBehavior,
    pauseWhenBuffering,
    audioStreamIndex,
    ...nativeProps
  } = props;
  const absoluteFrame = useTimelinePosition();
  const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
  const frame = useCurrentFrame();
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);
  const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `audio-${random(props.src ?? "")}-${sequenceContext?.relativeFrom}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.durationInFrames}`, [
    props.src,
    sequenceContext?.relativeFrom,
    sequenceContext?.cumulatedFrom,
    sequenceContext?.durationInFrames
  ]);
  const volume = evaluateVolume({
    volume: volumeProp,
    frame: volumePropFrame,
    mediaVolume: 1
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return audioRef.current;
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!props.src) {
      throw new Error("No src passed");
    }
    if (!window.remotion_audioEnabled) {
      return;
    }
    if (props.muted) {
      return;
    }
    if (volume <= 0) {
      return;
    }
    registerRenderAsset({
      type: "audio",
      src: getAbsoluteSrc(props.src),
      id,
      frame: absoluteFrame,
      volume,
      mediaFrame: frame,
      playbackRate: props.playbackRate ?? 1,
      toneFrequency: toneFrequency ?? null,
      audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),
      audioStreamIndex: audioStreamIndex ?? 0
    });
    return () => unregisterRenderAsset(id);
  }, [
    props.muted,
    props.src,
    registerRenderAsset,
    absoluteFrame,
    id,
    unregisterRenderAsset,
    volume,
    volumePropFrame,
    frame,
    playbackRate,
    props.playbackRate,
    toneFrequency,
    sequenceContext?.relativeFrom,
    audioStreamIndex
  ]);
  const { src } = props;
  const needsToRenderAudioTag = ref || _remotionInternalNeedsDurationCalculation;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (window.process?.env?.NODE_ENV === "test") {
      return;
    }
    if (!needsToRenderAudioTag) {
      return;
    }
    const newHandle = delayRender("Loading <Audio> duration with src=" + src, {
      retries: delayRenderRetries ?? undefined,
      timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
    });
    const { current } = audioRef;
    const didLoad = () => {
      if (current?.duration) {
        onDuration(current.src, current.duration);
      }
      continueRender(newHandle);
    };
    if (current?.duration) {
      onDuration(current.src, current.duration);
      continueRender(newHandle);
    } else {
      current?.addEventListener("loadedmetadata", didLoad, { once: true });
    }
    return () => {
      current?.removeEventListener("loadedmetadata", didLoad);
      continueRender(newHandle);
    };
  }, [
    src,
    onDuration,
    needsToRenderAudioTag,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds
  ]);
  if (!needsToRenderAudioTag) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("audio", {
    ref: audioRef,
    ...nativeProps,
    onError: onNativeError
  });
};
var AudioForRendering = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForRenderingRefForwardingFunction);

// src/audio/Audio.tsx

var AudioRefForwardingFunction = (props, ref) => {
  const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);
  const {
    startFrom,
    endAt,
    trimBefore,
    trimAfter,
    name,
    stack,
    pauseWhenBuffering,
    showInTimeline,
    onError: onRemotionError,
    ...otherProps
  } = props;
  const { loop, ...propsOtherThanLoop } = props;
  const { fps } = useVideoConfig();
  const environment = getRemotionEnvironment();
  const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);
  if (typeof props.src !== "string") {
    throw new TypeError(`The \`<Audio>\` tag requires a string for \`src\`, but got ${JSON.stringify(props.src)} instead.`);
  }
  const preloadedSrc = usePreload(props.src);
  const onError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
    console.log(e.currentTarget.error);
    const errMessage = `Could not play audio with src ${preloadedSrc}: ${e.currentTarget.error}. See https://remotion.dev/docs/media-playback-error for help.`;
    if (loop) {
      if (onRemotionError) {
        onRemotionError(new Error(errMessage));
        return;
      }
      cancelRender(new Error(errMessage));
    } else {
      onRemotionError?.(new Error(errMessage));
      console.warn(errMessage);
    }
  }, [loop, onRemotionError, preloadedSrc]);
  const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((src, durationInSeconds) => {
    setDurations({ type: "got-duration", durationInSeconds, src });
  }, [setDurations]);
  const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props.src)];
  validateMediaTrimProps({ startFrom, endAt, trimBefore, trimAfter });
  const { trimBeforeValue, trimAfterValue } = resolveTrimProps({
    startFrom,
    endAt,
    trimBefore,
    trimAfter
  });
  if (loop && durationFetched !== undefined) {
    if (!Number.isFinite(durationFetched)) {
      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {
        ...propsOtherThanLoop,
        ref,
        _remotionInternalNativeLoopPassed: true
      });
    }
    const duration = durationFetched * fps;
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, {
      layout: "none",
      durationInFrames: calculateLoopDuration({
        endAt: trimAfterValue ?? endAt,
        mediaDuration: duration,
        playbackRate: props.playbackRate ?? 1,
        startFrom: trimBeforeValue ?? startFrom
      }),
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {
        ...propsOtherThanLoop,
        ref,
        _remotionInternalNativeLoopPassed: true
      })
    });
  }
  if (typeof trimBeforeValue !== "undefined" || typeof trimAfterValue !== "undefined") {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
      layout: "none",
      from: 0 - (trimBeforeValue ?? 0),
      showInTimeline: false,
      durationInFrames: trimAfterValue,
      name,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {
        _remotionInternalNeedsDurationCalculation: Boolean(loop),
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        ...otherProps,
        ref
      })
    });
  }
  validateMediaProps(props, "Audio");
  if (environment.isRendering) {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForRendering, {
      onDuration,
      ...props,
      ref,
      onNativeError: onError,
      _remotionInternalNeedsDurationCalculation: Boolean(loop)
    });
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForPreview, {
    _remotionInternalNativeLoopPassed: props._remotionInternalNativeLoopPassed ?? false,
    _remotionInternalStack: stack ?? null,
    shouldPreMountAudioTags: audioContext !== null && audioContext.numberOfAudioTags > 0,
    ...props,
    ref,
    onNativeError: onError,
    onDuration,
    pauseWhenBuffering: pauseWhenBuffering ?? false,
    _remotionInternalNeedsDurationCalculation: Boolean(loop),
    showInTimeline: showInTimeline ?? true
  });
};
var Audio = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioRefForwardingFunction);
addSequenceStackTraces(Audio);
// src/Composition.tsx



// src/Folder.tsx


// src/validation/validate-folder-name.ts
var getRegex = () => /^([a-zA-Z0-9-\u4E00-\u9FFF])+$/g;
var isFolderNameValid = (name) => name.match(getRegex());
var validateFolderName = (name) => {
  if (name === undefined || name === null) {
    throw new TypeError("You must pass a name to a <Folder />.");
  }
  if (typeof name !== "string") {
    throw new TypeError(`The "name" you pass into <Folder /> must be a string. Got: ${typeof name}`);
  }
  if (!isFolderNameValid(name)) {
    throw new Error(`Folder name can only contain a-z, A-Z, 0-9 and -. You passed ${name}`);
  }
};
var invalidFolderNameErrorMessage = (/* unused pure expression or super */ null && (`Folder name must match ${String(getRegex())}`));

// src/Folder.tsx

var FolderContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  folderName: null,
  parentName: null
});
var Folder = ({ name, children }) => {
  const parent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);
  const { registerFolder, unregisterFolder } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);
  validateFolderName(name);
  const parentNameArr = [parent.parentName, parent.folderName].filter(truthy);
  const parentName = parentNameArr.length === 0 ? null : parentNameArr.join("/");
  const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      folderName: name,
      parentName
    };
  }, [name, parentName]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    registerFolder(name, parentName);
    return () => {
      unregisterFolder(name, parentName);
    };
  }, [name, parent.folderName, parentName, registerFolder, unregisterFolder]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FolderContext.Provider, {
    value,
    children
  });
};

// src/loading-indicator.tsx

var rotate = {
  transform: `rotate(90deg)`
};
var ICON_SIZE = 40;
var label = {
  color: "white",
  fontSize: 14,
  fontFamily: "sans-serif"
};
var container = {
  justifyContent: "center",
  alignItems: "center"
};
var Loading = () => {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(AbsoluteFill, {
    style: container,
    id: "remotion-comp-loading",
    children: [
      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("style", {
        type: "text/css",
        children: `
				@keyframes anim {
					from {
						opacity: 0
					}
					to {
						opacity: 1
					}
				}
				#remotion-comp-loading {
					animation: anim 2s;
					animation-fill-mode: forwards;
				}
			`
      }),
      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("svg", {
        width: ICON_SIZE,
        height: ICON_SIZE,
        viewBox: "-100 -100 400 400",
        style: rotate,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("path", {
          fill: "#555",
          stroke: "#555",
          strokeWidth: "100",
          strokeLinejoin: "round",
          d: "M 2 172 a 196 100 0 0 0 195 5 A 196 240 0 0 0 100 2.259 A 196 240 0 0 0 2 172 z"
        })
      }),
      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("p", {
        style: label,
        children: [
          "Resolving ",
          "<Suspense>",
          "..."
        ]
      })
    ]
  });
};

// src/portal-node.ts
var _portalNode = null;
var portalNode = () => {
  if (!_portalNode) {
    if (typeof document === "undefined") {
      throw new Error("Tried to call an API that only works in the browser from outside the browser");
    }
    _portalNode = document.createElement("div");
    _portalNode.style.position = "absolute";
    _portalNode.style.top = "0px";
    _portalNode.style.left = "0px";
    _portalNode.style.right = "0px";
    _portalNode.style.bottom = "0px";
    _portalNode.style.width = "100%";
    _portalNode.style.height = "100%";
    _portalNode.style.display = "flex";
    _portalNode.style.flexDirection = "column";
    const containerNode = document.createElement("div");
    containerNode.style.position = "fixed";
    containerNode.style.top = -999999 + "px";
    containerNode.appendChild(_portalNode);
    document.body.appendChild(containerNode);
  }
  return _portalNode;
};

// src/use-lazy-component.ts

var useLazyComponent = ({
  compProps,
  componentName,
  noSuspense
}) => {
  const lazy = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if ("component" in compProps) {
      if (typeof document === "undefined" || noSuspense) {
        return compProps.component;
      }
      if (typeof compProps.component === "undefined") {
        throw new Error(`A value of \`undefined\` was passed to the \`component\` prop. Check the value you are passing to the <${componentName}/> component.`);
      }
      return react__WEBPACK_IMPORTED_MODULE_0__.lazy(() => Promise.resolve({ default: compProps.component }));
    }
    if ("lazyComponent" in compProps && typeof compProps.lazyComponent !== "undefined") {
      if (typeof compProps.lazyComponent === "undefined") {
        throw new Error(`A value of \`undefined\` was passed to the \`lazyComponent\` prop. Check the value you are passing to the <${componentName}/> component.`);
      }
      return react__WEBPACK_IMPORTED_MODULE_0__.lazy(compProps.lazyComponent);
    }
    throw new Error("You must pass either 'component' or 'lazyComponent'");
  }, [compProps.component, compProps.lazyComponent]);
  return lazy;
};

// src/validation/validate-composition-id.ts
var getRegex2 = () => /^([a-zA-Z0-9-\u4E00-\u9FFF])+$/g;
var isCompositionIdValid = (id) => id.match(getRegex2());
var validateCompositionId = (id) => {
  if (!isCompositionIdValid(id)) {
    throw new Error(`Composition id can only contain a-z, A-Z, 0-9, CJK characters and -. You passed ${id}`);
  }
};
var invalidCompositionErrorMessage = `Composition ID must match ${String(getRegex2())}`;

// src/validation/validate-default-props.ts
var validateDefaultAndInputProps = (defaultProps, name, compositionId) => {
  if (!defaultProps) {
    return;
  }
  if (typeof defaultProps !== "object") {
    throw new Error(`"${name}" must be an object, but you passed a value of type ${typeof defaultProps}`);
  }
  if (Array.isArray(defaultProps)) {
    throw new Error(`"${name}" must be an object, an array was passed ${compositionId ? `for composition "${compositionId}"` : ""}`);
  }
};

// src/Composition.tsx

var Fallback = () => {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const fallback = delayRender("Waiting for Root component to unsuspend");
    return () => continueRender(fallback);
  }, []);
  return null;
};
var InnerComposition = ({
  width,
  height,
  fps,
  durationInFrames,
  id,
  defaultProps,
  schema,
  ...compProps
}) => {
  const compManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);
  const { registerComposition, unregisterComposition } = compManager;
  const video = useVideo();
  const lazy = useLazyComponent({
    compProps,
    componentName: "Composition",
    noSuspense: false
  });
  const nonce = useNonce();
  const isPlayer = useIsPlayer();
  const environment = getRemotionEnvironment();
  const canUseComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);
  if (canUseComposition) {
    if (isPlayer) {
      throw new Error("<Composition> was mounted inside the `component` that was passed to the <Player>. See https://remotion.dev/docs/wrong-composition-mount for help.");
    }
    throw new Error("<Composition> mounted inside another composition. See https://remotion.dev/docs/wrong-composition-mount for help.");
  }
  const { folderName, parentName } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!id) {
      throw new Error("No id for composition passed.");
    }
    validateCompositionId(id);
    validateDefaultAndInputProps(defaultProps, "defaultProps", id);
    registerComposition({
      durationInFrames: durationInFrames ?? undefined,
      fps: fps ?? undefined,
      height: height ?? undefined,
      width: width ?? undefined,
      id,
      folderName,
      component: lazy,
      defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),
      nonce,
      parentFolderName: parentName,
      schema: schema ?? null,
      calculateMetadata: compProps.calculateMetadata ?? null
    });
    return () => {
      unregisterComposition(id);
    };
  }, [
    durationInFrames,
    fps,
    height,
    lazy,
    id,
    folderName,
    defaultProps,
    width,
    nonce,
    parentName,
    schema,
    compProps.calculateMetadata,
    registerComposition,
    unregisterComposition
  ]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    window.dispatchEvent(new CustomEvent(PROPS_UPDATED_EXTERNALLY, {
      detail: {
        resetUnsaved: id
      }
    }));
  }, [defaultProps, id]);
  const resolved = useResolvedVideoConfig(id);
  if (environment.isStudio && video && video.component === lazy) {
    const Comp = lazy;
    if (resolved === null || resolved.type !== "success" && resolved.type !== "success-and-refreshing") {
      return null;
    }
    return (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, {
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
        fallback: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loading, {}),
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, {
          ...resolved.result.props ?? {}
        })
      })
    }), portalNode());
  }
  if (environment.isRendering && video && video.component === lazy) {
    const Comp = lazy;
    if (resolved === null || resolved.type !== "success" && resolved.type !== "success-and-refreshing") {
      return null;
    }
    return (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, {
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {
        fallback: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Fallback, {}),
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, {
          ...resolved.result.props ?? {}
        })
      })
    }), portalNode());
  }
  return null;
};
var Composition = (props2) => {
  const { onlyRenderComposition } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);
  if (onlyRenderComposition && onlyRenderComposition !== props2.id) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(InnerComposition, {
    ...props2
  });
};
// src/bezier.ts
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
var float32ArraySupported = typeof Float32Array === "function";
function a(aA1, aA2) {
  return 1 - 3 * aA2 + 3 * aA1;
}
function b(aA1, aA2) {
  return 3 * aA2 - 6 * aA1;
}
function c(aA1) {
  return 3 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3 * a(aA1, aA2) * aT * aT + 2 * b(aA1, aA2) * aT + c(aA1);
}
function binarySubdivide({
  aX,
  _aA,
  _aB,
  mX1,
  mX2
}) {
  let currentX;
  let currentT;
  let i = 0;
  let aA = _aA;
  let aB = _aB;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
  let aGuessT = _aGuessT;
  for (let i = 0;i < NEWTON_ITERATIONS; ++i) {
    const currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }
  const sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (let i = 0;i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    let intervalStart = 0;
    let currentSample = 1;
    const lastSample = kSplineTableSize - 1;
    for (;currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    const guessForT = intervalStart + dist * kSampleStepSize;
    const initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    }
    if (initialSlope === 0) {
      return guessForT;
    }
    return binarySubdivide({
      aX,
      _aA: intervalStart,
      _aB: intervalStart + kSampleStepSize,
      mX1,
      mX2
    });
  }
  return function(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}

// src/easing.ts
class Easing {
  static step0(n) {
    return n > 0 ? 1 : 0;
  }
  static step1(n) {
    return n >= 1 ? 1 : 0;
  }
  static linear(t) {
    return t;
  }
  static ease(t) {
    return Easing.bezier(0.42, 0, 1, 1)(t);
  }
  static quad(t) {
    return t * t;
  }
  static cubic(t) {
    return t * t * t;
  }
  static poly(n) {
    return (t) => t ** n;
  }
  static sin(t) {
    return 1 - Math.cos(t * Math.PI / 2);
  }
  static circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  static exp(t) {
    return 2 ** (10 * (t - 1));
  }
  static elastic(bounciness = 1) {
    const p = bounciness * Math.PI;
    return (t) => 1 - Math.cos(t * Math.PI / 2) ** 3 * Math.cos(t * p);
  }
  static back(s = 1.70158) {
    return (t) => t * t * ((s + 1) * t - s);
  }
  static bounce(t) {
    if (t < 1 / 2.75) {
      return 7.5625 * t * t;
    }
    if (t < 2 / 2.75) {
      const t2_ = t - 1.5 / 2.75;
      return 7.5625 * t2_ * t2_ + 0.75;
    }
    if (t < 2.5 / 2.75) {
      const t2_ = t - 2.25 / 2.75;
      return 7.5625 * t2_ * t2_ + 0.9375;
    }
    const t2 = t - 2.625 / 2.75;
    return 7.5625 * t2 * t2 + 0.984375;
  }
  static bezier(x1, y1, x2, y2) {
    return bezier(x1, y1, x2, y2);
  }
  static in(easing) {
    return easing;
  }
  static out(easing) {
    return (t) => 1 - easing(1 - t);
  }
  static inOut(easing) {
    return (t) => {
      if (t < 0.5) {
        return easing(t * 2) / 2;
      }
      return 1 - easing((1 - t) * 2) / 2;
    };
  }
}
// src/v5-flag.ts
var ENABLE_V5_BREAKING_CHANGES = false;

// src/get-static-files.ts
var warnedServer = false;
var warnedPlayer = false;
var warnServerOnce = () => {
  if (warnedServer) {
    return;
  }
  warnedServer = true;
  console.warn("Called getStaticFiles() on the server. The API is only available in the browser. An empty array was returned.");
};
var warnPlayerOnce = () => {
  if (warnedPlayer) {
    return;
  }
  warnedPlayer = true;
  console.warn("Called getStaticFiles() while using the Remotion Player. The API is only available while using the Remotion Studio. An empty array was returned.");
};
var getStaticFiles = () => {
  if (ENABLE_V5_BREAKING_CHANGES) {
    throw new Error("getStaticFiles() has moved into the `@remotion/studio` package. Update your imports.");
  }
  if (typeof document === "undefined") {
    warnServerOnce();
    return [];
  }
  if (window.remotion_isPlayer) {
    warnPlayerOnce();
    return [];
  }
  return window.remotion_staticFiles;
};
// src/IFrame.tsx


var IFrameRefForwarding = ({
  onLoad,
  onError,
  delayRenderRetries,
  delayRenderTimeoutInMilliseconds,
  ...props2
}, ref) => {
  const [handle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => delayRender(`Loading <IFrame> with source ${props2.src}`, {
    retries: delayRenderRetries ?? undefined,
    timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
  }));
  const didLoad = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
    continueRender(handle);
    onLoad?.(e);
  }, [handle, onLoad]);
  const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
    continueRender(handle);
    if (onError) {
      onError(e);
    } else {
      console.error("Error loading iframe:", e, "Handle the event using the onError() prop to make this message disappear.");
    }
  }, [handle, onError]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("iframe", {
    ...props2,
    ref,
    onError: didGetError,
    onLoad: didLoad
  });
};
var IFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(IFrameRefForwarding);
// src/Img.tsx


function exponentialBackoff(errorCount) {
  return 1000 * 2 ** (errorCount - 1);
}
var ImgRefForwarding = ({
  onError,
  maxRetries = 2,
  src,
  pauseWhenLoading,
  delayRenderRetries,
  delayRenderTimeoutInMilliseconds,
  onImageFrame,
  crossOrigin,
  ...props2
}, ref) => {
  const imageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const errors = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});
  const { delayPlayback } = useBufferState();
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  if (!src) {
    throw new Error('No "src" prop was passed to <Img>.');
  }
  const _propsValid = true;
  if (!_propsValid) {
    throw new Error("typecheck error");
  }
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return imageRef.current;
  }, []);
  const actualSrc = usePreload(src);
  const retryIn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((timeout) => {
    if (!imageRef.current) {
      return;
    }
    const currentSrc = imageRef.current.src;
    setTimeout(() => {
      if (!imageRef.current) {
        return;
      }
      const newSrc = imageRef.current?.src;
      if (newSrc !== currentSrc) {
        return;
      }
      imageRef.current.removeAttribute("src");
      imageRef.current.setAttribute("src", newSrc);
    }, timeout);
  }, []);
  const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e) => {
    if (!errors.current) {
      return;
    }
    errors.current[imageRef.current?.src] = (errors.current[imageRef.current?.src] ?? 0) + 1;
    if (onError && (errors.current[imageRef.current?.src] ?? 0) > maxRetries) {
      onError(e);
      return;
    }
    if ((errors.current[imageRef.current?.src] ?? 0) <= maxRetries) {
      const backoff = exponentialBackoff(errors.current[imageRef.current?.src] ?? 0);
      console.warn(`Could not load image with source ${imageRef.current?.src}, retrying again in ${backoff}ms`);
      retryIn(backoff);
      return;
    }
    cancelRender("Error loading image with src: " + imageRef.current?.src);
  }, [maxRetries, onError, retryIn]);
  if (typeof window !== "undefined") {
    const isPremounting = Boolean(sequenceContext?.premounting);
    const isPostmounting = Boolean(sequenceContext?.postmounting);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
      if (window.process?.env?.NODE_ENV === "test") {
        if (imageRef.current) {
          imageRef.current.src = actualSrc;
        }
        return;
      }
      const { current } = imageRef;
      if (!current) {
        return;
      }
      const newHandle = delayRender("Loading <Img> with src=" + actualSrc, {
        retries: delayRenderRetries ?? undefined,
        timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
      });
      const unblock = pauseWhenLoading && !isPremounting && !isPostmounting ? delayPlayback().unblock : () => {
        return;
      };
      let unmounted = false;
      const onComplete = () => {
        if (unmounted) {
          continueRender(newHandle);
          return;
        }
        if ((errors.current[imageRef.current?.src] ?? 0) > 0) {
          delete errors.current[imageRef.current?.src];
          console.info(`Retry successful - ${imageRef.current?.src} is now loaded`);
        }
        if (current) {
          onImageFrame?.(current);
        }
        unblock();
        continueRender(newHandle);
      };
      if (!imageRef.current) {
        onComplete();
        return;
      }
      current.src = actualSrc;
      if (current.complete) {
        onComplete();
      } else {
        current.decode().then(onComplete).catch((err) => {
          console.warn(err);
          if (current.complete) {
            onComplete();
          } else {
            current.addEventListener("load", onComplete);
          }
        });
      }
      return () => {
        unmounted = true;
        current.removeEventListener("load", onComplete);
        unblock();
        continueRender(newHandle);
      };
    }, [
      actualSrc,
      delayPlayback,
      delayRenderRetries,
      delayRenderTimeoutInMilliseconds,
      pauseWhenLoading,
      isPremounting,
      isPostmounting,
      onImageFrame
    ]);
  }
  const crossOriginValue = getCrossOriginValue({
    crossOrigin,
    requestsVideoFrame: false
  });
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img", {
    ...props2,
    ref: imageRef,
    crossOrigin: crossOriginValue,
    onError: didGetError
  });
};
var Img = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ImgRefForwarding);
// src/internals.ts


// src/CompositionManager.tsx


var compositionsRef = react__WEBPACK_IMPORTED_MODULE_0__.createRef();
var CompositionManagerProvider = ({
  children,
  numberOfAudioTags,
  onlyRenderComposition,
  currentCompositionMetadata,
  audioLatencyHint
}) => {
  const [compositions, setCompositions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const currentcompositionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(compositions);
  const [folders, setFolders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [canvasContent, setCanvasContent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const updateCompositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((updateComps) => {
    setCompositions((comps) => {
      const updated = updateComps(comps);
      currentcompositionsRef.current = updated;
      return updated;
    });
  }, []);
  const registerComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((comp) => {
    updateCompositions((comps) => {
      if (comps.find((c2) => c2.id === comp.id)) {
        throw new Error(`Multiple composition with id ${comp.id} are registered.`);
      }
      const value = [...comps, comp].slice().sort((a2, b2) => a2.nonce - b2.nonce);
      return value;
    });
  }, [updateCompositions]);
  const unregisterComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id) => {
    setCompositions((comps) => {
      return comps.filter((c2) => c2.id !== id);
    });
  }, []);
  const registerFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, parent) => {
    setFolders((prevFolders) => {
      return [
        ...prevFolders,
        {
          name,
          parent
        }
      ];
    });
  }, []);
  const unregisterFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name, parent) => {
    setFolders((prevFolders) => {
      return prevFolders.filter((p) => !(p.name === name && p.parent === parent));
    });
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(compositionsRef, () => {
    return {
      getCompositions: () => currentcompositionsRef.current
    };
  }, []);
  const composition = compositions.find((c2) => canvasContent?.type === "composition" ? c2.id === canvasContent.compositionId : null);
  const updateCompositionDefaultProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, newDefaultProps) => {
    setCompositions((comps) => {
      const updated = comps.map((c2) => {
        if (c2.id === id) {
          return {
            ...c2,
            defaultProps: newDefaultProps
          };
        }
        return c2;
      });
      return updated;
    });
  }, []);
  const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      compositions,
      folders,
      currentCompositionMetadata,
      canvasContent
    };
  }, [compositions, folders, currentCompositionMetadata, canvasContent]);
  const setters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      registerComposition,
      unregisterComposition,
      registerFolder,
      unregisterFolder,
      setCanvasContent,
      updateCompositionDefaultProps,
      onlyRenderComposition
    };
  }, [
    registerComposition,
    registerFolder,
    unregisterComposition,
    unregisterFolder,
    updateCompositionDefaultProps,
    onlyRenderComposition
  ]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionSetters.Provider, {
      value: setters,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManagerProvider, {
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManagerProvider, {
          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionConfig, {
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SharedAudioContextProvider, {
              numberOfAudioTags,
              component: composition?.component ?? null,
              audioLatencyHint,
              children
            })
          })
        })
      })
    })
  });
};

// src/default-css.ts
var exports_default_css = {};
__export(exports_default_css, {
  makeDefaultPreviewCSS: () => makeDefaultPreviewCSS,
  injectCSS: () => injectCSS,
  OFFTHREAD_VIDEO_CLASS_NAME: () => OFFTHREAD_VIDEO_CLASS_NAME
});
var injected = {};
var injectCSS = (css) => {
  if (typeof document === "undefined") {
    return;
  }
  if (injected[css]) {
    return;
  }
  const head = document.head || document.getElementsByTagName("head")[0];
  const style = document.createElement("style");
  style.appendChild(document.createTextNode(css));
  head.prepend(style);
  injected[css] = true;
};
var OFFTHREAD_VIDEO_CLASS_NAME = "__remotion_offthreadvideo";
var makeDefaultPreviewCSS = (scope, backgroundColor) => {
  if (!scope) {
    return `
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
	    background-color: ${backgroundColor};
    }
    .${OFFTHREAD_VIDEO_CLASS_NAME} {
      object-fit: contain;
    }
    `;
  }
  return `
    ${scope} * {
      box-sizing: border-box;
    }
    ${scope} *:-webkit-full-screen {
      width: 100%;
      height: 100%;
    }
    ${scope} .${OFFTHREAD_VIDEO_CLASS_NAME} {
      object-fit: contain;
    }
  `;
};

// src/get-preview-dom-element.ts
var REMOTION_STUDIO_CONTAINER_ELEMENT = "__remotion-studio-container";
var getPreviewDomElement = () => {
  return document.getElementById(REMOTION_STUDIO_CONTAINER_ELEMENT);
};

// src/register-root.ts
var Root = null;
var listeners = [];
var registerRoot = (comp) => {
  if (!comp) {
    throw new Error(`You must pass a React component to registerRoot(), but ${JSON.stringify(comp)} was passed.`);
  }
  if (Root) {
    throw new Error("registerRoot() was called more than once.");
  }
  Root = comp;
  listeners.forEach((l) => {
    l(comp);
  });
};
var getRoot = () => {
  return Root;
};
var waitForRoot = (fn) => {
  if (Root) {
    fn(Root);
    return () => {
      return;
    };
  }
  listeners.push(fn);
  return () => {
    listeners = listeners.filter((l) => l !== fn);
  };
};

// src/RemotionRoot.tsx


var RemotionRoot = ({
  children,
  numberOfAudioTags,
  logLevel,
  onlyRenderComposition,
  currentCompositionMetadata,
  audioLatencyHint
}) => {
  const [remotionRootId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(random(null)));
  const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => getInitialFrameState());
  const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [fastRefreshes, setFastRefreshes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [manualRefreshes, setManualRefreshes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  const [playbackRate, setPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);
  const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);
  if (typeof window !== "undefined") {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
      window.remotion_setFrame = (f, composition, attempt) => {
        window.remotion_attempt = attempt;
        const id = delayRender(`Setting the current frame to ${f}`);
        let asyncUpdate = true;
        setFrame((s) => {
          const currentFrame = s[composition] ?? window.remotion_initialFrame;
          if (currentFrame === f) {
            asyncUpdate = false;
            return s;
          }
          return {
            ...s,
            [composition]: f
          };
        });
        if (asyncUpdate) {
          requestAnimationFrame(() => continueRender(id));
        } else {
          continueRender(id);
        }
      };
      window.remotion_isPlayer = false;
    }, []);
  }
  const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      frame,
      playing,
      imperativePlaying,
      rootId: remotionRootId,
      playbackRate,
      setPlaybackRate,
      audioAndVideoTags
    };
  }, [frame, playbackRate, playing, remotionRootId]);
  const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      setFrame,
      setPlaying
    };
  }, []);
  const nonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    let counter = 0;
    return {
      getNonce: () => counter++,
      fastRefreshes,
      manualRefreshes
    };
  }, [fastRefreshes, manualRefreshes]);
  const setNonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      increaseManualRefreshes: () => {
        setManualRefreshes((i) => i + 1);
      }
    };
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (true) {
      if (__webpack_module__.hot) {
        __webpack_module__.hot.addStatusHandler((status) => {
          if (status === "idle") {
            setFastRefreshes((i) => i + 1);
          }
        });
      }
    }
  }, []);
  const logging = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return { logLevel, mountTime: Date.now() };
  }, [logLevel]);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LogLevelContext.Provider, {
    value: logging,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, {
      value: nonceContext,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetNonceContext.Provider, {
        value: setNonceContext,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {
          value: timelineContextValue,
          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, {
            value: setTimelineContextValue,
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsProvider, {
              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PrefetchProvider, {
                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManagerProvider, {
                  numberOfAudioTags,
                  onlyRenderComposition,
                  currentCompositionMetadata,
                  audioLatencyHint,
                  children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContextProvider, {
                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingProvider, {
                      children
                    })
                  })
                })
              })
            })
          })
        })
      })
    })
  });
};

// src/setup-env-variables.ts
var getEnvVariables = () => {
  if (getRemotionEnvironment().isRendering) {
    const param = window.remotion_envVariables;
    if (!param) {
      return {};
    }
    return { ...JSON.parse(param), NODE_ENV: "production" };
  }
  if (false) {}
  return {
    NODE_ENV: "production"
  };
};
var setupEnvVariables = () => {
  const env = getEnvVariables();
  if (!window.process) {
    window.process = {};
  }
  if (!window.process.env) {
    window.process.env = {};
  }
  Object.keys(env).forEach((key) => {
    window.process.env[key] = env[key];
  });
};

// src/use-current-scale.ts

var CurrentScaleContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);
var PreviewSizeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({
  setSize: () => {
    return;
  },
  size: { size: "auto", translation: { x: 0, y: 0 } }
});
var calculateScale = ({
  canvasSize,
  compositionHeight,
  compositionWidth,
  previewSize
}) => {
  const heightRatio = canvasSize.height / compositionHeight;
  const widthRatio = canvasSize.width / compositionWidth;
  const ratio = Math.min(heightRatio, widthRatio);
  if (previewSize === "auto") {
    if (ratio === 0) {
      return 1;
    }
    return ratio;
  }
  return Number(previewSize);
};
var useCurrentScale = (options) => {
  const hasContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CurrentScaleContext);
  const zoomContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(PreviewSizeContext);
  const config = useUnsafeVideoConfig();
  if (hasContext === null || config === null || zoomContext === null) {
    if (options?.dontThrowIfOutsideOfRemotion) {
      return 1;
    }
    if (getRemotionEnvironment().isRendering) {
      return 1;
    }
    throw new Error([
      "useCurrentScale() was called outside of a Remotion context.",
      "This hook can only be called in a component that is being rendered by Remotion.",
      "If you want to this hook to return 1 outside of Remotion, pass {dontThrowIfOutsideOfRemotion: true} as an option.",
      "If you think you called this hook in a Remotion component, make sure all versions of Remotion are aligned."
    ].join(`
`));
  }
  if (hasContext.type === "scale") {
    return hasContext.scale;
  }
  return calculateScale({
    canvasSize: hasContext.canvasSize,
    compositionHeight: config.height,
    compositionWidth: config.width,
    previewSize: zoomContext.size.size
  });
};

// src/video/VideoForPreview.tsx


// src/video/emit-video-frame.ts

var useEmitVideoFrame = ({
  ref,
  onVideoFrame
}) => {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = ref;
    if (!current) {
      return;
    }
    if (!onVideoFrame) {
      return;
    }
    let handle = 0;
    const callback = () => {
      if (!ref.current) {
        return;
      }
      onVideoFrame(ref.current);
      handle = ref.current.requestVideoFrameCallback(callback);
    };
    callback();
    return () => {
      current.cancelVideoFrameCallback(handle);
    };
  }, [onVideoFrame, ref]);
};

// src/video/VideoForPreview.tsx

var VideoForDevelopmentRefForwardingFunction = (props2, ref) => {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);
  if (!context) {
    throw new Error("SharedAudioContext not found");
  }
  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const sharedSource = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (!context.audioContext) {
      return null;
    }
    return makeSharedElementSourceNode({
      audioContext: context.audioContext,
      ref: videoRef
    });
  }, [context.audioContext]);
  const {
    volume,
    muted,
    playbackRate,
    onlyWarnForMediaSeekingError,
    src,
    onDuration,
    acceptableTimeShift,
    acceptableTimeShiftInSeconds,
    toneFrequency,
    name,
    _remotionInternalNativeLoopPassed,
    _remotionInternalStack,
    style,
    pauseWhenBuffering,
    showInTimeline,
    loopVolumeCurveBehavior,
    onError,
    onAutoPlayError,
    onVideoFrame,
    crossOrigin,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    allowAmplificationDuringRender,
    useWebAudioApi,
    audioStreamIndex,
    ...nativeProps
  } = props2;
  const _propsValid = true;
  if (!_propsValid) {
    throw new Error("typecheck error");
  }
  const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
  const { fps, durationInFrames } = useVideoConfig();
  const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);
  const logLevel = useLogLevel();
  const mountTime = useMountTime();
  const [timelineId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => String(Math.random()));
  const isSequenceHidden = hidden[timelineId] ?? false;
  if (typeof acceptableTimeShift !== "undefined") {
    throw new Error("acceptableTimeShift has been removed. Use acceptableTimeShiftInSeconds instead.");
  }
  const [mediaVolume] = useMediaVolumeState();
  const [mediaMuted] = useMediaMutedState();
  const userPreferredVolume = evaluateVolume({
    frame: volumePropFrame,
    volume,
    mediaVolume
  });
  useMediaInTimeline({
    mediaRef: videoRef,
    volume,
    mediaVolume,
    mediaType: "video",
    src,
    playbackRate: props2.playbackRate ?? 1,
    displayName: name ?? null,
    id: timelineId,
    stack: _remotionInternalStack,
    showInTimeline,
    premountDisplay: null,
    postmountDisplay: null,
    onAutoPlayError: onAutoPlayError ?? null,
    isPremounting: Boolean(parentSequence?.premounting),
    isPostmounting: Boolean(parentSequence?.postmounting)
  });
  useMediaPlayback({
    mediaRef: videoRef,
    src,
    mediaType: "video",
    playbackRate: props2.playbackRate ?? 1,
    onlyWarnForMediaSeekingError,
    acceptableTimeshift: acceptableTimeShiftInSeconds ?? null,
    isPremounting: Boolean(parentSequence?.premounting),
    isPostmounting: Boolean(parentSequence?.postmounting),
    pauseWhenBuffering,
    onAutoPlayError: onAutoPlayError ?? null
  });
  useVolume({
    logLevel,
    mediaRef: videoRef,
    volume: userPreferredVolume,
    source: sharedSource,
    shouldUseWebAudioApi: useWebAudioApi ?? false
  });
  const actualFrom = parentSequence ? parentSequence.relativeFrom : 0;
  const duration = parentSequence ? Math.min(parentSequence.durationInFrames, durationInFrames) : durationInFrames;
  const preloadedSrc = usePreload(src);
  const actualSrc = useAppendVideoFragment({
    actualSrc: preloadedSrc,
    actualFrom,
    duration,
    fps
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return videoRef.current;
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => playbackLogging({
    logLevel,
    message: `Mounting video with source = ${actualSrc}, v=${VERSION}, user agent=${typeof navigator === "undefined" ? "server" : navigator.userAgent}`,
    tag: "video",
    mountTime
  }));
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = videoRef;
    if (!current) {
      return;
    }
    const errorHandler = () => {
      if (current.error) {
        console.error("Error occurred in video", current?.error);
        if (onError) {
          const err = new Error(`Code ${current.error.code}: ${current.error.message}`);
          onError(err);
          return;
        }
        throw new Error(`The browser threw an error while playing the video ${src}: Code ${current.error.code} - ${current?.error?.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);
      } else {
        if (onError) {
          const err = new Error(`The browser threw an error while playing the video ${src}`);
          onError(err);
          return;
        }
        throw new Error("The browser threw an error while playing the video");
      }
    };
    current.addEventListener("error", errorHandler, { once: true });
    return () => {
      current.removeEventListener("error", errorHandler);
    };
  }, [onError, src]);
  const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDuration);
  currentOnDurationCallback.current = onDuration;
  useEmitVideoFrame({ ref: videoRef, onVideoFrame });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = videoRef;
    if (!current) {
      return;
    }
    if (current.duration) {
      currentOnDurationCallback.current?.(src, current.duration);
      return;
    }
    const onLoadedMetadata = () => {
      currentOnDurationCallback.current?.(src, current.duration);
    };
    current.addEventListener("loadedmetadata", onLoadedMetadata);
    return () => {
      current.removeEventListener("loadedmetadata", onLoadedMetadata);
    };
  }, [src]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const { current } = videoRef;
    if (!current) {
      return;
    }
    if (isIosSafari()) {
      current.preload = "metadata";
    } else {
      current.preload = "auto";
    }
  }, []);
  const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return {
      ...style,
      opacity: isSequenceHidden ? 0 : style?.opacity ?? 1
    };
  }, [isSequenceHidden, style]);
  const crossOriginValue = getCrossOriginValue({
    crossOrigin,
    requestsVideoFrame: Boolean(onVideoFrame)
  });
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("video", {
    ref: videoRef,
    muted: muted || mediaMuted || isSequenceHidden || userPreferredVolume <= 0,
    playsInline: true,
    src: actualSrc,
    loop: _remotionInternalNativeLoopPassed,
    style: actualStyle,
    disableRemotePlayback: true,
    crossOrigin: crossOriginValue,
    ...nativeProps
  });
};
var VideoForPreview = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForDevelopmentRefForwardingFunction);

// src/watch-static-file.ts
var WATCH_REMOTION_STATIC_FILES = "remotion_staticFilesChanged";
var watchStaticFile = (fileName, callback) => {
  if (ENABLE_V5_BREAKING_CHANGES) {
    throw new Error("watchStaticFile() has moved into the `@remotion/studio` package. Update your imports.");
  }
  if (!getRemotionEnvironment().isStudio) {
    console.warn("The watchStaticFile() API is only available while using the Remotion Studio.");
    return { cancel: () => {
      return;
    } };
  }
  const withoutStaticBase = fileName.startsWith(window.remotion_staticBase) ? fileName.replace(window.remotion_staticBase, "") : fileName;
  const withoutLeadingSlash = withoutStaticBase.startsWith("/") ? withoutStaticBase.slice(1) : withoutStaticBase;
  let prevFileData = window.remotion_staticFiles.find((file) => file.name === withoutLeadingSlash);
  const checkFile = (event) => {
    const staticFiles = event.detail.files;
    const newFileData = staticFiles.find((file) => file.name === withoutLeadingSlash);
    if (!newFileData) {
      if (prevFileData !== undefined) {
        callback(null);
      }
      prevFileData = undefined;
      return;
    }
    if (prevFileData === undefined || prevFileData.lastModified !== newFileData.lastModified) {
      callback(newFileData);
      prevFileData = newFileData;
    }
  };
  window.addEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);
  const cancel = () => {
    return window.removeEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);
  };
  return { cancel };
};

// src/wrap-remotion-context.tsx


function useRemotionContexts() {
  const compositionManagerCtx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositionManager);
  const timelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimelineContext);
  const setTimelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SetTimelineContext);
  const sequenceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceContext);
  const nonceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(NonceContext);
  const canUseRemotionHooksContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CanUseRemotionHooks);
  const preloadContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(PreloadContext);
  const resolveCompositionContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ResolveCompositionContext);
  const renderAssetManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RenderAssetManager);
  const sequenceManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceManager);
  const bufferManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(BufferingContextReact);
  const logLevelContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    compositionManagerCtx,
    timelineContext,
    setTimelineContext,
    sequenceContext,
    nonceContext,
    canUseRemotionHooksContext,
    preloadContext,
    resolveCompositionContext,
    renderAssetManagerContext,
    sequenceManagerContext,
    bufferManagerContext,
    logLevelContext
  }), [
    compositionManagerCtx,
    nonceContext,
    sequenceContext,
    setTimelineContext,
    timelineContext,
    canUseRemotionHooksContext,
    preloadContext,
    resolveCompositionContext,
    renderAssetManagerContext,
    sequenceManagerContext,
    bufferManagerContext,
    logLevelContext
  ]);
}
var RemotionContextProvider = (props2) => {
  const { children, contexts } = props2;
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LogLevelContext.Provider, {
    value: contexts.logLevelContext,
    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, {
      value: contexts.canUseRemotionHooksContext,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, {
        value: contexts.nonceContext,
        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, {
          value: contexts.preloadContext,
          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, {
            value: contexts.compositionManagerCtx,
            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, {
              value: contexts.sequenceManagerContext,
              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, {
                value: contexts.renderAssetManagerContext,
                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, {
                  value: contexts.resolveCompositionContext,
                  children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {
                    value: contexts.timelineContext,
                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, {
                      value: contexts.setTimelineContext,
                      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, {
                        value: contexts.sequenceContext,
                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingContextReact.Provider, {
                          value: contexts.bufferManagerContext,
                          children
                        })
                      })
                    })
                  })
                })
              })
            })
          })
        })
      })
    })
  });
};

// src/internals.ts
var compositionSelectorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();
var Internals = {
  useUnsafeVideoConfig,
  useFrameForVolumeProp,
  useTimelinePosition,
  evaluateVolume,
  getAbsoluteSrc,
  Timeline: exports_timeline_position_state,
  validateMediaTrimProps,
  validateMediaProps,
  resolveTrimProps,
  VideoForPreview,
  CompositionManager,
  CompositionSetters,
  SequenceManager,
  SequenceVisibilityToggleContext,
  RemotionRoot,
  useVideo,
  getRoot,
  useMediaVolumeState,
  useMediaMutedState,
  useLazyComponent,
  truthy,
  SequenceContext,
  useRemotionContexts,
  RemotionContextProvider,
  CSSUtils: exports_default_css,
  setupEnvVariables,
  MediaVolumeContext,
  SetMediaVolumeContext,
  getRemotionEnvironment,
  SharedAudioContext,
  SharedAudioContextProvider,
  invalidCompositionErrorMessage,
  isCompositionIdValid,
  getPreviewDomElement,
  compositionsRef,
  portalNode,
  waitForRoot,
  CanUseRemotionHooksProvider,
  CanUseRemotionHooks,
  PrefetchProvider,
  DurationsContextProvider,
  IsPlayerContextProvider,
  useIsPlayer,
  EditorPropsProvider,
  EditorPropsContext,
  usePreload,
  NonceContext,
  SetNonceContext,
  resolveVideoConfig,
  useResolvedVideoConfig,
  resolveCompositionsRef,
  ResolveCompositionConfig,
  REMOTION_STUDIO_CONTAINER_ELEMENT,
  RenderAssetManager,
  persistCurrentFrame,
  useTimelineSetFrame,
  isIosSafari,
  WATCH_REMOTION_STATIC_FILES,
  addSequenceStackTraces,
  useMediaStartsAt,
  BufferingProvider,
  BufferingContextReact,
  enableSequenceStackTraces,
  CurrentScaleContext,
  PreviewSizeContext,
  calculateScale,
  editorPropsProviderRef,
  PROPS_UPDATED_EXTERNALLY,
  validateRenderAsset,
  Log,
  LogLevelContext,
  useLogLevel,
  playbackLogging,
  timeValueRef,
  compositionSelectorRef
};
// src/interpolate-colors.ts
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...args) {
  return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
}
function getMatchers() {
  const cachedMatchers = {
    rgb: undefined,
    rgba: undefined,
    hsl: undefined,
    hsla: undefined,
    hex3: undefined,
    hex4: undefined,
    hex5: undefined,
    hex6: undefined,
    hex8: undefined
  };
  if (cachedMatchers.rgb === undefined) {
    cachedMatchers.rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
    cachedMatchers.rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
    cachedMatchers.hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
    cachedMatchers.hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;
    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;
  }
  return cachedMatchers;
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b2 = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b2 * 255) << 8;
}
function parse255(str) {
  const int = Number.parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}
function parse360(str) {
  const int = Number.parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = Number.parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = Number.parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}
var colorNames = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
function normalizeColor(color) {
  const matchers = getMatchers();
  let match;
  if (matchers.hex6) {
    if (match = matchers.hex6.exec(color)) {
      return Number.parseInt(match[1] + "ff", 16) >>> 0;
    }
  }
  if (colorNames[color] !== undefined) {
    return colorNames[color];
  }
  if (matchers.rgb) {
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
  }
  if (matchers.rgba) {
    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
  }
  if (matchers.hex3) {
    if (match = matchers.hex3.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
  }
  if (matchers.hex8) {
    if (match = matchers.hex8.exec(color)) {
      return Number.parseInt(match[1], 16) >>> 0;
    }
  }
  if (matchers.hex4) {
    if (match = matchers.hex4.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
  }
  if (matchers.hsl) {
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
    }
  }
  if (matchers.hsla) {
    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }
  }
  throw new Error(`invalid color string ${color} provided`);
}
var opacity = (c2) => {
  return (c2 >> 24 & 255) / 255;
};
var red = (c2) => {
  return c2 >> 16 & 255;
};
var green = (c2) => {
  return c2 >> 8 & 255;
};
var blue = (c2) => {
  return c2 & 255;
};
var rgbaColor = (r, g, b2, alpha) => {
  return `rgba(${r}, ${g}, ${b2}, ${alpha})`;
};
function processColor(color) {
  const normalizedColor = normalizeColor(color);
  return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
}
var interpolateColorsRGB = (value, inputRange, colors) => {
  const [r, g, b2, a2] = [red, green, blue, opacity].map((f) => {
    const unrounded = interpolate(value, inputRange, colors.map((c2) => f(c2)), {
      extrapolateLeft: "clamp",
      extrapolateRight: "clamp"
    });
    if (f === opacity) {
      return Number(unrounded.toFixed(3));
    }
    return Math.round(unrounded);
  });
  return rgbaColor(r, g, b2, a2);
};
var interpolateColors = (input, inputRange, outputRange) => {
  if (typeof input === "undefined") {
    throw new TypeError("input can not be undefined");
  }
  if (typeof inputRange === "undefined") {
    throw new TypeError("inputRange can not be undefined");
  }
  if (typeof outputRange === "undefined") {
    throw new TypeError("outputRange can not be undefined");
  }
  if (inputRange.length !== outputRange.length) {
    throw new TypeError("inputRange (" + inputRange.length + " values provided) and outputRange (" + outputRange.length + " values provided) must have the same length");
  }
  const processedOutputRange = outputRange.map((c2) => processColor(c2));
  return interpolateColorsRGB(input, inputRange, processedOutputRange);
};
// src/validate-frame.ts
var validateFrame = ({
  allowFloats,
  durationInFrames,
  frame
}) => {
  if (typeof frame === "undefined") {
    throw new TypeError(`Argument missing for parameter "frame"`);
  }
  if (typeof frame !== "number") {
    throw new TypeError(`Argument passed for "frame" is not a number: ${frame}`);
  }
  if (!Number.isFinite(frame)) {
    throw new RangeError(`Frame ${frame} is not finite`);
  }
  if (frame % 1 !== 0 && !allowFloats) {
    throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);
  }
  if (frame < 0 && frame < -durationInFrames) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);
  }
  if (frame > durationInFrames - 1) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);
  }
};

// src/video/offthread-video-source.ts
var getOffthreadVideoSource = ({
  src,
  transparent,
  currentTime,
  toneMapped
}) => {
  return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(Math.max(0, currentTime))}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;
};
// src/series/index.tsx


// src/series/flatten-children.tsx

var flattenChildren = (children) => {
  const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);
  return childrenArray.reduce((flatChildren, child) => {
    if (child.type === react__WEBPACK_IMPORTED_MODULE_0__.Fragment) {
      return flatChildren.concat(flattenChildren(child.props.children));
    }
    flatChildren.push(child);
    return flatChildren;
  }, []);
};

// src/series/is-inside-series.tsx


var IsInsideSeriesContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);
var IsInsideSeriesContainer = ({ children }) => {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContext.Provider, {
    value: true,
    children
  });
};
var IsNotInsideSeriesProvider = ({ children }) => {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContext.Provider, {
    value: false,
    children
  });
};
var useRequireToBeInsideSeries = () => {
  const isInsideSeries = react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsInsideSeriesContext);
  if (!isInsideSeries) {
    throw new Error("This component must be inside a <Series /> component.");
  }
};

// src/series/index.tsx

var SeriesSequenceRefForwardingFunction = ({ children }, _ref) => {
  useRequireToBeInsideSeries();
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsNotInsideSeriesProvider, {
    children
  });
};
var SeriesSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SeriesSequenceRefForwardingFunction);
var Series = (props2) => {
  const childrenValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    let startFrame = 0;
    const flattenedChildren = flattenChildren(props2.children);
    return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(flattenedChildren, (child, i) => {
      const castedChild = child;
      if (typeof castedChild === "string") {
        if (castedChild.trim() === "") {
          return null;
        }
        throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but you passed a string "${castedChild}"`);
      }
      if (castedChild.type !== SeriesSequence) {
        throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but got ${castedChild} instead`);
      }
      const debugInfo = `index = ${i}, duration = ${castedChild.props.durationInFrames}`;
      if (!castedChild?.props.children) {
        throw new TypeError(`A <Series.Sequence /> component (${debugInfo}) was detected to not have any children. Delete it to fix this error.`);
      }
      const durationInFramesProp = castedChild.props.durationInFrames;
      const {
        durationInFrames,
        children: _children,
        from,
        name,
        ...passedProps
      } = castedChild.props;
      if (i !== flattenedChildren.length - 1 || durationInFramesProp !== Infinity) {
        validateDurationInFrames(durationInFramesProp, {
          component: `of a <Series.Sequence /> component`,
          allowFloats: true
        });
      }
      const offset = castedChild.props.offset ?? 0;
      if (Number.isNaN(offset)) {
        throw new TypeError(`The "offset" property of a <Series.Sequence /> must not be NaN, but got NaN (${debugInfo}).`);
      }
      if (!Number.isFinite(offset)) {
        throw new TypeError(`The "offset" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);
      }
      if (offset % 1 !== 0) {
        throw new TypeError(`The "offset" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);
      }
      const currentStartFrame = startFrame + offset;
      startFrame += durationInFramesProp + offset;
      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
        name: name || "<Series.Sequence>",
        from: currentStartFrame,
        durationInFrames: durationInFramesProp,
        ...passedProps,
        ref: castedChild.ref,
        children: child
      });
    });
  }, [props2.children]);
  if (ENABLE_V5_BREAKING_CHANGES) {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContainer, {
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
        ...props2,
        children: childrenValue
      })
    });
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContainer, {
    children: childrenValue
  });
};
Series.Sequence = SeriesSequence;
addSequenceStackTraces(SeriesSequence);
// src/validation/validation-spring-duration.ts
var validateSpringDuration = (dur) => {
  if (typeof dur === "undefined") {
    return;
  }
  if (typeof dur !== "number") {
    throw new TypeError(`A "duration" of a spring must be a "number" but is "${typeof dur}"`);
  }
  if (Number.isNaN(dur)) {
    throw new TypeError('A "duration" of a spring is NaN, which it must not be');
  }
  if (!Number.isFinite(dur)) {
    throw new TypeError('A "duration" of a spring must be finite, but is ' + dur);
  }
  if (dur <= 0) {
    throw new TypeError('A "duration" of a spring must be positive, but is ' + dur);
  }
};

// src/spring/spring-utils.ts
var defaultSpringConfig = {
  damping: 10,
  mass: 1,
  stiffness: 100,
  overshootClamping: false
};
var advanceCache = {};
function advance({
  animation,
  now,
  config
}) {
  const { toValue, lastTimestamp, current, velocity } = animation;
  const deltaTime = Math.min(now - lastTimestamp, 64);
  if (config.damping <= 0) {
    throw new Error("Spring damping must be greater than 0, otherwise the spring() animation will never end, causing an infinite loop.");
  }
  const c2 = config.damping;
  const m = config.mass;
  const k = config.stiffness;
  const cacheKey = [
    toValue,
    lastTimestamp,
    current,
    velocity,
    c2,
    m,
    k,
    now
  ].join("-");
  if (advanceCache[cacheKey]) {
    return advanceCache[cacheKey];
  }
  const v0 = -velocity;
  const x0 = toValue - current;
  const zeta = c2 / (2 * Math.sqrt(k * m));
  const omega0 = Math.sqrt(k / m);
  const omega1 = omega0 * Math.sqrt(1 - zeta ** 2);
  const t = deltaTime / 1000;
  const sin1 = Math.sin(omega1 * t);
  const cos1 = Math.cos(omega1 * t);
  const underDampedEnvelope = Math.exp(-zeta * omega0 * t);
  const underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);
  const underDampedPosition = toValue - underDampedFrag1;
  const underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);
  const criticallyDampedEnvelope = Math.exp(-omega0 * t);
  const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);
  const criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);
  const animationNode = {
    toValue,
    prevPosition: current,
    lastTimestamp: now,
    current: zeta < 1 ? underDampedPosition : criticallyDampedPosition,
    velocity: zeta < 1 ? underDampedVelocity : criticallyDampedVelocity
  };
  advanceCache[cacheKey] = animationNode;
  return animationNode;
}
var calculationCache = {};
function springCalculation({
  frame,
  fps,
  config = {}
}) {
  const from = 0;
  const to = 1;
  const cacheKey = [
    frame,
    fps,
    config.damping,
    config.mass,
    config.overshootClamping,
    config.stiffness
  ].join("-");
  if (calculationCache[cacheKey]) {
    return calculationCache[cacheKey];
  }
  let animation = {
    lastTimestamp: 0,
    current: from,
    toValue: to,
    velocity: 0,
    prevPosition: 0
  };
  const frameClamped = Math.max(0, frame);
  const unevenRest = frameClamped % 1;
  for (let f = 0;f <= Math.floor(frameClamped); f++) {
    if (f === Math.floor(frameClamped)) {
      f += unevenRest;
    }
    const time = f / fps * 1000;
    animation = advance({
      animation,
      now: time,
      config: {
        ...defaultSpringConfig,
        ...config
      }
    });
  }
  calculationCache[cacheKey] = animation;
  return animation;
}

// src/spring/measure-spring.ts
var cache = new Map;
function measureSpring({
  fps,
  config = {},
  threshold = 0.005
}) {
  if (typeof threshold !== "number") {
    throw new TypeError(`threshold must be a number, got ${threshold} of type ${typeof threshold}`);
  }
  if (threshold === 0) {
    return Infinity;
  }
  if (threshold === 1) {
    return 0;
  }
  if (isNaN(threshold)) {
    throw new TypeError("Threshold is NaN");
  }
  if (!Number.isFinite(threshold)) {
    throw new TypeError("Threshold is not finite");
  }
  if (threshold < 0) {
    throw new TypeError("Threshold is below 0");
  }
  const cacheKey = [
    fps,
    config.damping,
    config.mass,
    config.overshootClamping,
    config.stiffness,
    threshold
  ].join("-");
  if (cache.has(cacheKey)) {
    return cache.get(cacheKey);
  }
  validateFps(fps, "to the measureSpring() function", false);
  let frame = 0;
  let finishedFrame = 0;
  const calc = () => {
    return springCalculation({
      fps,
      frame,
      config
    });
  };
  let animation = calc();
  const calcDifference = () => {
    return Math.abs(animation.current - animation.toValue);
  };
  let difference = calcDifference();
  while (difference >= threshold) {
    frame++;
    animation = calc();
    difference = calcDifference();
  }
  finishedFrame = frame;
  for (let i = 0;i < 20; i++) {
    frame++;
    animation = calc();
    difference = calcDifference();
    if (difference >= threshold) {
      i = 0;
      finishedFrame = frame + 1;
    }
  }
  cache.set(cacheKey, finishedFrame);
  return finishedFrame;
}

// src/spring/index.ts
function spring({
  frame: passedFrame,
  fps,
  config = {},
  from = 0,
  to = 1,
  durationInFrames: passedDurationInFrames,
  durationRestThreshold,
  delay = 0,
  reverse = false
}) {
  validateSpringDuration(passedDurationInFrames);
  validateFrame({
    frame: passedFrame,
    durationInFrames: Infinity,
    allowFloats: true
  });
  validateFps(fps, "to spring()", false);
  const needsToCalculateNaturalDuration = reverse || typeof passedDurationInFrames !== "undefined";
  const naturalDuration = needsToCalculateNaturalDuration ? measureSpring({
    fps,
    config,
    threshold: durationRestThreshold
  }) : undefined;
  const naturalDurationGetter = needsToCalculateNaturalDuration ? {
    get: () => naturalDuration
  } : {
    get: () => {
      throw new Error("did not calculate natural duration, this is an error with Remotion. Please report");
    }
  };
  const reverseProcessed = reverse ? (passedDurationInFrames ?? naturalDurationGetter.get()) - passedFrame : passedFrame;
  const delayProcessed = reverseProcessed + (reverse ? delay : -delay);
  const durationProcessed = passedDurationInFrames === undefined ? delayProcessed : delayProcessed / (passedDurationInFrames / naturalDurationGetter.get());
  if (passedDurationInFrames && delayProcessed > passedDurationInFrames) {
    return to;
  }
  const spr = springCalculation({
    fps,
    frame: durationProcessed,
    config
  });
  const inner = config.overshootClamping ? to >= from ? Math.min(spr.current, to) : Math.max(spr.current, to) : spr.current;
  const interpolated = from === 0 && to === 1 ? inner : interpolate(inner, [0, 1], [from, to]);
  return interpolated;
}
// src/static-file.ts
var problematicCharacters = {
  "%3A": ":",
  "%2F": "/",
  "%3F": "?",
  "%23": "#",
  "%5B": "[",
  "%5D": "]",
  "%40": "@",
  "%21": "!",
  "%24": "$",
  "%26": "&",
  "%27": "'",
  "%28": "(",
  "%29": ")",
  "%2A": "*",
  "%2B": "+",
  "%2C": ",",
  "%3B": ";"
};
var didWarn2 = {};
var warnOnce3 = (message) => {
  if (didWarn2[message]) {
    return;
  }
  console.warn(message);
  didWarn2[message] = true;
};
var includesHexOfUnsafeChar = (path) => {
  for (const key of Object.keys(problematicCharacters)) {
    if (path.includes(key)) {
      return { containsHex: true, hexCode: key };
    }
  }
  return { containsHex: false };
};
var trimLeadingSlash = (path) => {
  if (path.startsWith("/")) {
    return trimLeadingSlash(path.substring(1));
  }
  return path;
};
var inner = (path) => {
  if (typeof window !== "undefined" && window.remotion_staticBase) {
    if (path.startsWith(window.remotion_staticBase)) {
      throw new Error(`The value "${path}" is already prefixed with the static base ${window.remotion_staticBase}. You don't need to call staticFile() on it.`);
    }
    return `${window.remotion_staticBase}/${trimLeadingSlash(path)}`;
  }
  return `/${trimLeadingSlash(path)}`;
};
var encodeBySplitting = (path) => {
  const splitBySlash = path.split("/");
  const encodedArray = splitBySlash.map((element) => {
    return encodeURIComponent(element);
  });
  const merged = encodedArray.join("/");
  return merged;
};
var staticFile = (path) => {
  if (path === null) {
    throw new TypeError("null was passed to staticFile()");
  }
  if (typeof path === "undefined") {
    throw new TypeError("undefined was passed to staticFile()");
  }
  if (path.startsWith("http://") || path.startsWith("https://")) {
    throw new TypeError(`staticFile() does not support remote URLs - got "${path}". Instead, pass the URL without wrapping it in staticFile(). See: https://remotion.dev/docs/staticfile-remote-urls`);
  }
  if (path.startsWith("..") || path.startsWith("./")) {
    throw new TypeError(`staticFile() does not support relative paths - got "${path}". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);
  }
  if (path.startsWith("/Users") || path.startsWith("/home") || path.startsWith("/tmp") || path.startsWith("/etc") || path.startsWith("/opt") || path.startsWith("/var") || path.startsWith("C:") || path.startsWith("D:") || path.startsWith("E:")) {
    throw new TypeError(`staticFile() does not support absolute paths - got "${path}". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);
  }
  if (path.startsWith("public/")) {
    throw new TypeError(`Do not include the public/ prefix when using staticFile() - got "${path}". See: https://remotion.dev/docs/staticfile-relative-paths`);
  }
  const includesHex = includesHexOfUnsafeChar(path);
  if (includesHex.containsHex) {
    warnOnce3(`WARNING: You seem to pass an already encoded path (path contains ${includesHex.hexCode}). Since Remotion 4.0, the encoding is done by staticFile() itself. You may want to remove a encodeURIComponent() wrapping.`);
  }
  const preprocessed = encodeBySplitting(path);
  const preparsed = inner(preprocessed);
  if (!preparsed.startsWith("/")) {
    return `/${preparsed}`;
  }
  return preparsed;
};
// src/Still.tsx

var Still = (props2) => {
  const newProps = {
    ...props2,
    durationInFrames: 1,
    fps: 1
  };
  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Composition, newProps);
};
// src/video/OffthreadVideo.tsx


// src/video/OffthreadVideoForRendering.tsx


var OffthreadVideoForRendering = ({
  onError,
  volume: volumeProp,
  playbackRate,
  src,
  muted,
  allowAmplificationDuringRender,
  transparent = false,
  toneMapped = true,
  toneFrequency,
  name,
  loopVolumeCurveBehavior,
  delayRenderRetries,
  delayRenderTimeoutInMilliseconds,
  onVideoFrame,
  crossOrigin,
  audioStreamIndex,
  ...props2
}) => {
  const absoluteFrame = useTimelinePosition();
  const frame = useCurrentFrame();
  const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
  const videoConfig = useUnsafeVideoConfig();
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const mediaStartsAt = useMediaStartsAt();
  const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);
  if (!src) {
    throw new TypeError("No `src` was passed to <OffthreadVideo>.");
  }
  const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `offthreadvideo-${random(src ?? "")}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.relativeFrom}-${sequenceContext?.durationInFrames}`, [
    src,
    sequenceContext?.cumulatedFrom,
    sequenceContext?.relativeFrom,
    sequenceContext?.durationInFrames
  ]);
  if (!videoConfig) {
    throw new Error("No video config found");
  }
  const volume = evaluateVolume({
    volume: volumeProp,
    frame: volumePropsFrame,
    mediaVolume: 1
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!src) {
      throw new Error("No src passed");
    }
    if (!window.remotion_audioEnabled) {
      return;
    }
    if (muted) {
      return;
    }
    if (volume <= 0) {
      return;
    }
    registerRenderAsset({
      type: "video",
      src: getAbsoluteSrc(src),
      id,
      frame: absoluteFrame,
      volume,
      mediaFrame: frame,
      playbackRate: playbackRate ?? 1,
      toneFrequency: toneFrequency ?? null,
      audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),
      audioStreamIndex: audioStreamIndex ?? 0
    });
    return () => unregisterRenderAsset(id);
  }, [
    muted,
    src,
    registerRenderAsset,
    id,
    unregisterRenderAsset,
    volume,
    frame,
    absoluteFrame,
    playbackRate,
    toneFrequency,
    sequenceContext?.relativeFrom,
    audioStreamIndex
  ]);
  const currentTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return getExpectedMediaFrameUncorrected({
      frame,
      playbackRate: playbackRate || 1,
      startFrom: -mediaStartsAt
    }) / videoConfig.fps;
  }, [frame, mediaStartsAt, playbackRate, videoConfig.fps]);
  const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return getOffthreadVideoSource({
      src,
      currentTime,
      transparent,
      toneMapped
    });
  }, [toneMapped, currentTime, src, transparent]);
  const [imageSrc, setImageSrc] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
    if (!window.remotion_videoEnabled) {
      return;
    }
    const cleanup = [];
    setImageSrc(null);
    const controller = new AbortController;
    const newHandle = delayRender(`Fetching ${actualSrc} from server`, {
      retries: delayRenderRetries ?? undefined,
      timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
    });
    const execute = async () => {
      try {
        const res = await fetch(actualSrc, {
          signal: controller.signal,
          cache: "no-store"
        });
        if (res.status !== 200) {
          if (res.status === 500) {
            const json = await res.json();
            if (json.error) {
              const cleanedUpErrorMessage = json.error.replace(/^Error: /, "");
              throw new Error(cleanedUpErrorMessage);
            }
          }
          throw new Error(`Server returned status ${res.status} while fetching ${actualSrc}`);
        }
        const blob = await res.blob();
        const url = URL.createObjectURL(blob);
        cleanup.push(() => URL.revokeObjectURL(url));
        setImageSrc({
          src: url,
          handle: newHandle
        });
      } catch (err) {
        if (err.message.includes("aborted")) {
          continueRender(newHandle);
          return;
        }
        if (controller.signal.aborted) {
          continueRender(newHandle);
          return;
        }
        if (err.message.includes("Failed to fetch")) {
          err = new Error(`Failed to fetch ${actualSrc}. This could be caused by Chrome rejecting the request because the disk space is low. Consider increasing the disk size of your environment.`, { cause: err });
        }
        if (onError) {
          onError(err);
        } else {
          cancelRender(err);
        }
      }
    };
    execute();
    cleanup.push(() => {
      if (controller.signal.aborted) {
        return;
      }
      controller.abort();
    });
    return () => {
      cleanup.forEach((c2) => c2());
    };
  }, [
    actualSrc,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    onError
  ]);
  const onErr = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    if (onError) {
      onError?.(new Error("Failed to load image with src " + imageSrc));
    } else {
      cancelRender("Failed to load image with src " + imageSrc);
    }
  }, [imageSrc, onError]);
  const className = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    return [OFFTHREAD_VIDEO_CLASS_NAME, props2.className].filter(truthy).join(" ");
  }, [props2.className]);
  const onImageFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((img) => {
    if (onVideoFrame) {
      onVideoFrame(img);
    }
  }, [onVideoFrame]);
  if (!imageSrc || !window.remotion_videoEnabled) {
    return null;
  }
  continueRender(imageSrc.handle);
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Img, {
    src: imageSrc.src,
    className,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    onImageFrame,
    ...props2,
    onError: onErr
  });
};

// src/video/OffthreadVideo.tsx

var OffthreadVideo = (props2) => {
  const {
    startFrom,
    endAt,
    trimBefore,
    trimAfter,
    name,
    pauseWhenBuffering,
    stack,
    showInTimeline,
    ...otherProps
  } = props2;
  const environment = getRemotionEnvironment();
  const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    return;
  }, []);
  if (typeof props2.src !== "string") {
    throw new TypeError(`The \`<OffthreadVideo>\` tag requires a string for \`src\`, but got ${JSON.stringify(props2.src)} instead.`);
  }
  if (props2.imageFormat) {
    throw new TypeError(`The \`<OffthreadVideo>\` tag does no longer accept \`imageFormat\`. Use the \`transparent\` prop if you want to render a transparent video.`);
  }
  validateMediaTrimProps({ startFrom, endAt, trimBefore, trimAfter });
  const { trimBeforeValue, trimAfterValue } = resolveTrimProps({
    startFrom,
    endAt,
    trimBefore,
    trimAfter
  });
  if (typeof trimBeforeValue !== "undefined" || typeof trimAfterValue !== "undefined") {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
      layout: "none",
      from: 0 - (trimBeforeValue ?? 0),
      showInTimeline: false,
      durationInFrames: trimAfterValue,
      name,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideo, {
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        ...otherProps
      })
    });
  }
  validateMediaProps(props2, "Video");
  if (environment.isRendering) {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideoForRendering, {
      ...otherProps
    });
  }
  const {
    transparent,
    toneMapped,
    onAutoPlayError,
    onVideoFrame,
    crossOrigin,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    ...propsForPreview
  } = otherProps;
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForPreview, {
    _remotionInternalStack: stack ?? null,
    _remotionInternalNativeLoopPassed: false,
    onDuration,
    onlyWarnForMediaSeekingError: true,
    pauseWhenBuffering: pauseWhenBuffering ?? false,
    showInTimeline: showInTimeline ?? true,
    onAutoPlayError: onAutoPlayError ?? undefined,
    onVideoFrame: onVideoFrame ?? null,
    crossOrigin,
    ...propsForPreview
  });
};
// src/video/Video.tsx


// src/video/VideoForRendering.tsx


// src/video/seek-until-right.ts
var roundTo6Commas = (num) => {
  return Math.round(num * 1e5) / 1e5;
};
var seekToTime = ({
  element,
  desiredTime,
  logLevel,
  mountTime
}) => {
  if (isApproximatelyTheSame(element.currentTime, desiredTime)) {
    return {
      wait: Promise.resolve(desiredTime),
      cancel: () => {}
    };
  }
  seek({
    logLevel,
    mediaRef: element,
    time: desiredTime,
    why: "Seeking during rendering",
    mountTime
  });
  let cancel;
  let cancelSeeked = null;
  const prom = new Promise((resolve) => {
    cancel = element.requestVideoFrameCallback((now, metadata) => {
      const displayIn = metadata.expectedDisplayTime - now;
      if (displayIn <= 0) {
        resolve(metadata.mediaTime);
        return;
      }
      setTimeout(() => {
        resolve(metadata.mediaTime);
      }, displayIn + 150);
    });
  });
  const waitForSeekedEvent = new Promise((resolve) => {
    const onDone = () => {
      resolve();
    };
    element.addEventListener("seeked", onDone, {
      once: true
    });
    cancelSeeked = () => {
      element.removeEventListener("seeked", onDone);
    };
  });
  return {
    wait: Promise.all([prom, waitForSeekedEvent]).then(([time]) => time),
    cancel: () => {
      cancelSeeked?.();
      element.cancelVideoFrameCallback(cancel);
    }
  };
};
var seekToTimeMultipleUntilRight = ({
  element,
  desiredTime,
  fps,
  logLevel,
  mountTime
}) => {
  const threshold = 1 / fps / 2;
  let currentCancel = () => {
    return;
  };
  if (Number.isFinite(element.duration) && element.currentTime >= element.duration && desiredTime >= element.duration) {
    return {
      prom: Promise.resolve(),
      cancel: () => {}
    };
  }
  const prom = new Promise((resolve, reject) => {
    const firstSeek = seekToTime({
      element,
      desiredTime: desiredTime + threshold,
      logLevel,
      mountTime
    });
    firstSeek.wait.then((seekedTo) => {
      const difference = Math.abs(desiredTime - seekedTo);
      if (difference <= threshold) {
        return resolve();
      }
      const sign = desiredTime > seekedTo ? 1 : -1;
      const newSeek = seekToTime({
        element,
        desiredTime: seekedTo + threshold * sign,
        logLevel,
        mountTime
      });
      currentCancel = newSeek.cancel;
      newSeek.wait.then((newTime) => {
        const newDifference = Math.abs(desiredTime - newTime);
        if (roundTo6Commas(newDifference) <= roundTo6Commas(threshold)) {
          return resolve();
        }
        const thirdSeek = seekToTime({
          element,
          desiredTime: desiredTime + threshold,
          logLevel,
          mountTime
        });
        currentCancel = thirdSeek.cancel;
        return thirdSeek.wait.then(() => {
          resolve();
        }).catch((err) => {
          reject(err);
        });
      }).catch((err) => {
        reject(err);
      });
    });
    currentCancel = firstSeek.cancel;
  });
  return {
    prom,
    cancel: () => {
      currentCancel();
    }
  };
};

// src/video/VideoForRendering.tsx

var VideoForRenderingForwardFunction = ({
  onError,
  volume: volumeProp,
  allowAmplificationDuringRender,
  playbackRate,
  onDuration,
  toneFrequency,
  name,
  acceptableTimeShiftInSeconds,
  delayRenderRetries,
  delayRenderTimeoutInMilliseconds,
  loopVolumeCurveBehavior,
  audioStreamIndex,
  ...props2
}, ref) => {
  const absoluteFrame = useTimelinePosition();
  const frame = useCurrentFrame();
  const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? "repeat");
  const videoConfig = useUnsafeVideoConfig();
  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);
  const mediaStartsAt = useMediaStartsAt();
  const environment = getRemotionEnvironment();
  const logLevel = useLogLevel();
  const mountTime = useMountTime();
  const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);
  const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => `video-${random(props2.src ?? "")}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.relativeFrom}-${sequenceContext?.durationInFrames}`, [
    props2.src,
    sequenceContext?.cumulatedFrom,
    sequenceContext?.relativeFrom,
    sequenceContext?.durationInFrames
  ]);
  if (!videoConfig) {
    throw new Error("No video config found");
  }
  const volume = evaluateVolume({
    volume: volumeProp,
    frame: volumePropsFrame,
    mediaVolume: 1
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!props2.src) {
      throw new Error("No src passed");
    }
    if (props2.muted) {
      return;
    }
    if (volume <= 0) {
      return;
    }
    if (!window.remotion_audioEnabled) {
      return;
    }
    registerRenderAsset({
      type: "video",
      src: getAbsoluteSrc(props2.src),
      id,
      frame: absoluteFrame,
      volume,
      mediaFrame: frame,
      playbackRate: playbackRate ?? 1,
      toneFrequency: toneFrequency ?? null,
      audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),
      audioStreamIndex: audioStreamIndex ?? 0
    });
    return () => unregisterRenderAsset(id);
  }, [
    props2.muted,
    props2.src,
    registerRenderAsset,
    id,
    unregisterRenderAsset,
    volume,
    frame,
    absoluteFrame,
    playbackRate,
    toneFrequency,
    sequenceContext?.relativeFrom,
    audioStreamIndex
  ]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => {
    return videoRef.current;
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!window.remotion_videoEnabled) {
      return;
    }
    const { current } = videoRef;
    if (!current) {
      return;
    }
    const currentTime = getMediaTime({
      frame,
      playbackRate: playbackRate || 1,
      startFrom: -mediaStartsAt,
      fps: videoConfig.fps
    });
    const handle = delayRender(`Rendering <Video /> with src="${props2.src}" at time ${currentTime}`, {
      retries: delayRenderRetries ?? undefined,
      timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
    });
    if (window.process?.env?.NODE_ENV === "test") {
      continueRender(handle);
      return;
    }
    if (isApproximatelyTheSame(current.currentTime, currentTime)) {
      if (current.readyState >= 2) {
        continueRender(handle);
        return;
      }
      const loadedDataHandler = () => {
        continueRender(handle);
      };
      current.addEventListener("loadeddata", loadedDataHandler, { once: true });
      return () => {
        current.removeEventListener("loadeddata", loadedDataHandler);
      };
    }
    const endedHandler = () => {
      continueRender(handle);
    };
    const seek2 = seekToTimeMultipleUntilRight({
      element: current,
      desiredTime: currentTime,
      fps: videoConfig.fps,
      logLevel,
      mountTime
    });
    seek2.prom.then(() => {
      continueRender(handle);
    });
    current.addEventListener("ended", endedHandler, { once: true });
    const errorHandler = () => {
      if (current?.error) {
        console.error("Error occurred in video", current?.error);
        if (onError) {
          return;
        }
        throw new Error(`The browser threw an error while playing the video ${props2.src}: Code ${current.error.code} - ${current?.error?.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);
      } else {
        throw new Error("The browser threw an error");
      }
    };
    current.addEventListener("error", errorHandler, { once: true });
    return () => {
      seek2.cancel();
      current.removeEventListener("ended", endedHandler);
      current.removeEventListener("error", errorHandler);
      continueRender(handle);
    };
  }, [
    volumePropsFrame,
    props2.src,
    playbackRate,
    videoConfig.fps,
    frame,
    mediaStartsAt,
    onError,
    delayRenderRetries,
    delayRenderTimeoutInMilliseconds,
    logLevel,
    mountTime
  ]);
  const { src } = props2;
  if (environment.isRendering) {
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {
      if (window.process?.env?.NODE_ENV === "test") {
        return;
      }
      const newHandle = delayRender("Loading <Video> duration with src=" + src, {
        retries: delayRenderRetries ?? undefined,
        timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined
      });
      const { current } = videoRef;
      const didLoad = () => {
        if (current?.duration) {
          onDuration(src, current.duration);
        }
        continueRender(newHandle);
      };
      if (current?.duration) {
        onDuration(src, current.duration);
        continueRender(newHandle);
      } else {
        current?.addEventListener("loadedmetadata", didLoad, { once: true });
      }
      return () => {
        current?.removeEventListener("loadedmetadata", didLoad);
        continueRender(newHandle);
      };
    }, [src, onDuration, delayRenderRetries, delayRenderTimeoutInMilliseconds]);
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("video", {
    ref: videoRef,
    disableRemotePlayback: true,
    ...props2
  });
};
var VideoForRendering = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForRenderingForwardFunction);

// src/video/Video.tsx

var VideoForwardingFunction = (props2, ref) => {
  const {
    startFrom,
    endAt,
    trimBefore,
    trimAfter,
    name,
    pauseWhenBuffering,
    stack,
    _remotionInternalNativeLoopPassed,
    showInTimeline,
    onAutoPlayError,
    ...otherProps
  } = props2;
  const { loop, ...propsOtherThanLoop } = props2;
  const { fps } = useVideoConfig();
  const environment = getRemotionEnvironment();
  const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);
  if (typeof ref === "string") {
    throw new Error("string refs are not supported");
  }
  if (typeof props2.src !== "string") {
    throw new TypeError(`The \`<Video>\` tag requires a string for \`src\`, but got ${JSON.stringify(props2.src)} instead.`);
  }
  const preloadedSrc = usePreload(props2.src);
  const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((src, durationInSeconds) => {
    setDurations({ type: "got-duration", durationInSeconds, src });
  }, [setDurations]);
  const onVideoFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {}, []);
  const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props2.src)];
  validateMediaTrimProps({ startFrom, endAt, trimBefore, trimAfter });
  const { trimBeforeValue, trimAfterValue } = resolveTrimProps({
    startFrom,
    endAt,
    trimBefore,
    trimAfter
  });
  if (loop && durationFetched !== undefined) {
    if (!Number.isFinite(durationFetched)) {
      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {
        ...propsOtherThanLoop,
        ref,
        _remotionInternalNativeLoopPassed: true
      });
    }
    const mediaDuration = durationFetched * fps;
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, {
      durationInFrames: calculateLoopDuration({
        endAt: trimAfterValue ?? undefined,
        mediaDuration,
        playbackRate: props2.playbackRate ?? 1,
        startFrom: trimBeforeValue ?? undefined
      }),
      layout: "none",
      name,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {
        ...propsOtherThanLoop,
        ref,
        _remotionInternalNativeLoopPassed: true
      })
    });
  }
  if (typeof trimBeforeValue !== "undefined" || typeof trimAfterValue !== "undefined") {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {
      layout: "none",
      from: 0 - (trimBeforeValue ?? 0),
      showInTimeline: false,
      durationInFrames: trimAfterValue,
      name,
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {
        pauseWhenBuffering: pauseWhenBuffering ?? false,
        ...otherProps,
        ref
      })
    });
  }
  validateMediaProps(props2, "Video");
  if (environment.isRendering) {
    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForRendering, {
      onDuration,
      onVideoFrame: onVideoFrame ?? null,
      ...otherProps,
      ref
    });
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForPreview, {
    onlyWarnForMediaSeekingError: false,
    ...otherProps,
    ref,
    onVideoFrame: null,
    pauseWhenBuffering: pauseWhenBuffering ?? false,
    onDuration,
    _remotionInternalStack: stack ?? null,
    _remotionInternalNativeLoopPassed: _remotionInternalNativeLoopPassed ?? false,
    showInTimeline: showInTimeline ?? true,
    onAutoPlayError: onAutoPlayError ?? undefined
  });
};
var Video = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForwardingFunction);
addSequenceStackTraces(Video);
// src/index.ts
checkMultipleRemotionVersions();
var Experimental = {
  Clipper,
  Null,
  useIsPlayer
};
var proxyObj = {};
var Config = new Proxy(proxyObj, {
  get(_, prop) {
    if (prop === "Bundling" || prop === "Rendering" || prop === "Log" || prop === "Puppeteer" || prop === "Output") {
      return Config;
    }
    return () => {
      console.warn("⚠️  The CLI configuration has been extracted from Remotion Core.");
      console.warn("Update the import from the config file:");
      console.warn();
      console.warn("- Delete:");
      console.warn('import {Config} from "remotion";');
      console.warn("+ Replace:");
      console.warn('import {Config} from "@remotion/cli/config";');
      console.warn();
      console.warn("For more information, see https://www.remotion.dev/docs/4-0-migration.");
      process.exit(1);
    };
  }
});
addSequenceStackTraces(Sequence);



/***/ }),

/***/ 9382:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoReactInternals: () => (/* binding */ NoReactInternals),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   random: () => (/* binding */ random)
/* harmony export */ });
// src/interpolate.ts
function interpolateFunction(input, inputRange, outputRange, options) {
  const { extrapolateLeft, extrapolateRight, easing } = options;
  let result = input;
  const [inputMin, inputMax] = inputRange;
  const [outputMin, outputMax] = outputRange;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") {
      return result;
    }
    if (extrapolateLeft === "clamp") {
      result = inputMin;
    } else if (extrapolateLeft === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateLeft === "extend") {}
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") {
      return result;
    }
    if (extrapolateRight === "clamp") {
      result = inputMax;
    } else if (extrapolateRight === "wrap") {
      const range = inputMax - inputMin;
      result = ((result - inputMin) % range + range) % range + inputMin;
    } else if (extrapolateRight === "extend") {}
  }
  if (outputMin === outputMax) {
    return outputMin;
  }
  result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  let i;
  for (i = 1;i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}
function checkValidInputRange(arr) {
  for (let i = 1;i < arr.length; ++i) {
    if (!(arr[i] > arr[i - 1])) {
      throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(",")}]`);
    }
  }
}
function checkInfiniteRange(name, arr) {
  if (arr.length < 2) {
    throw new Error(name + " must have at least 2 elements");
  }
  for (const element of arr) {
    if (typeof element !== "number") {
      throw new Error(`${name} must contain only numbers`);
    }
    if (!Number.isFinite(element)) {
      throw new Error(`${name} must contain only finite numbers, but got [${arr.join(",")}]`);
    }
  }
}
function interpolate(input, inputRange, outputRange, options) {
  if (typeof input === "undefined") {
    throw new Error("input can not be undefined");
  }
  if (typeof inputRange === "undefined") {
    throw new Error("inputRange can not be undefined");
  }
  if (typeof outputRange === "undefined") {
    throw new Error("outputRange can not be undefined");
  }
  if (inputRange.length !== outputRange.length) {
    throw new Error("inputRange (" + inputRange.length + ") and outputRange (" + outputRange.length + ") must have the same length");
  }
  checkInfiniteRange("inputRange", inputRange);
  checkInfiniteRange("outputRange", outputRange);
  checkValidInputRange(inputRange);
  const easing = options?.easing ?? ((num) => num);
  let extrapolateLeft = "extend";
  if (options?.extrapolateLeft !== undefined) {
    extrapolateLeft = options.extrapolateLeft;
  }
  let extrapolateRight = "extend";
  if (options?.extrapolateRight !== undefined) {
    extrapolateRight = options.extrapolateRight;
  }
  if (typeof input !== "number") {
    throw new TypeError("Cannot interpolate an input which is not a number");
  }
  const range = findRange(input, inputRange);
  return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {
    easing,
    extrapolateLeft,
    extrapolateRight
  });
}
// src/random.ts
function mulberry32(a) {
  let t = a + 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function hashCode(str) {
  let i = 0;
  let chr = 0;
  let hash = 0;
  for (i = 0;i < str.length; i++) {
    chr = str.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
}
var random = (seed, dummy) => {
  if (dummy !== undefined) {
    throw new TypeError("random() takes only one argument");
  }
  if (seed === null) {
    return Math.random();
  }
  if (typeof seed === "string") {
    return mulberry32(hashCode(seed));
  }
  if (typeof seed === "number") {
    return mulberry32(seed * 10000000000);
  }
  throw new Error("random() argument must be a number or a string");
};
// src/truthy.ts
function truthy(value) {
  return Boolean(value);
}

// src/delay-render.ts
if (typeof window !== "undefined") {
  window.remotion_renderReady = false;
}
if (typeof window !== "undefined") {
  window.remotion_delayRenderTimeouts = {};
}
var DELAY_RENDER_CALLSTACK_TOKEN = "The delayRender was called:";
var DELAY_RENDER_RETRIES_LEFT = "Retries left: ";
var DELAY_RENDER_RETRY_TOKEN = "- Rendering the frame will be retried.";
var DELAY_RENDER_CLEAR_TOKEN = "handle was cleared after";

// src/input-props-serialization.ts
var DATE_TOKEN = "remotion-date:";
var FILE_TOKEN = "remotion-file:";
var serializeJSONWithSpecialTypes = ({
  data,
  indent,
  staticBase
}) => {
  let customDateUsed = false;
  let customFileUsed = false;
  let mapUsed = false;
  let setUsed = false;
  try {
    const serializedString = JSON.stringify(data, function(key, value) {
      const item = this[key];
      if (item instanceof Date) {
        customDateUsed = true;
        return `${DATE_TOKEN}${item.toISOString()}`;
      }
      if (item instanceof Map) {
        mapUsed = true;
        return value;
      }
      if (item instanceof Set) {
        setUsed = true;
        return value;
      }
      if (typeof item === "string" && staticBase !== null && item.startsWith(staticBase)) {
        customFileUsed = true;
        return `${FILE_TOKEN}${item.replace(staticBase + "/", "")}`;
      }
      return value;
    }, indent);
    return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };
  } catch (err) {
    throw new Error("Could not serialize the passed input props to JSON: " + err.message);
  }
};
var deserializeJSONWithSpecialTypes = (data) => {
  return JSON.parse(data, (_, value) => {
    if (typeof value === "string" && value.startsWith(DATE_TOKEN)) {
      return new Date(value.replace(DATE_TOKEN, ""));
    }
    if (typeof value === "string" && value.startsWith(FILE_TOKEN)) {
      return `${window.remotion_staticBase}/${value.replace(FILE_TOKEN, "")}`;
    }
    return value;
  });
};

// src/interpolate-colors.ts
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...args) {
  return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
}
function getMatchers() {
  const cachedMatchers = {
    rgb: undefined,
    rgba: undefined,
    hsl: undefined,
    hsla: undefined,
    hex3: undefined,
    hex4: undefined,
    hex5: undefined,
    hex6: undefined,
    hex8: undefined
  };
  if (cachedMatchers.rgb === undefined) {
    cachedMatchers.rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
    cachedMatchers.rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
    cachedMatchers.hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
    cachedMatchers.hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;
    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;
  }
  return cachedMatchers;
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = Number.parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}
function parse360(str) {
  const int = Number.parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = Number.parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = Number.parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}
var colorNames = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
function normalizeColor(color) {
  const matchers = getMatchers();
  let match;
  if (matchers.hex6) {
    if (match = matchers.hex6.exec(color)) {
      return Number.parseInt(match[1] + "ff", 16) >>> 0;
    }
  }
  if (colorNames[color] !== undefined) {
    return colorNames[color];
  }
  if (matchers.rgb) {
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
    }
  }
  if (matchers.rgba) {
    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }
  }
  if (matchers.hex3) {
    if (match = matchers.hex3.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
    }
  }
  if (matchers.hex8) {
    if (match = matchers.hex8.exec(color)) {
      return Number.parseInt(match[1], 16) >>> 0;
    }
  }
  if (matchers.hex4) {
    if (match = matchers.hex4.exec(color)) {
      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }
  }
  if (matchers.hsl) {
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
    }
  }
  if (matchers.hsla) {
    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }
  }
  throw new Error(`invalid color string ${color} provided`);
}
function processColor(color) {
  const normalizedColor = normalizeColor(color);
  return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
}

// src/v5-flag.ts
var ENABLE_V5_BREAKING_CHANGES = false;

// src/validate-frame.ts
var validateFrame = ({
  allowFloats,
  durationInFrames,
  frame
}) => {
  if (typeof frame === "undefined") {
    throw new TypeError(`Argument missing for parameter "frame"`);
  }
  if (typeof frame !== "number") {
    throw new TypeError(`Argument passed for "frame" is not a number: ${frame}`);
  }
  if (!Number.isFinite(frame)) {
    throw new RangeError(`Frame ${frame} is not finite`);
  }
  if (frame % 1 !== 0 && !allowFloats) {
    throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);
  }
  if (frame < 0 && frame < -durationInFrames) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);
  }
  if (frame > durationInFrames - 1) {
    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);
  }
};

// src/codec.ts
var validCodecs = [
  "h264",
  "h265",
  "vp8",
  "vp9",
  "mp3",
  "aac",
  "wav",
  "prores",
  "h264-mkv",
  "h264-ts",
  "gif"
];

// src/validation/validate-default-codec.ts
function validateCodec(defaultCodec, location, name) {
  if (typeof defaultCodec === "undefined") {
    return;
  }
  if (typeof defaultCodec !== "string") {
    throw new TypeError(`The "${name}" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);
  }
  if (!validCodecs.includes(defaultCodec)) {
    throw new Error(`The "${name}" prop ${location} must be one of ${validCodecs.join(", ")}, but you passed ${defaultCodec}.`);
  }
}

// src/validation/validate-default-props.ts
var validateDefaultAndInputProps = (defaultProps, name, compositionId) => {
  if (!defaultProps) {
    return;
  }
  if (typeof defaultProps !== "object") {
    throw new Error(`"${name}" must be an object, but you passed a value of type ${typeof defaultProps}`);
  }
  if (Array.isArray(defaultProps)) {
    throw new Error(`"${name}" must be an object, an array was passed ${compositionId ? `for composition "${compositionId}"` : ""}`);
  }
};

// src/validation/validate-dimensions.ts
function validateDimension(amount, nameOfProp, location) {
  if (typeof amount !== "number") {
    throw new Error(`The "${nameOfProp}" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);
  }
  if (isNaN(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must not be NaN, but is NaN.`);
  }
  if (!Number.isFinite(amount)) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be finite, but is ${amount}.`);
  }
  if (amount % 1 !== 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be an integer, but is ${amount}.`);
  }
  if (amount <= 0) {
    throw new TypeError(`The "${nameOfProp}" prop ${location} must be positive, but got ${amount}.`);
  }
}

// src/validation/validate-duration-in-frames.ts
function validateDurationInFrames(durationInFrames, options) {
  const { allowFloats, component } = options;
  if (typeof durationInFrames === "undefined") {
    throw new Error(`The "durationInFrames" prop ${component} is missing.`);
  }
  if (typeof durationInFrames !== "number") {
    throw new Error(`The "durationInFrames" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);
  }
  if (durationInFrames <= 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be positive, but got ${durationInFrames}.`);
  }
  if (!allowFloats && durationInFrames % 1 !== 0) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be an integer, but got ${durationInFrames}.`);
  }
  if (!Number.isFinite(durationInFrames)) {
    throw new TypeError(`The "durationInFrames" prop ${component} must be finite, but got ${durationInFrames}.`);
  }
}

// src/validation/validate-fps.ts
function validateFps(fps, location, isGif) {
  if (typeof fps !== "number") {
    throw new Error(`"fps" must be a number, but you passed a value of type ${typeof fps} ${location}`);
  }
  if (!Number.isFinite(fps)) {
    throw new Error(`"fps" must be a finite, but you passed ${fps} ${location}`);
  }
  if (isNaN(fps)) {
    throw new Error(`"fps" must not be NaN, but got ${fps} ${location}`);
  }
  if (fps <= 0) {
    throw new TypeError(`"fps" must be positive, but got ${fps} ${location}`);
  }
  if (isGif && fps > 50) {
    throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);
  }
}

// src/video/get-current-time.ts
var getExpectedMediaFrameUncorrected = ({
  frame,
  playbackRate,
  startFrom
}) => {
  return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);
};

// src/absolute-src.ts
var getAbsoluteSrc = (relativeSrc) => {
  if (typeof window === "undefined") {
    return relativeSrc;
  }
  if (relativeSrc.startsWith("http://") || relativeSrc.startsWith("https://") || relativeSrc.startsWith("file://") || relativeSrc.startsWith("blob:") || relativeSrc.startsWith("data:")) {
    return relativeSrc;
  }
  return new URL(relativeSrc, window.origin).href;
};

// src/video/offthread-video-source.ts
var getOffthreadVideoSource = ({
  src,
  transparent,
  currentTime,
  toneMapped
}) => {
  return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(Math.max(0, currentTime))}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;
};

// src/no-react.ts
var NoReactInternals = {
  processColor,
  truthy,
  validateFps,
  validateDimension,
  validateDurationInFrames,
  validateDefaultAndInputProps,
  validateFrame,
  serializeJSONWithSpecialTypes,
  bundleName: "bundle.js",
  bundleMapName: "bundle.js.map",
  deserializeJSONWithSpecialTypes,
  DELAY_RENDER_CALLSTACK_TOKEN,
  DELAY_RENDER_RETRY_TOKEN,
  DELAY_RENDER_CLEAR_TOKEN,
  DELAY_RENDER_ATTEMPT_TOKEN: DELAY_RENDER_RETRIES_LEFT,
  getOffthreadVideoSource,
  getExpectedMediaFrameUncorrected,
  ENABLE_V5_BREAKING_CHANGES,
  MIN_NODE_VERSION: ENABLE_V5_BREAKING_CHANGES ? 18 : 16,
  MIN_BUN_VERSION: ENABLE_V5_BREAKING_CHANGES ? "1.1.3" : "1.0.3",
  colorNames,
  DATE_TOKEN,
  FILE_TOKEN,
  validateCodec
};



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "my-video:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			792: 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkmy_video"] = self["webpackChunkmy_video"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other entry modules.
(() => {
var exports = {};
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
const remotion_1 = __webpack_require__(3947);
remotion_1.Internals.setupEnvVariables();
remotion_1.Internals.CSSUtils.injectCSS(`
  .css-reset, .css-reset * {
    font-size: 16px;
    line-height: 1.5;
    color: white;
    font-family: Arial, Helvetica, sans-serif;
    background: transparent;
    box-sizing: border-box;
  }

  .algolia-docsearch-suggestion--highlight {
    font-size: 15px;
    line-height: 1.25;
  }

  .__remotion-info-button-container code {
    font-family: monospace;
    font-size: 14px;
    color: #0584f2
  }

  .__remotion-vertical-scrollbar::-webkit-scrollbar {
      width: 6px;
  }
  .__remotion-vertical-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.0);
  }
  .__remotion-vertical-scrollbar:hover::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.6);
  }
  .__remotion-vertical-scrollbar:hover::-webkit-scrollbar-thumb:hover {
    background-color: rgba(0, 0, 0, 1);
  }


  .__remotion-horizontal-scrollbar::-webkit-scrollbar {
    height: 6px;
  }
  .__remotion-horizontal-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.0);
  }
  .__remotion-horizontal-scrollbar:hover::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.6);
  }
  .__remotion-horizontal-scrollbar:hover::-webkit-scrollbar-thumb:hover {
    background-color: rgba(0, 0, 0, 1);
  }


  @-moz-document url-prefix() {
    .__remotion-vertical-scrollbar {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.6) rgba(0, 0, 0, 0);
    }

    .__remotion-vertical-scrollbar:hover {
      scrollbar-color: rgba(0, 0, 0, 1) rgba(0, 0, 0, 0);
    }

    .__remotion-horizontal-scrollbar {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.6) rgba(0, 0, 0, 0);
    }

    .__remotion-horizontal-scrollbar:hover {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 1) rgba(0, 0, 0, 0);
    }
  }


  .__remotion-timeline-slider {
    appearance: none;
    width: 100px;
    border-radius: 3px;
    height: 6px;
    background-color: rgba(255, 255, 255, 0.1);
    accent-color: #ffffff;
  }
  
  .__remotion-timeline-slider::-moz-range-thumb {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    background-color: #ffffff;
    appearance: none;
  }



`);

})();

// This entry needs to be wrapped in an IIFE because it needs to be isolated against other entry modules.
(() => {

// EXTERNAL MODULE: ./node_modules/remotion/dist/esm/index.mjs
var esm = __webpack_require__(3947);
// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(4848);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(5072);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(7825);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(7659);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(5056);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(540);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(1113);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/index.css
var cjs_js_src = __webpack_require__(8972);
;// ./src/index.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());
options.insert = insertBySelector_default().bind(null, "head");
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(cjs_js_src/* default */.A, options);




       /* harmony default export */ const src = (cjs_js_src/* default */.A && cjs_js_src/* default */.A.locals ? cjs_js_src/* default */.A.locals : undefined);

;// ./src/GrowthPattern.tsx



const GrowthPattern = ({
  concept,
  stages,
  primaryColor = "#ffffff",
  backgroundColor = "#000000"
}) => {
  const frame = (0,esm.useCurrentFrame)();
  const { fps, durationInFrames, width, height } = (0,esm.useVideoConfig)();
  const stageCount = stages.length;
  const framesPerStage = durationInFrames / stageCount;
  const currentStageIndex = Math.floor(frame / framesPerStage);
  const stageProgress = frame % framesPerStage / framesPerStage;
  const currentStage = stages[currentStageIndex] || stages[stages.length - 1];
  const rotation = (0,esm.interpolate)(frame, [0, durationInFrames], [0, 360]);
  const glow = (0,esm.interpolate)(
    Math.sin(frame * 0.1),
    [-1, 1],
    [0.5, 1]
  );
  const renderRings = (ringCount, complexity) => {
    const rings = [];
    const centerX = width / 2;
    const centerY = height / 2;
    for (let i = 0; i < ringCount; i++) {
      const radius = 30 + i * 25;
      const strokeWidth = (0,esm.interpolate)(complexity, [1, 10], [2, 1]);
      const opacity = ringCount > 1 ? (0,esm.interpolate)(i, [0, ringCount - 1], [1, 0.6]) : 1;
      rings.push(
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: centerX,
            cy: centerY,
            r: radius,
            fill: "none",
            stroke: primaryColor,
            strokeWidth,
            opacity: opacity * glow,
            style: {
              filter: `drop-shadow(0 0 ${10 + complexity}px ${primaryColor})`,
              transform: `rotate(${rotation + i * 15}deg)`,
              transformOrigin: `${centerX}px ${centerY}px`
            }
          },
          i
        )
      );
      if (complexity > 3 && i > 0) {
        const prevRadius = 30 + (i - 1) * 25;
        rings.push(
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "line",
            {
              x1: centerX + Math.cos(rotation * Math.PI / 180) * prevRadius,
              y1: centerY + Math.sin(rotation * Math.PI / 180) * prevRadius,
              x2: centerX + Math.cos((rotation + 60) * Math.PI / 180) * radius,
              y2: centerY + Math.sin((rotation + 60) * Math.PI / 180) * radius,
              stroke: primaryColor,
              strokeWidth: 1,
              opacity: 0.4 * glow
            },
            `line-${i}`
          )
        );
      }
    }
    return rings;
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor,
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "svg",
      {
        width,
        height: height * 0.7,
        style: { position: "absolute", top: "10%" },
        children: renderRings(currentStage.rings, currentStage.complexity)
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "15%",
      color: primaryColor,
      fontSize: "24px",
      fontFamily: "Arial, sans-serif",
      fontWeight: "bold",
      textAlign: "center",
      opacity: (0,esm.interpolate)(stageProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0])
    }, children: currentStage.label }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "5%",
      color: primaryColor,
      fontSize: "16px",
      fontFamily: "Arial, sans-serif",
      opacity: 0.7,
      textTransform: "uppercase",
      letterSpacing: "2px"
    }, children: concept })
  ] });
};

;// ./src/templates/PersistencePattern.tsx



const PersistencePattern = ({ stages, primaryColor, backgroundColor }) => {
  const frame = (0,esm.useCurrentFrame)();
  const { width, height, durationInFrames } = (0,esm.useVideoConfig)();
  const cycleFrames = durationInFrames / stages.length;
  const currentCycle = Math.floor(frame / cycleFrames);
  const cycleProgress = frame % cycleFrames / cycleFrames;
  const breakPoint = 0.3;
  const reformPoint = 0.7;
  let shapeIntegrity = 1;
  if (cycleProgress < breakPoint) {
    shapeIntegrity = (0,esm.interpolate)(cycleProgress, [0, breakPoint], [1, 0.2]);
  } else if (cycleProgress < reformPoint) {
    shapeIntegrity = (0,esm.interpolate)(cycleProgress, [breakPoint, reformPoint], [0.2, 1.2]);
  } else {
    shapeIntegrity = (0,esm.interpolate)(cycleProgress, [reformPoint, 1], [1.2, 1]);
  }
  const currentStage = stages[currentCycle] || stages[stages.length - 1];
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { width, height, children: Array.from({ length: currentStage.rings }).map((_, i) => {
      const radius = 40 + i * 30;
      const fragments = cycleProgress < breakPoint ? 8 : 1;
      return Array.from({ length: fragments }).map((_2, j) => {
        const angle = 360 / fragments * j;
        const arcLength = 360 / fragments;
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "path",
          {
            d: `M ${width / 2 + radius * Math.cos(angle * Math.PI / 180)} ${height / 2 + radius * Math.sin(angle * Math.PI / 180)} 
                    A ${radius} ${radius} 0 0 1 ${width / 2 + radius * Math.cos((angle + arcLength) * Math.PI / 180)} ${height / 2 + radius * Math.sin((angle + arcLength) * Math.PI / 180)}`,
            stroke: primaryColor,
            strokeWidth: 3,
            fill: "none",
            opacity: shapeIntegrity,
            style: {
              filter: `drop-shadow(0 0 10px ${primaryColor})`,
              transform: `scale(${shapeIntegrity})`
            }
          },
          `${i}-${j}`
        );
      });
    }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "20%",
      color: primaryColor,
      fontSize: "24px",
      fontWeight: "bold"
    }, children: currentStage.label })
  ] });
};

;// ./src/templates/FocusPattern.tsx



const FocusPattern = ({ stages, primaryColor, backgroundColor, visualMetaphor }) => {
  const frame = (0,esm.useCurrentFrame)();
  const { width, height, durationInFrames } = (0,esm.useVideoConfig)();
  const centerX = width / 2;
  const centerY = height / 2;
  const convergenceProgress = (0,esm.interpolate)(frame, [0, durationInFrames], [0, 1]);
  const stageCount = stages.length;
  const framesPerStage = durationInFrames / stageCount;
  const currentStageIndex = Math.floor(frame / framesPerStage);
  const currentStage = stages[currentStageIndex] || stages[stages.length - 1];
  const pointCount = currentStage.complexity * 8;
  const points = Array.from({ length: pointCount }, (_, i) => {
    const angle = 360 / pointCount * i;
    const startRadius = 200 + Math.random() * 100;
    const endRadius = 20 + i % 3 * 15;
    const currentRadius = (0,esm.interpolate)(
      convergenceProgress,
      [0, 1],
      [startRadius, endRadius]
    );
    return {
      x: centerX + currentRadius * Math.cos(angle * Math.PI / 180),
      y: centerY + currentRadius * Math.sin(angle * Math.PI / 180),
      size: (0,esm.interpolate)(convergenceProgress, [0, 1], [2, 6])
    };
  });
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor,
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width, height, children: [
      points.map((point, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: point.x,
          cy: point.y,
          r: point.size,
          fill: primaryColor,
          opacity: (0,esm.interpolate)(convergenceProgress, [0, 1], [0.3, 1]),
          style: {
            filter: `drop-shadow(0 0 5px ${primaryColor})`
          }
        },
        i
      )),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: centerX,
          cy: centerY,
          r: (0,esm.interpolate)(convergenceProgress, [0, 1], [0, 30]),
          fill: "none",
          stroke: primaryColor,
          strokeWidth: 3,
          opacity: (0,esm.interpolate)(convergenceProgress, [0.7, 1], [0, 1]),
          style: {
            filter: `drop-shadow(0 0 20px ${primaryColor})`
          }
        }
      )
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "20%",
      left: "50%",
      transform: "translateX(-50%)",
      color: primaryColor,
      fontSize: "24px",
      fontWeight: "bold",
      textAlign: "center"
    }, children: currentStage.label })
  ] });
};

;// ./src/templates/BalancePattern.tsx



const BalancePattern = ({ stages, primaryColor, backgroundColor }) => {
  const frame = (0,esm.useCurrentFrame)();
  const { width, height, durationInFrames } = (0,esm.useVideoConfig)();
  const centerX = width / 2;
  const centerY = height / 2;
  const stageCount = stages.length;
  const framesPerStage = durationInFrames / stageCount;
  const currentStageIndex = Math.floor(frame / framesPerStage);
  const stageProgress = frame % framesPerStage / framesPerStage;
  const currentStage = stages[currentStageIndex] || stages[stages.length - 1];
  const oscillation = Math.sin(frame * 0.1) * 20;
  const balance = (0,esm.interpolate)(stageProgress, [0, 1], [0.2, 1]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor,
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width, height, children: [
      Array.from({ length: currentStage.rings }).map((_, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          x: centerX - 200 - oscillation * (1 - balance),
          y: centerY - 10 - i * 25,
          width: 150 + i * 20,
          height: 20 + i * 5,
          fill: "none",
          stroke: primaryColor,
          strokeWidth: 2,
          opacity: 0.8,
          style: {
            filter: `drop-shadow(0 0 10px ${primaryColor})`
          }
        }
      ) }, `left-${i}`)),
      Array.from({ length: currentStage.rings }).map((_, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          x: centerX + 50 + oscillation * (1 - balance),
          y: centerY - 10 - i * 25,
          width: 150 - i * 20,
          height: 20 + i * 5,
          fill: "none",
          stroke: primaryColor,
          strokeWidth: 2,
          opacity: 0.8,
          style: {
            filter: `drop-shadow(0 0 10px ${primaryColor})`
          }
        }
      ) }, `right-${i}`)),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "line",
        {
          x1: centerX,
          y1: centerY - 100,
          x2: centerX,
          y2: centerY + 100,
          stroke: primaryColor,
          strokeWidth: 4,
          opacity: balance,
          style: {
            filter: `drop-shadow(0 0 15px ${primaryColor})`
          }
        }
      )
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "20%",
      left: "50%",
      transform: "translateX(-50%)",
      color: primaryColor,
      fontSize: "24px",
      fontWeight: "bold"
    }, children: currentStage.label })
  ] });
};

;// ./src/templates/TransformationPattern.tsx



const TransformationPattern = ({ stages, primaryColor, backgroundColor }) => {
  const frame = (0,esm.useCurrentFrame)();
  const { width, height, durationInFrames } = (0,esm.useVideoConfig)();
  const centerX = width / 2;
  const centerY = height / 2;
  const stageCount = stages.length;
  const framesPerStage = durationInFrames / stageCount;
  const currentStageIndex = Math.floor(frame / framesPerStage);
  const stageProgress = frame % framesPerStage / framesPerStage;
  const currentStage = stages[currentStageIndex] || stages[stages.length - 1];
  const morphProgress = (0,esm.interpolate)(stageProgress, [0, 1], [0, 1]);
  const baseRadius = 50;
  const sides = Math.max(3, Math.floor(3 + morphProgress * (currentStage.complexity - 3)));
  const vertices = Array.from({ length: sides }, (_, i) => {
    const angle = 360 / sides * i;
    const radius = baseRadius + morphProgress * currentStage.rings * 10;
    const x = centerX + radius * Math.cos(angle * Math.PI / 180);
    const y = centerY + radius * Math.sin(angle * Math.PI / 180);
    return `${x},${y}`;
  });
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor,
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width, height, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "polygon",
        {
          points: vertices.join(" "),
          fill: "none",
          stroke: primaryColor,
          strokeWidth: 3,
          opacity: 0.8,
          style: {
            filter: `drop-shadow(0 0 15px ${primaryColor})`,
            transform: `rotate(${frame * 2}deg)`,
            transformOrigin: `${centerX}px ${centerY}px`
          }
        }
      ),
      Array.from({ length: currentStage.rings }).map((_, i) => {
        const ringRadius = 80 + i * 40;
        const ringVertices = Array.from({ length: sides + i }, (_2, j) => {
          const angle = 360 / (sides + i) * j + frame * (i + 1);
          const x = centerX + ringRadius * Math.cos(angle * Math.PI / 180);
          const y = centerY + ringRadius * Math.sin(angle * Math.PI / 180);
          return `${x},${y}`;
        });
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "polygon",
          {
            points: ringVertices.join(" "),
            fill: "none",
            stroke: primaryColor,
            strokeWidth: 2,
            opacity: 0.4 - i * 0.1,
            style: {
              filter: `drop-shadow(0 0 5px ${primaryColor})`
            }
          },
          i
        );
      }),
      Array.from({ length: currentStage.complexity * 2 }).map((_, i) => {
        const particleAngle = 360 / (currentStage.complexity * 2) * i + frame * 3;
        const particleRadius = 150 + Math.sin(frame * 0.1 + i) * 30;
        const x = centerX + particleRadius * Math.cos(particleAngle * Math.PI / 180);
        const y = centerY + particleRadius * Math.sin(particleAngle * Math.PI / 180);
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: x,
            cy: y,
            r: 2 + Math.sin(frame * 0.05 + i) * 2,
            fill: primaryColor,
            opacity: 0.6
          },
          `particle-${i}`
        );
      })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "20%",
      left: "50%",
      transform: "translateX(-50%)",
      color: primaryColor,
      fontSize: "24px",
      fontWeight: "bold"
    }, children: currentStage.label })
  ] });
};

;// ./src/TemplateSelector.tsx







const TEMPLATES = {
  growth: GrowthPattern,
  persistence: PersistencePattern,
  focus: FocusPattern,
  balance: BalancePattern,
  transformation: TransformationPattern
};
const DynamicTemplate = (props) => {
  var _a;
  const SelectedTemplate = TEMPLATES[props.animationType] || GrowthPattern;
  const templateProps = {
    concept: props.concept || "Motivation",
    stages: props.stages || [],
    primaryColor: ((_a = props.colorScheme) == null ? void 0 : _a.primary) || "#ffffff",
    backgroundColor: "#000000",
    visualMetaphor: props.visualMetaphor || "A journey of growth",
    mood: props.mood || "inspiring",
    animationType: props.animationType || "growth"
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectedTemplate, { ...templateProps });
};

;// ./src/SimpleGenerativeRenderer.tsx



const SimpleGenerativeRenderer = ({ animationData }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const timePercent = progress * 100;
  if (!animationData) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      width: "100%",
      height: "100%",
      backgroundColor: "#000000",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: "#ffffff",
      fontSize: "24px"
    }, children: "Loading Animation..." });
  }
  const currentStage = ((_a = animationData.storyArc) == null ? void 0 : _a.reduce((prev, curr) => {
    return timePercent >= curr.timePercent ? curr : prev;
  }, animationData.storyArc[0])) || { description: "Transformation", visualState: "Evolving" };
  const renderGeneratedElements = () => {
    if (!animationData.svgElements) return null;
    return animationData.svgElements.map((element, index) => {
      const scale = (0,esm.interpolate)(progress, [0, 1], [0.5, 1.5]);
      const rotation = (0,esm.interpolate)(frame, [0, durationInFrames], [0, 360]);
      const opacity = (0,esm.interpolate)(progress, [0, 0.2, 0.8, 1], [0, 1, 1, 0.8]);
      const animatedProps = {
        ...element.attributes,
        transform: `scale(${scale}) rotate(${rotation}deg)`,
        opacity,
        style: {
          transformOrigin: "center",
          filter: `drop-shadow(0 0 10px ${animationData.colorScheme.primary})`
        }
      };
      switch (element.type) {
        case "circle":
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { ...animatedProps }, index);
        case "rect":
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { ...animatedProps }, index);
        case "path":
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { ...animatedProps }, index);
        case "polygon":
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("polygon", { ...animatedProps }, index);
        case "line":
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { ...animatedProps }, index);
        default:
          return null;
      }
    });
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      "svg",
      {
        width: "100%",
        height: "80%",
        viewBox: "0 0 1080 1080",
        style: { position: "absolute", top: "10%" },
        children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("defs", { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("radialGradient", { id: "glow", cx: "50%", cy: "50%", r: "50%", children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)("stop", { offset: "0%", stopColor: ((_b = animationData.colorScheme) == null ? void 0 : _b.primary) || "#ffffff", stopOpacity: "0.8" }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)("stop", { offset: "100%", stopColor: ((_c = animationData.colorScheme) == null ? void 0 : _c.primary) || "#ffffff", stopOpacity: "0" })
          ] }) }),
          renderGeneratedElements()
        ]
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "15%",
      left: "50%",
      transform: "translateX(-50%)",
      color: ((_d = animationData.colorScheme) == null ? void 0 : _d.primary) || "#ffffff",
      fontSize: "24px",
      fontFamily: "Arial, sans-serif",
      fontWeight: "bold",
      textAlign: "center",
      textShadow: `0 0 10px ${((_e = animationData.colorScheme) == null ? void 0 : _e.primary) || "#ffffff"}`
    }, children: currentStage.description }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "5%",
      left: "50%",
      transform: "translateX(-50%)",
      color: ((_f = animationData.colorScheme) == null ? void 0 : _f.primary) || "#ffffff",
      fontSize: "16px",
      fontFamily: "Arial, sans-serif",
      opacity: 0.7,
      textTransform: "uppercase",
      letterSpacing: "2px"
    }, children: animationData.concept }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      top: "5%",
      left: "50%",
      transform: "translateX(-50%)",
      color: ((_g = animationData.colorScheme) == null ? void 0 : _g.primary) || "#ffffff",
      fontSize: "12px",
      fontFamily: "Arial, sans-serif",
      opacity: 0.4,
      textAlign: "center",
      maxWidth: "80%",
      lineHeight: 1.4
    }, children: animationData.visualMetaphor })
  ] });
};

;// ./src/StoryDrivenRenderer.tsx



const StoryDrivenRenderer = ({ svgPlan, svgAssets }) => {
  var _a;
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const concept = svgPlan.concept || "growth";
  const renderStoryAnimation = () => {
    if (concept.includes("grow") || concept.includes("rise") || concept.includes("never give up")) {
      return renderSeedToTreeStory();
    } else if (concept.includes("break") || concept.includes("barrier") || concept.includes("overcome")) {
      return renderBreakingWallStory();
    } else if (concept.includes("transform") || concept.includes("change") || concept.includes("mindset")) {
      return renderCaterpillarToButterflyStory();
    } else if (concept.includes("strength") || concept.includes("power") || concept.includes("build")) {
      return renderMuscleGrowthStory();
    } else if (concept.includes("journey") || concept.includes("path") || concept.includes("hell")) {
      return renderMountainClimbStory();
    } else {
      return renderSeedToTreeStory();
    }
  };
  const renderSeedToTreeStory = () => {
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      progress >= 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0, 0.2], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "200", y1: "400", x2: "600", y2: "400", stroke: "white", strokeWidth: "3", opacity: 0.4 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "450", textAnchor: "middle", fill: "white", fontSize: "16", opacity: 0.6, children: "SOIL" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("ellipse", { cx: "400", cy: "390", rx: "8", ry: "5", fill: "white" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "500", textAnchor: "middle", fill: "white", fontSize: "20", children: "A small seed..." })
      ] }),
      progress >= 0.2 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.2, 0.4], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "400", x2: "400", y2: 400 - (0,esm.interpolate)(progress, [0.2, 0.4], [0, 50]), stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "500", textAnchor: "middle", fill: "white", fontSize: "20", children: "...pushes through..." })
      ] }),
      progress >= 0.4 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.4, 0.7], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "400", x2: "400", y2: 400 - (0,esm.interpolate)(progress, [0.4, 0.7], [50, 120]), stroke: "white", strokeWidth: "6" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "320", x2: 380, y2: "300", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "330", x2: 420, y2: "310", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "500", textAnchor: "middle", fill: "white", fontSize: "20", children: "...against all odds..." })
      ] }),
      progress >= 0.7 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.7, 1], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "400", x2: "400", y2: "250", stroke: "white", strokeWidth: "8" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "280", x2: "350", y2: "250", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "290", x2: "450", y2: "260", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "310", x2: "360", y2: "290", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "320", x2: "440", y2: "300", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "260", r: "50", fill: "none", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "260", r: "35", fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.6 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "500", textAnchor: "middle", fill: "white", fontSize: "24", fontWeight: "bold", children: "NEVER GIVE UP!" })
      ] })
    ] });
  };
  const renderBreakingWallStory = () => {
    const crackSize = (0,esm.interpolate)(progress, [0.4, 0.8], [0, 50]);
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      progress < 0.8 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { x: 350 - crackSize / 2, y: "200", width: 50 + crackSize / 2, height: "200", fill: "none", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { x: 400 + crackSize / 2, y: "200", width: 50 - crackSize / 2, height: "200", fill: "none", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "360", y1: "220", x2: "390", y2: "220", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "360", y1: "260", x2: "390", y2: "260", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "410", y1: "240", x2: "440", y2: "240", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "410", y1: "280", x2: "440", y2: "280", stroke: "white", strokeWidth: "1", opacity: 0.5 })
      ] }),
      progress >= 0 && progress < 0.4 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0, 0.3], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "250", cy: "340", r: "15", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "250", y1: "355", x2: "250", y2: "385", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "250", y1: "365", x2: "270", y2: "365", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "250", y1: "385", x2: "240", y2: "410", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "250", y1: "385", x2: "260", y2: "410", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "480", textAnchor: "middle", fill: "white", fontSize: "18", children: "Facing the barrier..." })
      ] }),
      progress >= 0.3 && progress < 0.8 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.3, 0.6], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "300", cy: "340", r: "15", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "300", y1: "355", x2: "300", y2: "385", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "300", y1: "365", x2: "340", y2: "365", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "300", y1: "385", x2: "285", y2: "410", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "300", y1: "385", x2: "315", y2: "410", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "480", textAnchor: "middle", fill: "white", fontSize: "18", children: "Push with all your might..." })
      ] }),
      progress >= 0.6 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.6, 1], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "200", x2: "400", y2: "400", stroke: "white", strokeWidth: crackSize / 3, opacity: 0.8 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "390", y1: "210", x2: "410", y2: "390", stroke: "white", strokeWidth: crackSize / 6, opacity: 0.6 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "410", y1: "210", x2: "390", y2: "390", stroke: "white", strokeWidth: crackSize / 6, opacity: 0.6 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "320", cy: "340", r: "15", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "320", y1: "355", x2: "320", y2: "385", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "320", y1: "365", x2: "305", y2: "350", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "320", y1: "365", x2: "335", y2: "350", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "480", textAnchor: "middle", fill: "white", fontSize: "24", fontWeight: "bold", children: "BREAKTHROUGH!" })
      ] })
    ] });
  };
  const renderCaterpillarToButterflyStory = () => {
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      progress < 0.5 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0, 0.25], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("ellipse", { cx: "300", cy: "300", rx: "40", ry: "15", fill: "none", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "280", cy: "295", r: "8", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "275", y1: "290", x2: "270", y2: "285", stroke: "white", strokeWidth: "1" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "275", y1: "290", x2: "270", y2: "295", stroke: "white", strokeWidth: "1" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "450", textAnchor: "middle", fill: "white", fontSize: "18", children: "Old way of thinking..." })
      ] }),
      progress >= 0.25 && progress < 0.65 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.25, 0.5], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("ellipse", { cx: "400", cy: "300", rx: "30", ry: "50", fill: "none", stroke: "white", strokeWidth: "4" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "380", y1: "270", x2: "420", y2: "280", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "380", y1: "290", x2: "420", y2: "300", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "380", y1: "310", x2: "420", y2: "320", stroke: "white", strokeWidth: "1", opacity: 0.5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "450", textAnchor: "middle", fill: "white", fontSize: "18", children: "Transformation in progress..." })
      ] }),
      progress >= 0.65 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.65, 1], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "500", y1: "280", x2: "500", y2: "320", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "500", cy: "275", r: "4", fill: "white" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "M 490 285 Q 470 270 480 300 Q 485 285 490 285", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "M 510 285 Q 530 270 520 300 Q 515 285 510 285", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "M 490 295 Q 475 290 485 310 Q 488 295 490 295", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "M 510 295 Q 525 290 515 310 Q 512 295 510 295", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "498", y1: "275", x2: "495", y2: "265", stroke: "white", strokeWidth: "1" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "502", y1: "275", x2: "505", y2: "265", stroke: "white", strokeWidth: "1" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "450", textAnchor: "middle", fill: "white", fontSize: "24", fontWeight: "bold", children: "TRANSFORMED!" })
      ] })
    ] });
  };
  const renderMountainClimbStory = () => {
    const climberY = (0,esm.interpolate)(progress, [0, 1], [400, 200]);
    const climberX = 300 + progress * 200;
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "M 200 450 L 400 150 L 600 450 Z", fill: "none", stroke: "white", strokeWidth: "3" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "250", y1: "400", x2: "350", y2: "250", stroke: "white", strokeWidth: "1", opacity: 0.3 }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "450", y1: "250", x2: "550", y2: "400", stroke: "white", strokeWidth: "1", opacity: 0.3 }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: climberX, cy: climberY - 15, r: "8", fill: "none", stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: climberX, y1: climberY - 7, x2: climberX, y2: climberY + 8, stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: climberX, y1: climberY - 2, x2: climberX - 10, y2: climberY + 5, stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: climberX, y1: climberY - 2, x2: climberX + 10, y2: climberY + 5, stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: climberX, y1: climberY + 8, x2: climberX - 6, y2: climberY + 18, stroke: "white", strokeWidth: "2" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: climberX, y1: climberY + 8, x2: climberX + 6, y2: climberY + 18, stroke: "white", strokeWidth: "2" })
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "500", textAnchor: "middle", fill: "white", fontSize: "18", children: progress < 0.3 ? "Starting the climb..." : progress < 0.7 ? "Keep going through hell..." : "Reach the summit!" }),
      progress >= 0.9 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.9, 1], [0, 1]), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "140", r: "20", fill: "none", stroke: "white", strokeWidth: "3", opacity: 0.7 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "480", textAnchor: "middle", fill: "white", fontSize: "24", fontWeight: "bold", children: "VICTORY!" })
      ] })
    ] });
  };
  const renderMuscleGrowthStory = () => {
    const muscleSize = (0,esm.interpolate)(progress, [0, 1], [0, 25]);
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "250", r: "20", fill: "none", stroke: "white", strokeWidth: "3" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "270", x2: "400", y2: "350", stroke: "white", strokeWidth: 4 + muscleSize / 5 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "290", x2: 370 - muscleSize, y2: "300", stroke: "white", strokeWidth: 3 + muscleSize / 4 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "290", x2: 430 + muscleSize, y2: "300", stroke: "white", strokeWidth: 3 + muscleSize / 4 }),
        muscleSize > 10 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: 370 - muscleSize, cy: "300", r: muscleSize / 3, fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.6 }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: 430 + muscleSize, cy: "300", r: muscleSize / 3, fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.6 }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("ellipse", { cx: "400", cy: "310", rx: 10 + muscleSize / 2, ry: "15", fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.4 })
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "350", x2: "385", y2: "400", stroke: "white", strokeWidth: 3 + muscleSize / 6 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "400", y1: "350", x2: "415", y2: "400", stroke: "white", strokeWidth: 3 + muscleSize / 6 })
      ] }),
      progress > 0.7 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "300", r: 30 + muscleSize, fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "400", cy: "300", r: 50 + muscleSize, fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.2 })
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("text", { x: "400", y: "480", textAnchor: "middle", fill: "white", fontSize: "18", children: progress < 0.4 ? "Building strength..." : progress < 0.8 ? "Growing stronger..." : "UNSTOPPABLE POWER!" })
    ] });
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    renderStoryAnimation(),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "80",
        textAnchor: "middle",
        fill: "white",
        fontSize: "24",
        fontFamily: "Arial, sans-serif",
        fontWeight: "bold",
        opacity: (0,esm.interpolate)(progress, [0, 0.1, 0.9, 1], [0, 0.8, 0.9, 1]),
        children: ((_a = svgPlan.concept) == null ? void 0 : _a.toUpperCase()) || "MOTIVATION"
      }
    )
  ] }) });
};

;// ./src/SVGVideoComposition.tsx



const SVGVideoComposition = ({ svgPlan, svgAssets }) => {
  console.log("SVGVideoComposition received:", {
    hasPlan: !!svgPlan,
    hasAssets: !!svgAssets,
    assetKeys: svgAssets ? Object.keys(svgAssets) : []
  });
  if (!svgPlan || !svgAssets) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      width: "100%",
      height: "100%",
      backgroundColor: "#000000",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: "#ffffff",
      fontSize: "24px",
      fontFamily: "Arial, sans-serif"
    }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: { textAlign: "center" }, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { children: "\u{1F3A8} SVG Animation Ready" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: { fontSize: "16px", marginTop: "10px", opacity: 0.7 }, children: 'Use npm run generate-svg "concept" to create videos' })
    ] }) });
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(StoryDrivenRenderer, { svgPlan, svgAssets });
};

;// ./src/TestSVGComponent.tsx



const TestSVGComponent = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const scale = (0,esm.interpolate)(progress, [0, 1], [0.5, 1.5]);
  const rotation = (0,esm.interpolate)(frame, [0, durationInFrames], [0, 360]);
  const opacity = (0,esm.interpolate)(progress, [0, 0.1, 0.9, 1], [0, 1, 1, 0.8]);
  const motivationalSVG = `
    <svg viewBox="0 0 200 200" width="100%" height="100%">
      <defs>
        <radialGradient id="centerGlow" cx="50%" cy="50%" r="50%">
          <stop offset="0%" style="stop-color:#ffffff;stop-opacity:1" />
          <stop offset="100%" style="stop-color:#00ff00;stop-opacity:0.3" />
        </radialGradient>
      </defs>
      <circle cx="100" cy="100" r="80" fill="none" stroke="#00ff00" stroke-width="3" opacity="0.8"/>
      <circle cx="100" cy="100" r="60" fill="none" stroke="#00ff00" stroke-width="2" opacity="0.6"/>
      <circle cx="100" cy="100" r="40" fill="none" stroke="#00ff00" stroke-width="2" opacity="0.4"/>
      <circle cx="100" cy="100" r="20" fill="url(#centerGlow)" opacity="0.9"/>
      <polygon points="100,60 120,140 80,140" fill="none" stroke="#ffffff" stroke-width="2" opacity="0.7"/>
    </svg>
  `;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        style: {
          width: "400px",
          height: "400px",
          transform: `scale(${scale}) rotate(${rotation}deg)`,
          opacity,
          filter: "drop-shadow(0 0 20px #00ff00)"
        },
        dangerouslySetInnerHTML: { __html: motivationalSVG }
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
      position: "absolute",
      bottom: "15%",
      left: "50%",
      transform: "translateX(-50%)",
      color: "#00ff00",
      fontSize: "28px",
      fontWeight: "bold",
      fontFamily: "Arial, sans-serif",
      textAlign: "center",
      textShadow: "0 0 15px #00ff00",
      opacity: opacity * 0.9
    }, children: "NEVER GIVE UP" })
  ] });
};

;// ./src/SimpleGrowthAnimation.tsx



const SimpleGrowthAnimation = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const easeInOutCubic = (t) => {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  };
  const getGrowthStage = () => {
    if (progress < 0.3) return "seed";
    if (progress < 0.55) return "sprout";
    if (progress < 0.8) return "sapling";
    return "tree";
  };
  const stage = getGrowthStage();
  let stageProgress = 0;
  if (stage === "seed") {
    stageProgress = easeInOutCubic(progress / 0.3);
  } else if (stage === "sprout") {
    stageProgress = easeInOutCubic((progress - 0.3) / 0.25);
  } else if (stage === "sapling") {
    stageProgress = easeInOutCubic((progress - 0.55) / 0.25);
  } else {
    stageProgress = easeInOutCubic((progress - 0.8) / 0.2);
  }
  const renderPlant = () => {
    const baseY = 400;
    const seedSize = Math.max(0, (0,esm.interpolate)(progress, [0, 0.3], [0, 20], {
      easing: esm.Easing.out(esm.Easing.quad)
    }));
    const stemHeight = Math.max(0, (0,esm.interpolate)(progress, [0.25, 0.55], [0, 60], {
      easing: esm.Easing.out(esm.Easing.cubic)
    }));
    const trunkHeight = Math.max(stemHeight, (0,esm.interpolate)(progress, [0.5, 0.8], [60, 120], {
      easing: esm.Easing.out(esm.Easing.cubic)
    }));
    const finalHeight = Math.max(trunkHeight, (0,esm.interpolate)(progress, [0.75, 1], [120, 200], {
      easing: esm.Easing.out(esm.Easing.cubic)
    }));
    const trunkWidth = (0,esm.interpolate)(progress, [0.5, 1], [3, 12], {
      easing: esm.Easing.out(esm.Easing.quad)
    });
    const branchLength = Math.max(0, (0,esm.interpolate)(progress, [0.6, 0.85], [0, 40], {
      easing: esm.Easing.out(esm.Easing.quad)
    }));
    const crownSize = Math.max(0, (0,esm.interpolate)(progress, [0.8, 1], [0, 100], {
      easing: esm.Easing.out(esm.Easing.quad)
    }));
    const leafSize = Math.max(0, (0,esm.interpolate)(progress, [0.4, 0.7], [0, 15], {
      easing: esm.Easing.out(esm.Easing.quad)
    }));
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
      seedSize > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "ellipse",
        {
          cx: "400",
          cy: baseY - Math.max(seedSize / 2, 10),
          rx: Math.max(seedSize / 2, 5),
          ry: Math.max(seedSize / 3, 3),
          fill: "white",
          opacity: (0,esm.interpolate)(progress, [0, 0.3, 0.5], [0, 1, 0.3], {
            easing: esm.Easing.out(esm.Easing.quad)
          })
        }
      ),
      finalHeight > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "line",
        {
          x1: "400",
          y1: baseY,
          x2: "400",
          y2: baseY - finalHeight,
          stroke: "white",
          strokeWidth: trunkWidth
        }
      ),
      leafSize > 0 && stemHeight > 20 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "ellipse",
          {
            cx: "390",
            cy: baseY - stemHeight + 10,
            rx: leafSize,
            ry: leafSize / 2,
            fill: "white",
            opacity: (0,esm.interpolate)(progress, [0.4, 0.6, 0.8], [0, 0.8, 0.4])
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "ellipse",
          {
            cx: "410",
            cy: baseY - stemHeight + 15,
            rx: leafSize,
            ry: leafSize / 2,
            fill: "white",
            opacity: (0,esm.interpolate)(progress, [0.45, 0.65, 0.8], [0, 0.8, 0.4])
          }
        )
      ] }),
      branchLength > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: "400",
            y1: baseY - finalHeight + 50,
            x2: 400 - branchLength,
            y2: baseY - finalHeight + 30,
            stroke: "white",
            strokeWidth: Math.min(trunkWidth - 2, 4),
            opacity: (0,esm.interpolate)(progress, [0.6, 0.75], [0, 1])
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: "400",
            y1: baseY - finalHeight + 60,
            x2: 400 + branchLength,
            y2: baseY - finalHeight + 40,
            stroke: "white",
            strokeWidth: Math.min(trunkWidth - 2, 4),
            opacity: (0,esm.interpolate)(progress, [0.65, 0.8], [0, 1])
          }
        )
      ] }),
      crownSize > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: "400",
            cy: baseY - finalHeight + 30,
            r: crownSize,
            fill: "none",
            stroke: "white",
            strokeWidth: "3",
            opacity: (0,esm.interpolate)(progress, [0.8, 1], [0, 0.9])
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: "400",
            cy: baseY - finalHeight + 30,
            r: crownSize * 0.7,
            fill: "none",
            stroke: "white",
            strokeWidth: "2",
            opacity: (0,esm.interpolate)(progress, [0.85, 1], [0, 0.6])
          }
        ),
        progress > 0.9 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "380", y1: baseY - finalHeight + 60, x2: "370", y2: baseY - finalHeight + 45, stroke: "white", strokeWidth: "2", opacity: 0.8 }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "420", y1: baseY - finalHeight + 50, x2: "430", y2: baseY - finalHeight + 35, stroke: "white", strokeWidth: "2", opacity: 0.8 }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "385", y1: baseY - finalHeight + 80, x2: "375", y2: baseY - finalHeight + 95, stroke: "white", strokeWidth: "2", opacity: 0.8 }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "415", y1: baseY - finalHeight + 70, x2: "425", y2: baseY - finalHeight + 85, stroke: "white", strokeWidth: "2", opacity: 0.8 })
        ] })
      ] })
    ] });
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        x1: "200",
        y1: "400",
        x2: "600",
        y2: "400",
        stroke: "white",
        strokeWidth: "2",
        opacity: 0.3
      }
    ),
    renderPlant(),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "550",
        textAnchor: "middle",
        fill: "white",
        fontSize: "24",
        fontFamily: "Arial, sans-serif",
        opacity: 0.8,
        children: stage.toUpperCase()
      }
    )
  ] }) });
};

;// ./src/SacredGeometryRenderer.tsx



const SacredGeometryRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const getStage = () => {
    if (progress < 0.25) return "day1";
    if (progress < 0.5) return "week1";
    if (progress < 0.75) return "month1";
    return "year1";
  };
  const stage = getStage();
  let stageProgress = 0;
  if (stage === "day1") {
    stageProgress = progress / 0.25;
  } else if (stage === "week1") {
    stageProgress = (progress - 0.25) / 0.25;
  } else if (stage === "month1") {
    stageProgress = (progress - 0.5) / 0.25;
  } else {
    stageProgress = (progress - 0.75) / 0.25;
  }
  const glowIntensity = (0,esm.interpolate)(progress, [0, 1], [10, 25]);
  const baseOpacity = (0,esm.interpolate)(progress, [0, 0.1, 1], [0, 0.9, 1]);
  const renderSacredGeometry = () => {
    const centerX = 400;
    const centerY = 300;
    const baseRadius = 60;
    switch (stage) {
      case "day1":
        const radius1 = (0,esm.interpolate)(stageProgress, [0, 1], [0, baseRadius]);
        const opacity1 = (0,esm.interpolate)(stageProgress, [0, 0.3, 1], [0, 0.8, 1]) * baseOpacity;
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { children: radius1 > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: centerX,
            cy: centerY,
            r: radius1,
            fill: "none",
            stroke: "white",
            strokeWidth: "3",
            opacity: opacity1,
            filter: `drop-shadow(0 0 ${glowIntensity}px white)`
          }
        ) });
      case "week1":
        const radius2 = baseRadius;
        const separation = (0,esm.interpolate)(stageProgress, [0, 1], [0, baseRadius * 0.8]);
        const opacity2 = baseOpacity;
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "circle",
            {
              cx: centerX,
              cy: centerY,
              r: radius2,
              fill: "none",
              stroke: "white",
              strokeWidth: "3",
              opacity: opacity2,
              filter: `drop-shadow(0 0 ${glowIntensity}px white)`
            }
          ),
          separation > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "circle",
            {
              cx: centerX + separation,
              cy: centerY,
              r: radius2,
              fill: "none",
              stroke: "white",
              strokeWidth: "3",
              opacity: (0,esm.interpolate)(stageProgress, [0, 0.3, 1], [0, 0.8, 1]) * baseOpacity,
              filter: `drop-shadow(0 0 ${glowIntensity}px white)`
            }
          )
        ] });
      case "month1":
        const radius3 = baseRadius;
        const ringCount = Math.floor((0,esm.interpolate)(stageProgress, [0, 1], [2, 6]));
        const rosetteSeparation = baseRadius * 0.8;
        const rings = [];
        for (let i = 0; i < ringCount; i++) {
          const angle = i * 2 * Math.PI / 6;
          const x = centerX + Math.cos(angle) * rosetteSeparation;
          const y = centerY + Math.sin(angle) * rosetteSeparation;
          const ringOpacity = (0,esm.interpolate)(stageProgress, [i * 0.15, (i + 1) * 0.15], [0, 1]) * baseOpacity;
          if (i < 2) {
            rings.push(
              /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "circle",
                {
                  cx: i === 0 ? centerX : centerX + rosetteSeparation,
                  cy: centerY,
                  r: radius3,
                  fill: "none",
                  stroke: "white",
                  strokeWidth: "3",
                  opacity: baseOpacity,
                  filter: `drop-shadow(0 0 ${glowIntensity}px white)`
                },
                i
              )
            );
          } else if (ringOpacity > 0) {
            rings.push(
              /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "circle",
                {
                  cx: x,
                  cy: y,
                  r: radius3,
                  fill: "none",
                  stroke: "white",
                  strokeWidth: "3",
                  opacity: ringOpacity,
                  filter: `drop-shadow(0 0 ${glowIntensity}px white)`
                },
                i
              )
            );
          }
        }
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { children: rings });
      case "year1":
        const radius4 = baseRadius;
        const seedSeparation = baseRadius * 0.8;
        const seedCircles = [];
        seedCircles.push(
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "circle",
            {
              cx: centerX,
              cy: centerY,
              r: radius4,
              fill: "none",
              stroke: "white",
              strokeWidth: "3",
              opacity: baseOpacity,
              filter: `drop-shadow(0 0 ${glowIntensity}px white)`
            },
            "center"
          )
        );
        for (let i = 0; i < 6; i++) {
          const angle = i * 2 * Math.PI / 6;
          const x = centerX + Math.cos(angle) * seedSeparation;
          const y = centerY + Math.sin(angle) * seedSeparation;
          const appearTime = i * 0.1;
          const circleOpacity = (0,esm.interpolate)(stageProgress, [appearTime, appearTime + 0.2], [0, 1]) * baseOpacity;
          if (circleOpacity > 0) {
            seedCircles.push(
              /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "circle",
                {
                  cx: x,
                  cy: y,
                  r: radius4,
                  fill: "none",
                  stroke: "white",
                  strokeWidth: "3",
                  opacity: circleOpacity,
                  filter: `drop-shadow(0 0 ${glowIntensity}px white)`
                },
                `inner-${i}`
              )
            );
          }
        }
        const outerRingCount = Math.floor((0,esm.interpolate)(stageProgress, [0.6, 1], [0, 12]));
        const outerRadius = seedSeparation * 1.732;
        for (let i = 0; i < outerRingCount; i++) {
          const angle = i * 2 * Math.PI / 12;
          const x = centerX + Math.cos(angle) * outerRadius;
          const y = centerY + Math.sin(angle) * outerRadius;
          const appearTime = 0.6 + i * 0.03;
          const circleOpacity = (0,esm.interpolate)(stageProgress, [appearTime, appearTime + 0.1], [0, 0.7]) * baseOpacity;
          if (circleOpacity > 0) {
            seedCircles.push(
              /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "circle",
                {
                  cx: x,
                  cy: y,
                  r: radius4 * 0.8,
                  fill: "none",
                  stroke: "white",
                  strokeWidth: "2",
                  opacity: circleOpacity,
                  filter: `drop-shadow(0 0 ${glowIntensity * 0.8}px white)`
                },
                `outer-${i}`
              )
            );
          }
        }
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { children: seedCircles });
      default:
        return null;
    }
  };
  const getStageLabel = () => {
    switch (stage) {
      case "day1":
        return "DAY 1";
      case "week1":
        return "WEEK 1";
      case "month1":
        return "MONTH 1";
      case "year1":
        return "YEAR 1";
      default:
        return "";
    }
  };
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    renderSacredGeometry(),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "100",
        textAnchor: "middle",
        fill: "white",
        fontSize: "32",
        fontFamily: "Arial, sans-serif",
        fontWeight: "bold",
        opacity: (0,esm.interpolate)(progress, [0, 0.1, 0.9, 1], [0, 0.9, 1, 0.8]),
        filter: `drop-shadow(0 0 15px white)`,
        children: getStageLabel()
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "520",
        textAnchor: "middle",
        fill: "white",
        fontSize: "18",
        fontFamily: "Arial, sans-serif",
        opacity: 0.7,
        children: stage === "day1" ? "UNITY" : stage === "week1" ? "DUALITY" : stage === "month1" ? "HARMONY" : "INFINITY"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "540",
        textAnchor: "middle",
        fill: "white",
        fontSize: "14",
        fontFamily: "Arial, sans-serif",
        opacity: 0.5,
        letterSpacing: "2px",
        children: "SACRED GEOMETRY EVOLUTION"
      }
    )
  ] }) });
};

;// ./src/InfinityRenderer.tsx



const InfinityRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const drawProgress = (0,esm.interpolate)(progress, [0, 0.8], [0, 1]);
  const fadeInOpacity = (0,esm.interpolate)(progress, [0, 0.2], [0, 1]);
  const finalGlow = (0,esm.interpolate)(progress, [0.8, 1], [0, 1]);
  const createInfinityPath = (centerX, centerY, size) => {
    const points = [];
    const numPoints = 200;
    for (let i = 0; i < numPoints; i++) {
      const t = i / numPoints * 2 * Math.PI;
      const x = centerX + size * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      const y = centerY + size * Math.sin(t) * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      points.push(`${i === 0 ? "M" : "L"} ${x} ${y}`);
    }
    return points.join(" ") + " Z";
  };
  const pathLength = 800;
  const strokeDasharray = pathLength;
  const strokeDashoffset = pathLength * (1 - drawProgress);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d: createInfinityPath(400, 300, 120),
        fill: "none",
        stroke: "white",
        strokeWidth: "4",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        opacity: fadeInOpacity,
        strokeDasharray,
        strokeDashoffset,
        filter: finalGlow > 0 ? `drop-shadow(0 0 ${15 + finalGlow * 10}px white)` : void 0,
        style: {
          transition: "filter 0.3s ease-out"
        }
      }
    ),
    finalGlow > 0.3 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d: createInfinityPath(400, 300, 120),
        fill: "none",
        stroke: "white",
        strokeWidth: "6",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        opacity: finalGlow * 0.3,
        filter: "blur(2px)"
      }
    ),
    drawProgress > 0.9 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "circle",
      {
        cx: "400",
        cy: "300",
        r: "3",
        fill: "white",
        opacity: (0,esm.interpolate)(progress, [0.9, 1], [0, 0.8]),
        filter: `drop-shadow(0 0 8px white)`
      }
    ),
    drawProgress > 0.7 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "420",
        textAnchor: "middle",
        fill: "white",
        fontSize: "18",
        fontFamily: "Arial, sans-serif",
        fontWeight: "300",
        letterSpacing: "4px",
        opacity: (0,esm.interpolate)(progress, [0.7, 1], [0, 0.6]),
        children: "INFINITY"
      }
    ),
    drawProgress > 0.8 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "450",
        textAnchor: "middle",
        fill: "white",
        fontSize: "12",
        fontFamily: "Arial, sans-serif",
        opacity: (0,esm.interpolate)(progress, [0.8, 1], [0, 0.4]),
        letterSpacing: "2px",
        children: "LIMITLESS POSSIBILITIES"
      }
    )
  ] }) });
};

;// ./src/MotivationalGeometryRenderer.tsx



const MotivationalGeometryRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const glowIntensity = (0,esm.interpolate)(progress, [0, 1], [8, 20]);
  const baseOpacity = (0,esm.interpolate)(progress, [0, 0.15, 1], [0, 1, 1]);
  const phase1 = (0,esm.interpolate)(progress, [0, 0.4], [0, 1]);
  const phase2 = (0,esm.interpolate)(progress, [0.3, 0.7], [0, 1]);
  const phase3 = (0,esm.interpolate)(progress, [0.6, 1], [0, 1]);
  const centerX = 400;
  const centerY = 300;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    phase1 > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: phase1 * baseOpacity, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: centerX,
          cy: centerY,
          r: "40",
          fill: "none",
          stroke: "white",
          strokeWidth: "3",
          opacity: phase1,
          filter: `drop-shadow(0 0 ${glowIntensity}px white)`
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "polygon",
        {
          points: `${centerX},${centerY - 25} ${centerX - 20},${centerY + 15} ${centerX + 20},${centerY + 15}`,
          fill: "none",
          stroke: "white",
          strokeWidth: "2",
          opacity: phase1 * 0.8,
          filter: `drop-shadow(0 0 ${glowIntensity * 0.7}px white)`
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: centerX,
          cy: centerY,
          r: "2",
          fill: "white",
          opacity: phase1 * 0.9,
          filter: `drop-shadow(0 0 6px white)`
        }
      )
    ] }),
    phase2 > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: phase2 * baseOpacity, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: centerX,
          cy: centerY,
          r: "80",
          fill: "none",
          stroke: "white",
          strokeWidth: "2",
          opacity: phase2 * 0.7,
          filter: `drop-shadow(0 0 ${glowIntensity * 0.8}px white)`
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "polygon",
        {
          points: [0, 1, 2, 3, 4, 5].map((i) => {
            const angle = i * Math.PI / 3;
            const x = centerX + 60 * Math.cos(angle);
            const y = centerY + 60 * Math.sin(angle);
            return `${x},${y}`;
          }).join(" "),
          fill: "none",
          stroke: "white",
          strokeWidth: "2",
          opacity: phase2 * 0.6,
          filter: `drop-shadow(0 0 ${glowIntensity * 0.6}px white)`
        }
      )
    ] }),
    phase3 > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: phase3 * baseOpacity, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: centerX,
          cy: centerY,
          r: "120",
          fill: "none",
          stroke: "white",
          strokeWidth: "1.5",
          opacity: phase3 * 0.5,
          filter: `drop-shadow(0 0 ${glowIntensity * 0.5}px white)`
        }
      ),
      [0, 1, 2, 3, 4, 5].map((i) => {
        const angle = i * Math.PI / 3;
        const x = centerX + 40 * Math.cos(angle);
        const y = centerY + 40 * Math.sin(angle);
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "circle",
          {
            cx: x,
            cy: y,
            r: "20",
            fill: "none",
            stroke: "white",
            strokeWidth: "1",
            opacity: phase3 * 0.4,
            filter: `drop-shadow(0 0 ${glowIntensity * 0.3}px white)`
          },
          i
        );
      }),
      [0, 1, 2].map((i) => {
        const angle1 = i * 2 * Math.PI / 3;
        const angle2 = (i + 3) * 2 * Math.PI / 3;
        const x1 = centerX + 100 * Math.cos(angle1);
        const y1 = centerY + 100 * Math.sin(angle1);
        const x2 = centerX + 100 * Math.cos(angle2);
        const y2 = centerY + 100 * Math.sin(angle2);
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1,
            y1,
            x2,
            y2,
            stroke: "white",
            strokeWidth: "0.5",
            opacity: phase3 * 0.3,
            filter: `drop-shadow(0 0 ${glowIntensity * 0.2}px white)`
          },
          i
        );
      })
    ] }),
    progress > 0.3 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: centerX,
        y: "480",
        textAnchor: "middle",
        fill: "white",
        fontSize: "20",
        fontFamily: "Arial, sans-serif",
        fontWeight: "300",
        letterSpacing: "3px",
        opacity: (0,esm.interpolate)(progress, [0.3, 0.6], [0, 0.8]),
        filter: `drop-shadow(0 0 12px white)`,
        children: "INFINITE POTENTIAL"
      }
    ),
    progress > 0.6 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: centerX,
        y: "510",
        textAnchor: "middle",
        fill: "white",
        fontSize: "14",
        fontFamily: "Arial, sans-serif",
        opacity: (0,esm.interpolate)(progress, [0.6, 0.9], [0, 0.6]),
        letterSpacing: "2px",
        children: "WITHIN SACRED GEOMETRY"
      }
    ),
    progress > 0.8 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: (0,esm.interpolate)(progress, [0.8, 1], [0, 0.4]), children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: centerX, cy: centerY - 140, r: "1.5", fill: "white", filter: "drop-shadow(0 0 4px white)" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: centerX + 140, cy: centerY, r: "1.5", fill: "white", filter: "drop-shadow(0 0 4px white)" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: centerX, cy: centerY + 140, r: "1.5", fill: "white", filter: "drop-shadow(0 0 4px white)" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: centerX - 140, cy: centerY, r: "1.5", fill: "white", filter: "drop-shadow(0 0 4px white)" })
    ] }),
    progress > 0.9 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "circle",
      {
        cx: centerX,
        cy: centerY,
        r: 2 + Math.sin(frame * 0.1) * 0.5,
        fill: "white",
        opacity: 0.6 + Math.sin(frame * 0.1) * 0.2,
        filter: "drop-shadow(0 0 8px white)"
      }
    )
  ] }) });
};

;// ./src/InfinityLoopRenderer.tsx



const InfinityLoopRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const loopProgress = progress % 1;
  const isDrawingPhase = loopProgress < 0.7;
  const drawProgress = isDrawingPhase ? loopProgress / 0.7 : 1;
  const textPhase = isDrawingPhase ? 0 : (loopProgress - 0.7) / 0.3;
  const createInfinityPath = (centerX, centerY, size) => {
    const points = [];
    const numPoints = 200;
    for (let i = 0; i < numPoints; i++) {
      const t = i / numPoints * 2 * Math.PI;
      const x = centerX + size * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      const y = centerY + size * Math.sin(t) * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      points.push(`${i === 0 ? "M" : "L"} ${x} ${y}`);
    }
    return points.join(" ") + " Z";
  };
  const pathLength = 800;
  const strokeDasharray = pathLength;
  const strokeDashoffset = pathLength * (1 - drawProgress);
  const glowIntensity = (0,esm.interpolate)(drawProgress, [0, 0.5, 1], [5, 15, 12]);
  const lineOpacity = (0,esm.interpolate)(drawProgress, [0, 0.1, 1], [0, 0.8, 1]);
  const textOpacity = (0,esm.interpolate)(textPhase, [0, 0.3, 0.7, 1], [0, 1, 1, 0]);
  const textScale = (0,esm.interpolate)(textPhase, [0, 0.2, 1], [0.9, 1, 1]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "#000000",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d: createInfinityPath(400, 280, 100),
        fill: "none",
        stroke: "white",
        strokeWidth: "3",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        opacity: lineOpacity,
        strokeDasharray,
        strokeDashoffset,
        filter: `drop-shadow(0 0 ${glowIntensity}px white)`,
        style: {
          transition: "none"
          // Smooth continuous animation
        }
      }
    ),
    drawProgress > 0.5 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d: createInfinityPath(400, 280, 100),
        fill: "none",
        stroke: "white",
        strokeWidth: "5",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        opacity: (0,esm.interpolate)(drawProgress, [0.5, 1], [0, 0.2]),
        filter: "blur(3px)",
        strokeDasharray,
        strokeDashoffset
      }
    ),
    textOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      "g",
      {
        opacity: textOpacity,
        transform: `scale(${textScale}) translate(${400 * (1 - textScale)}, ${380 * (1 - textScale)})`,
        children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "text",
            {
              x: "400",
              y: "380",
              textAnchor: "middle",
              fill: "white",
              fontSize: "28",
              fontFamily: "Arial, sans-serif",
              fontWeight: "300",
              letterSpacing: "1px",
              filter: "drop-shadow(0 0 10px white)",
              children: "Slow down & refocus"
            }
          ),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "line",
            {
              x1: "320",
              y1: "400",
              x2: "480",
              y2: "400",
              stroke: "white",
              strokeWidth: "1",
              opacity: 0.6,
              filter: "drop-shadow(0 0 5px white)"
            }
          )
        ]
      }
    ),
    drawProgress > 0.8 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "circle",
      {
        cx: "400",
        cy: "280",
        r: 1.5 + Math.sin(frame * 0.08) * 0.5,
        fill: "white",
        opacity: 0.4 + Math.sin(frame * 0.08) * 0.2,
        filter: "drop-shadow(0 0 6px white)"
      }
    ),
    textPhase > 0.5 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "450",
        textAnchor: "middle",
        fill: "white",
        fontSize: "12",
        fontFamily: "Arial, sans-serif",
        opacity: (0,esm.interpolate)(textPhase, [0.5, 0.8, 1], [0, 0.4, 0.2]),
        letterSpacing: "2px",
        children: "MINDFUL BREATHING"
      }
    )
  ] }) });
};

;// ./src/PreciseInfinityRenderer.tsx



const PreciseInfinityRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames, fps } = (0,esm.useVideoConfig)();
  const loopDuration = 3 * fps;
  const currentLoopFrame = frame % loopDuration;
  const loopProgress = currentLoopFrame / loopDuration;
  const createInfinityPath = () => {
    const centerX = 400;
    const centerY = 300;
    const width = 80;
    const height = 40;
    const points = [];
    const numPoints = 200;
    for (let i = 0; i <= numPoints; i++) {
      const t = i / numPoints * 2 * Math.PI;
      const x = centerX + width * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      const y = centerY + height * Math.sin(t) * Math.cos(t) / (1 + Math.sin(t) * Math.sin(t));
      points.push(`${i === 0 ? "M" : "L"} ${x} ${y}`);
    }
    return points.join(" ") + " Z";
  };
  const pathLength = 500;
  const drawProgress = loopProgress;
  const strokeDashoffset = pathLength * (1 - drawProgress);
  const centerCrossingTime = 0.5;
  const textStartTime = centerCrossingTime;
  const textDuration = 1 / 3;
  const textEndTime = textStartTime + textDuration;
  const fadeTime = 0.1;
  let textOpacity = 0;
  if (loopProgress >= textStartTime && loopProgress <= textEndTime) {
    if (loopProgress <= textStartTime + fadeTime) {
      textOpacity = (loopProgress - textStartTime) / fadeTime;
    } else if (loopProgress >= textEndTime - fadeTime) {
      textOpacity = (textEndTime - loopProgress) / fadeTime;
    } else {
      textOpacity = 1;
    }
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "rgb(0,0,0)",
    // Pure RGB black as specified
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d: createInfinityPath(),
        fill: "none",
        stroke: "white",
        strokeWidth: "3",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeDasharray: pathLength,
        strokeDashoffset,
        opacity: 1,
        filter: "drop-shadow(0 0 2px white)",
        style: {
          // Subtle anti-aliasing effect
          shapeRendering: "geometricPrecision"
        }
      }
    ),
    textOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "text",
      {
        x: "400",
        y: "450",
        textAnchor: "middle",
        fill: "white",
        fontSize: "32",
        fontFamily: "Arial, Helvetica, sans-serif",
        fontWeight: "500",
        opacity: textOpacity,
        style: {
          // Clean typography with anti-aliasing
          textRendering: "optimizeLegibility"
        },
        children: "Slow down & refocus."
      }
    )
  ] }) });
};

;// ./src/MotivationDisciplineRenderer.tsx



const MotivationDisciplineRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames, fps } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const timeInSeconds = frame / fps;
  const motivationFadeIn = (0,esm.interpolate)(timeInSeconds, [0, 0.5], [0, 1]);
  const motivationFadeOut = (0,esm.interpolate)(timeInSeconds, [3, 3.8], [1, 0]);
  const breathingCycle = (timeInSeconds - 0.5) / 1.5;
  const breathingOpacity = timeInSeconds > 0.5 && timeInSeconds < 3 ? 0.95 + 0.05 * Math.sin(breathingCycle * 2 * Math.PI) : 1;
  let motivationOpacity = 1;
  if (timeInSeconds <= 0.5) {
    motivationOpacity = motivationFadeIn;
  } else if (timeInSeconds >= 3 && timeInSeconds <= 3.8) {
    motivationOpacity = motivationFadeOut;
  } else if (timeInSeconds > 3.8) {
    motivationOpacity = 0;
  } else {
    motivationOpacity = breathingOpacity;
  }
  const disciplineFadeIn = (0,esm.interpolate)(timeInSeconds, [3, 3.8], [0, 1]);
  const disciplineOpacity = timeInSeconds >= 3 ? disciplineFadeIn : 0;
  const geometryOpacity = (0,esm.interpolate)(timeInSeconds, [0, 1, 8], [0, 0.1, 0.15]);
  const temporaryElementsOpacity = (0,esm.interpolate)(timeInSeconds, [0, 1, 3, 4], [0, 0.08, 0.08, 0]);
  const permanentElementsOpacity = (0,esm.interpolate)(timeInSeconds, [3, 4, 8], [0, 0.12, 0.2]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "rgb(25,25,25)",
    // Dark charcoal as specified
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", style: { position: "absolute", top: 0, left: 0 }, children: [
      temporaryElementsOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: temporaryElementsOpacity, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "200", cy: "150", r: "30", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "600", cy: "200", r: "25", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.4 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "150", cy: "450", r: "20", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.25 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "100", y1: "100", x2: "200", y2: "150", stroke: "white", strokeWidth: "1", opacity: 0.2, strokeDasharray: "5,5" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "600", y1: "450", x2: "700", y2: "400", stroke: "white", strokeWidth: "1", opacity: 0.2, strokeDasharray: "5,5" })
      ] }),
      permanentElementsOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: permanentElementsOpacity, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("polygon", { points: "100,500 150,400 200,500", fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("polygon", { points: "600,100 650,50 700,100", fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "50", y1: "300", x2: "150", y2: "300", stroke: "white", strokeWidth: "2", opacity: 0.25 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "650", y1: "300", x2: "750", y2: "300", stroke: "white", strokeWidth: "2", opacity: 0.25 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { x: "300", y: "480", width: "200", height: "8", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.2 })
      ] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
      textAlign: "center",
      position: "relative",
      zIndex: 10
    }, children: [
      motivationOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          style: {
            color: "white",
            fontSize: "32px",
            // 32pt as specified
            fontFamily: "Arial, Helvetica, sans-serif",
            fontWeight: "300",
            // Light weight as specified
            opacity: motivationOpacity,
            textAlign: "center",
            transition: timeInSeconds <= 0.5 || timeInSeconds >= 3 && timeInSeconds <= 3.8 ? "opacity 0.1s ease-out" : "none",
            textRendering: "optimizeLegibility"
          },
          children: "Motivation fades."
        }
      ),
      disciplineOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          style: {
            color: "white",
            fontSize: "36px",
            // 36pt as specified
            fontFamily: "Arial, Helvetica, sans-serif",
            fontWeight: "bold",
            // Bold weight as specified
            opacity: disciplineOpacity,
            textAlign: "center",
            marginTop: "40px",
            // 40px below first line as specified
            transition: "opacity 0.1s ease-out",
            textRendering: "optimizeLegibility"
          },
          children: "Discipline persists."
        }
      )
    ] }),
    timeInSeconds > 3 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          background: `radial-gradient(circle at center, rgba(255,255,255,${(0,esm.interpolate)(timeInSeconds, [3, 4], [0, 0.02])}) 0%, transparent 60%)`,
          pointerEvents: "none",
          zIndex: 1
        }
      }
    )
  ] });
};

;// ./src/FocusDefeatsDistractionRenderer.tsx



const FocusDefeatsDistractionRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames } = (0,esm.useVideoConfig)();
  const progress = frame / durationInFrames;
  const timeInSeconds = frame / 30;
  const firstelementappearsOpacity = (0,esm.interpolate)(progress, [0, 0.1, 0.2], [0, 1, 1]);
  const complexitypeakOpacity = (0,esm.interpolate)(progress, [0.4, 0.5, 0.6], [0, 1, 1]);
  const textrevelationOpacity = (0,esm.interpolate)(progress, [0.7, 0.8, 0.9], [0, 1, 1]);
  const fadeinProgress = (0,esm.interpolate)(timeInSeconds, [0, 1], [0, 1]);
  const geometricevolutionProgress = (0,esm.interpolate)(timeInSeconds, [1, 4], [0, 1]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "rgb(0,0,0)",
    // Pure black for spiritual depth
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", style: { position: "absolute", top: 0, left: 0 }, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "circle",
        {
          cx: 400,
          cy: 300,
          r: 30,
          fill: "none",
          stroke: "white",
          strokeWidth: "2",
          opacity: (0,esm.interpolate)(progress, [0, 0.2], [0, 1]),
          filter: "drop-shadow(0 0 8px white)"
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "line",
        {
          x1: 350,
          y1: 300,
          x2: 450,
          y2: 300,
          stroke: "white",
          strokeWidth: "3",
          opacity: (0,esm.interpolate)(progress, [0.2, 0.4], [0, 1]),
          filter: "drop-shadow(0 0 4px white)"
        }
      )
    ] }),
    progress > 0.7 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        style: {
          position: "absolute",
          bottom: "20%",
          width: "100%",
          textAlign: "center",
          color: "white",
          fontSize: "32px",
          fontFamily: "Arial, Helvetica, sans-serif",
          fontWeight: "light",
          opacity: (0,esm.interpolate)(progress, [0.7, 0.7999999999999999], [0, 1]),
          filter: "drop-shadow(0 0 10px white)",
          textRendering: "optimizeLegibility"
        },
        children: "focus defeats distraction"
      }
    )
  ] });
};

;// ./src/PreciseMotivationDisciplineRenderer.tsx



const PreciseMotivationDisciplineRenderer = () => {
  const frame = (0,esm.useCurrentFrame)();
  const { durationInFrames, fps } = (0,esm.useVideoConfig)();
  const timeInSeconds = frame / fps;
  const motivationFadeIn = (0,esm.interpolate)(timeInSeconds, [0, 0.5], [0, 1]);
  const motivationFadeOut = (0,esm.interpolate)(timeInSeconds, [3, 3.8], [1, 0]);
  const breathingCycle = (timeInSeconds - 0.5) / 1.5;
  const breathingOpacity = timeInSeconds > 0.5 && timeInSeconds < 3 ? 0.95 + 0.05 * Math.sin(breathingCycle * 2 * Math.PI) : 1;
  let motivationOpacity = 1;
  if (timeInSeconds <= 0.5) {
    motivationOpacity = motivationFadeIn;
  } else if (timeInSeconds >= 3 && timeInSeconds <= 3.8) {
    motivationOpacity = motivationFadeOut;
  } else if (timeInSeconds > 3.8) {
    motivationOpacity = 0;
  } else {
    motivationOpacity = breathingOpacity;
  }
  const disciplineFadeIn = (0,esm.interpolate)(timeInSeconds, [3, 3.8], [0, 1]);
  const disciplineOpacity = timeInSeconds >= 3 ? disciplineFadeIn : 0;
  const temporaryElementsOpacity = (0,esm.interpolate)(timeInSeconds, [0, 1, 3, 4], [0, 0.08, 0.08, 0]);
  const permanentElementsOpacity = (0,esm.interpolate)(timeInSeconds, [3, 4, 8], [0, 0.12, 0.2]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
    width: "100%",
    height: "100%",
    backgroundColor: "rgb(25,25,25)",
    // Dark charcoal as specified
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative"
  }, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { width: "800", height: "600", viewBox: "0 0 800 600", style: { position: "absolute", top: 0, left: 0 }, children: [
      temporaryElementsOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: temporaryElementsOpacity, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "200", cy: "150", r: "30", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "600", cy: "200", r: "25", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.4 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "100", y1: "100", x2: "200", y2: "150", stroke: "white", strokeWidth: "1", opacity: 0.2, strokeDasharray: "5,5" })
      ] }),
      permanentElementsOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { opacity: permanentElementsOpacity, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("polygon", { points: "100,500 150,400 200,500", fill: "none", stroke: "white", strokeWidth: "2", opacity: 0.3 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "50", y1: "300", x2: "150", y2: "300", stroke: "white", strokeWidth: "2", opacity: 0.25 }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { x: "300", y: "480", width: "200", height: "8", fill: "none", stroke: "white", strokeWidth: "1", opacity: 0.2 })
      ] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { style: {
      textAlign: "center",
      position: "relative",
      zIndex: 10
    }, children: [
      motivationOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          style: {
            color: "white",
            fontSize: "32px",
            // 32pt as specified
            fontFamily: "Arial, Helvetica, sans-serif",
            fontWeight: "300",
            // Light weight as specified
            opacity: motivationOpacity,
            textAlign: "center",
            transition: timeInSeconds <= 0.5 || timeInSeconds >= 3 && timeInSeconds <= 3.8 ? "opacity 0.1s ease-out" : "none",
            textRendering: "optimizeLegibility"
          },
          children: "Motivation fades."
        }
      ),
      disciplineOpacity > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          style: {
            color: "white",
            fontSize: "36px",
            // 36pt as specified
            fontFamily: "Arial, Helvetica, sans-serif",
            fontWeight: "bold",
            // Bold weight as specified
            opacity: disciplineOpacity,
            textAlign: "center",
            marginTop: "40px",
            // 40px below first line as specified
            transition: "opacity 0.1s ease-out",
            textRendering: "optimizeLegibility"
          },
          children: "Discipline persists."
        }
      )
    ] }),
    timeInSeconds > 3 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        style: {
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          background: `radial-gradient(circle at center, rgba(255,255,255,${(0,esm.interpolate)(timeInSeconds, [3, 4], [0, 0.02])}) 0%, transparent 60%)`,
          pointerEvents: "none",
          zIndex: 1
        }
      }
    )
  ] });
};

;// ./src/ConceptMapper.ts

const mapConceptToVisual = (concept) => {
  const conceptMappings = {
    "never give up": {
      concept: "NEVER GIVE UP",
      stages: [
        { label: "SETBACK", complexity: 1, rings: 1 },
        { label: "REBUILD", complexity: 3, rings: 2 },
        { label: "STRENGTHEN", complexity: 6, rings: 4 },
        { label: "TRIUMPH", complexity: 10, rings: 7 }
      ],
      primaryColor: "#FFD700",
      backgroundColor: "#000000",
      duration: 90
      // 3 seconds at 30fps
    },
    "growth mindset": {
      concept: "GROWTH MINDSET",
      stages: [
        { label: "DAY 1", complexity: 1, rings: 1 },
        { label: "WEEK 1", complexity: 2, rings: 2 },
        { label: "MONTH 1", complexity: 5, rings: 4 },
        { label: "YEAR 1", complexity: 10, rings: 8 }
      ],
      primaryColor: "#FFFFFF",
      backgroundColor: "#000000",
      duration: 120
    },
    "discipline persists": {
      concept: "DISCIPLINE PERSISTS",
      stages: [
        { label: "MOTIVATION", complexity: 2, rings: 2 },
        { label: "FADES", complexity: 1, rings: 1 },
        { label: "DISCIPLINE", complexity: 8, rings: 6 },
        { label: "REMAINS", complexity: 10, rings: 8 }
      ],
      primaryColor: "#00FFFF",
      backgroundColor: "#000000",
      duration: 100
    }
  };
  return conceptMappings[concept.toLowerCase()] || conceptMappings["growth mindset"];
};

;// ./src/Composition.tsx

















const RemotionRoot = () => {
  const concept = "never give up";
  const config = mapConceptToVisual(concept);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "MotivationalVideo",
        component: DynamicTemplate,
        durationInFrames: config.duration,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: config
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "GenerativeVideo",
        component: SimpleGenerativeRenderer,
        durationInFrames: 120,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: { animationData: null }
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "SVGVideo",
        component: SVGVideoComposition,
        durationInFrames: 150,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: { svgPlan: null, svgAssets: null }
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "SVGTest",
        component: TestSVGComponent,
        durationInFrames: 90,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "EmbeddedSVGTest",
        component: TestSVGComponent,
        durationInFrames: 150,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "SimpleGrowth",
        component: SimpleGrowthAnimation,
        durationInFrames: 180,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "SacredGeometry",
        component: SacredGeometryRenderer,
        durationInFrames: 210,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "Infinity",
        component: InfinityRenderer,
        durationInFrames: 180,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "MotivationalGeometry",
        component: MotivationalGeometryRenderer,
        durationInFrames: 210,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "InfinityLoop",
        component: InfinityLoopRenderer,
        durationInFrames: 240,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "PreciseInfinity",
        component: PreciseInfinityRenderer,
        durationInFrames: 90,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "MotivationDiscipline",
        component: MotivationDisciplineRenderer,
        durationInFrames: 240,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "FocusDefeatsDistraction",
        component: FocusDefeatsDistractionRenderer,
        durationInFrames: 150,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      esm.Composition,
      {
        id: "PreciseMotivationDiscipline",
        component: PreciseMotivationDisciplineRenderer,
        durationInFrames: 240,
        fps: 30,
        width: 1080,
        height: 1080,
        defaultProps: {}
      }
    )
  ] });
};

;// ./src/Root.tsx




const Root_RemotionRoot = () => {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(RemotionRoot, {});
};

;// ./src/index.ts



(0,esm.registerRoot)(Root_RemotionRoot);

})();

// This entry needs to be wrapped in an IIFE because it needs to be isolated against other entry modules.
(() => {
var react__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6540);


if (typeof globalThis === 'undefined') {
	window.React = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)));
} else {
	globalThis.React = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_0__, 2)));
}

})();

// This entry needs to be wrapped in an IIFE because it needs to be isolated against other entry modules.
(() => {
/* unused harmony export setBundleModeAndUpdate */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6540);
/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5338);
/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3947);
/* harmony import */ var remotion_no_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9382);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4848);


// src/renderEntry.tsx





var currentBundleMode = {
  type: "index"
};
var setBundleMode = (state) => {
  currentBundleMode = state;
};
var getBundleMode = () => {
  return currentBundleMode;
};
remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.CSSUtils.injectCSS(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.CSSUtils.makeDefaultPreviewCSS(null, "#1f2428"));
var getCanSerializeDefaultProps = (object) => {
  try {
    const str = JSON.stringify(object);
    return str.length < 256 * 1024 * 1024 * 0.9;
  } catch (err) {
    if (err.message.includes("Invalid string length")) {
      return false;
    }
    throw err;
  }
};
var isInHeadlessBrowser = () => {
  return typeof window.remotion_puppeteerTimeout !== "undefined";
};
var DelayedSpinner = () => {
  const [show, setShow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const timeout = setTimeout(() => {
      setShow(true);
    }, 2000);
    return () => {
      clearTimeout(timeout);
    };
  }, []);
  if (!show) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_2__.AbsoluteFill, {
    style: {
      justifyContent: "center",
      alignItems: "center",
      fontSize: 13,
      opacity: 0.6,
      color: "white",
      fontFamily: "Helvetica, Arial, sans-serif"
    },
    children: "Loading Studio"
  });
};
var GetVideoComposition = ({ state }) => {
  const { compositions, currentCompositionMetadata, canvasContent } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.CompositionManager);
  const { setCanvasContent } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.CompositionSetters);
  const portalContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [handle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => (0,remotion__WEBPACK_IMPORTED_MODULE_2__.delayRender)(`Waiting for Composition "${state.compositionName}"`));
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    return () => (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(handle);
  }, [handle]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (compositions.length === 0) {
      return;
    }
    const foundComposition = compositions.find((c) => c.id === state.compositionName);
    if (!foundComposition) {
      throw new Error(`Found no composition with the name ${state.compositionName}. The following compositions were found instead: ${compositions.map((c) => c.id).join(", ")}. All compositions must have their ID calculated deterministically and must be mounted at the same time.`);
    }
    setCanvasContent({
      type: "composition",
      compositionId: foundComposition.id
    });
  }, [compositions, state, currentCompositionMetadata, setCanvasContent]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!canvasContent) {
      return;
    }
    const { current } = portalContainer;
    if (!current) {
      throw new Error("portal did not render");
    }
    current.appendChild(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.portalNode());
    (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(handle);
    return () => {
      current.removeChild(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.portalNode());
    };
  }, [canvasContent, handle]);
  if (!currentCompositionMetadata) {
    return null;
  }
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
    ref: portalContainer,
    id: "remotion-canvas",
    style: {
      width: currentCompositionMetadata.width,
      height: currentCompositionMetadata.height,
      display: "flex",
      backgroundColor: "transparent"
    }
  });
};
var DEFAULT_ROOT_COMPONENT_TIMEOUT = 1e4;
var waitForRootHandle = (0,remotion__WEBPACK_IMPORTED_MODULE_2__.delayRender)("Loading root component - See https://remotion.dev/docs/troubleshooting/loading-root-component if you experience a timeout", {
  timeoutInMilliseconds: typeof window === "undefined" ? DEFAULT_ROOT_COMPONENT_TIMEOUT : window.remotion_puppeteerTimeout ?? DEFAULT_ROOT_COMPONENT_TIMEOUT
});
var videoContainer = document.getElementById("video-container");
var root = null;
var getRootForElement = () => {
  if (root) {
    return root;
  }
  root = react_dom_client__WEBPACK_IMPORTED_MODULE_1__.createRoot(videoContainer);
  return root;
};
var renderToDOM = (content) => {
  if (!react_dom_client__WEBPACK_IMPORTED_MODULE_1__.createRoot) {
    if (remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.ENABLE_V5_BREAKING_CHANGES) {
      throw new Error("Remotion 5.0 does only support React 18+. However, ReactDOM.createRoot() is undefined.");
    }
    react_dom_client__WEBPACK_IMPORTED_MODULE_1__.render(content, videoContainer);
    return;
  }
  getRootForElement().render(content);
};
var renderContent = (Root) => {
  const bundleMode = getBundleMode();
  if (bundleMode.type === "composition") {
    const markup = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.RemotionRoot, {
      logLevel: window.remotion_logLevel,
      numberOfAudioTags: 0,
      audioLatencyHint: window.remotion_audioLatencyHint ?? "interactive",
      onlyRenderComposition: bundleMode.compositionName,
      currentCompositionMetadata: {
        props: remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.deserializeJSONWithSpecialTypes(bundleMode.serializedResolvedPropsWithSchema),
        durationInFrames: bundleMode.compositionDurationInFrames,
        fps: bundleMode.compositionFps,
        height: bundleMode.compositionHeight,
        width: bundleMode.compositionWidth,
        defaultCodec: bundleMode.compositionDefaultCodec,
        defaultOutName: bundleMode.compositionDefaultOutName,
        defaultVideoImageFormat: bundleMode.compositionDefaultVideoImageFormat,
        defaultPixelFormat: bundleMode.compositionDefaultPixelFormat
      },
      children: [
        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Root, {}),
        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(GetVideoComposition, {
          state: bundleMode
        })
      ]
    });
    renderToDOM(markup);
  }
  if (bundleMode.type === "evaluation") {
    const markup = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.RemotionRoot, {
      logLevel: window.remotion_logLevel,
      numberOfAudioTags: 0,
      onlyRenderComposition: null,
      currentCompositionMetadata: null,
      audioLatencyHint: window.remotion_audioLatencyHint ?? "interactive",
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Root, {})
    });
    renderToDOM(markup);
  }
  if (bundleMode.type === "index") {
    if (isInHeadlessBrowser()) {
      return;
    }
    renderToDOM(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DelayedSpinner, {})
    }));
    __webpack_require__.e(/* import() */ 443).then(__webpack_require__.bind(__webpack_require__, 8443)).then(({ StudioInternals }) => {
      renderToDOM(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(StudioInternals.Studio, {
        readOnly: true,
        rootComponent: Root
      }));
    }).catch((err) => {
      renderToDOM(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div", {
        children: [
          "Failed to load Remotion Studio: ",
          err.message
        ]
      }));
    });
  }
};
remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.waitForRoot((Root) => {
  renderContent(Root);
  (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(waitForRootHandle);
});
var setBundleModeAndUpdate = (state) => {
  setBundleMode(state);
  const delay = (0,remotion__WEBPACK_IMPORTED_MODULE_2__.delayRender)("Waiting for root component to load - See https://remotion.dev/docs/troubleshooting/loading-root-component if you experience a timeout");
  remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.waitForRoot((Root) => {
    renderContent(Root);
    requestAnimationFrame(() => {
      (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(delay);
    });
  });
};
if (typeof window !== "undefined") {
  const getUnevaluatedComps = () => {
    if (!remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.getRoot()) {
      throw new Error("registerRoot() was never called. 1. Make sure you specified the correct entrypoint for your bundle. 2. If your registerRoot() call is deferred, use the delayRender/continueRender pattern to tell Remotion to wait.");
    }
    if (!remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.compositionsRef.current) {
      throw new Error("Unexpectedly did not have a CompositionManager");
    }
    const compositions = remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.compositionsRef.current.getCompositions();
    const canSerializeDefaultProps = getCanSerializeDefaultProps(compositions);
    if (!canSerializeDefaultProps) {
      remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.Log.warn(window.remotion_logLevel, "defaultProps are too big to serialize - trying to find the problematic composition...");
      remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.Log.warn(window.remotion_logLevel, "Serialization:", compositions);
      for (const comp of compositions) {
        if (!getCanSerializeDefaultProps(comp)) {
          throw new Error(`defaultProps too big - could not serialize - the defaultProps of composition with ID ${comp.id} - the object that was passed to defaultProps was too big. Learn how to mitigate this error by visiting https://remotion.dev/docs/troubleshooting/serialize-defaultprops`);
        }
      }
      remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.Log.warn(window.remotion_logLevel, "Could not single out a problematic composition -  The composition list as a whole is too big to serialize.");
      throw new Error("defaultProps too big - Could not serialize - an object that was passed to defaultProps was too big. Learn how to mitigate this error by visiting https://remotion.dev/docs/troubleshooting/serialize-defaultprops");
    }
    return compositions;
  };
  window.getStaticCompositions = () => {
    const compositions = getUnevaluatedComps();
    const inputProps = typeof window === "undefined" || (0,remotion__WEBPACK_IMPORTED_MODULE_2__.getRemotionEnvironment)().isPlayer ? {} : (0,remotion__WEBPACK_IMPORTED_MODULE_2__.getInputProps)() ?? {};
    return Promise.all(compositions.map(async (c) => {
      const handle = (0,remotion__WEBPACK_IMPORTED_MODULE_2__.delayRender)(`Running calculateMetadata() for composition ${c.id}. If you didn't want to evaluate this composition, use "selectComposition()" instead of "getCompositions()"`);
      const originalProps = {
        ...c.defaultProps ?? {},
        ...inputProps ?? {}
      };
      const comp = remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.resolveVideoConfig({
        calculateMetadata: c.calculateMetadata,
        compositionDurationInFrames: c.durationInFrames ?? null,
        compositionFps: c.fps ?? null,
        compositionHeight: c.height ?? null,
        compositionWidth: c.width ?? null,
        signal: new AbortController().signal,
        originalProps,
        defaultProps: c.defaultProps ?? {},
        compositionId: c.id
      });
      const resolved = await Promise.resolve(comp);
      (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(handle);
      const { props, defaultProps, ...data } = resolved;
      return {
        ...data,
        serializedResolvedPropsWithCustomSchema: remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.serializeJSONWithSpecialTypes({
          data: props,
          indent: undefined,
          staticBase: null
        }).serializedString,
        serializedDefaultPropsWithCustomSchema: remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.serializeJSONWithSpecialTypes({
          data: defaultProps,
          indent: undefined,
          staticBase: null
        }).serializedString
      };
    }));
  };
  window.remotion_getCompositionNames = () => {
    return getUnevaluatedComps().map((c) => c.id);
  };
  window.remotion_calculateComposition = async (compId) => {
    const compositions = getUnevaluatedComps();
    const selectedComp = compositions.find((c) => c.id === compId);
    if (!selectedComp) {
      throw new Error(`Could not find composition with ID ${compId}. Available compositions: ${compositions.map((c) => c.id).join(", ")}`);
    }
    const abortController = new AbortController;
    const handle = (0,remotion__WEBPACK_IMPORTED_MODULE_2__.delayRender)(`Running the calculateMetadata() function for composition ${compId}`);
    const inputProps = typeof window === "undefined" || (0,remotion__WEBPACK_IMPORTED_MODULE_2__.getRemotionEnvironment)().isPlayer ? {} : (0,remotion__WEBPACK_IMPORTED_MODULE_2__.getInputProps)() ?? {};
    const originalProps = {
      ...selectedComp.defaultProps ?? {},
      ...inputProps ?? {}
    };
    const prom = await Promise.resolve(remotion__WEBPACK_IMPORTED_MODULE_2__.Internals.resolveVideoConfig({
      calculateMetadata: selectedComp.calculateMetadata,
      compositionDurationInFrames: selectedComp.durationInFrames ?? null,
      compositionFps: selectedComp.fps ?? null,
      compositionHeight: selectedComp.height ?? null,
      compositionWidth: selectedComp.width ?? null,
      originalProps,
      signal: abortController.signal,
      defaultProps: selectedComp.defaultProps ?? {},
      compositionId: selectedComp.id
    }));
    (0,remotion__WEBPACK_IMPORTED_MODULE_2__.continueRender)(handle);
    const { props, defaultProps, ...data } = prom;
    return {
      ...data,
      serializedResolvedPropsWithCustomSchema: remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.serializeJSONWithSpecialTypes({
        data: props,
        indent: undefined,
        staticBase: null
      }).serializedString,
      serializedDefaultPropsWithCustomSchema: remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.serializeJSONWithSpecialTypes({
        data: defaultProps,
        indent: undefined,
        staticBase: null
      }).serializedString
    };
  };
  window.remotion_setBundleMode = setBundleModeAndUpdate;
}


})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map